!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(e,t){"use strict";function n(e,t){t=t||te;var n=t.createElement("script");n.text=e,t.head.appendChild(n).parentNode.removeChild(n)}function i(e){var t=!!e&&"length"in e&&e.length,n=fe.type(e);return"function"!==n&&!fe.isWindow(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}function r(e,t,n){return fe.isFunction(t)?fe.grep(e,function(e,i){return!!t.call(e,i,e)!==n}):t.nodeType?fe.grep(e,function(e){return e===t!==n}):"string"!=typeof t?fe.grep(e,function(e){return ae.call(t,e)>-1!==n}):_e.test(t)?fe.filter(t,e,n):(t=fe.filter(t,e),fe.grep(e,function(e){return ae.call(t,e)>-1!==n&&1===e.nodeType}))}function o(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}function a(e){var t={};return fe.each(e.match(De)||[],function(e,n){t[n]=!0}),t}function s(e){return e}function l(e){throw e}function c(e,t,n){var i;try{e&&fe.isFunction(i=e.promise)?i.call(e).done(t).fail(n):e&&fe.isFunction(i=e.then)?i.call(e,t,n):t.call(void 0,e)}catch(e){n.call(void 0,e)}}function u(){te.removeEventListener("DOMContentLoaded",u),e.removeEventListener("load",u),fe.ready()}function d(){this.expando=fe.expando+d.uid++}function p(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:Ne.test(e)?JSON.parse(e):e)}function h(e,t,n){var i;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(Fe,"-$&").toLowerCase(),n=e.getAttribute(i),"string"==typeof n){try{n=p(n)}catch(r){}Ie.set(e,t,n)}else n=void 0;return n}function f(e,t,n,i){var r,o=1,a=20,s=i?function(){return i.cur()}:function(){return fe.css(e,t,"")},l=s(),c=n&&n[3]||(fe.cssNumber[t]?"":"px"),u=(fe.cssNumber[t]||"px"!==c&&+l)&&$e.exec(fe.css(e,t));if(u&&u[3]!==c){c=c||u[3],n=n||[],u=+l||1;do o=o||".5",u/=o,fe.style(e,t,u+c);while(o!==(o=s()/l)&&1!==o&&--a)}return n&&(u=+u||+l||0,r=n[1]?u+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=u,i.end=r)),r}function g(e){var t,n=e.ownerDocument,i=e.nodeName,r=We[i];return r?r:(t=n.body.appendChild(n.createElement(i)),r=fe.css(t,"display"),t.parentNode.removeChild(t),"none"===r&&(r="block"),We[i]=r,r)}function m(e,t){for(var n,i,r=[],o=0,a=e.length;o<a;o++)i=e[o],i.style&&(n=i.style.display,t?("none"===n&&(r[o]=Le.get(i,"display")||null,r[o]||(i.style.display="")),""===i.style.display&&Be(i)&&(r[o]=g(i))):"none"!==n&&(r[o]="none",Le.set(i,"display",n)));for(o=0;o<a;o++)null!=r[o]&&(e[o].style.display=r[o]);return e}function v(e,t){var n;return n="undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t||"*"):"undefined"!=typeof e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&fe.nodeName(e,t)?fe.merge([e],n):n}function y(e,t){for(var n=0,i=e.length;n<i;n++)Le.set(e[n],"globalEval",!t||Le.get(t[n],"globalEval"))}function x(e,t,n,i,r){for(var o,a,s,l,c,u,d=t.createDocumentFragment(),p=[],h=0,f=e.length;h<f;h++)if(o=e[h],o||0===o)if("object"===fe.type(o))fe.merge(p,o.nodeType?[o]:o);else if(Qe.test(o)){for(a=a||d.appendChild(t.createElement("div")),s=(Ge.exec(o)||["",""])[1].toLowerCase(),l=Ke[s]||Ke._default,a.innerHTML=l[1]+fe.htmlPrefilter(o)+l[2],u=l[0];u--;)a=a.lastChild;fe.merge(p,a.childNodes),a=d.firstChild,a.textContent=""}else p.push(t.createTextNode(o));for(d.textContent="",h=0;o=p[h++];)if(i&&fe.inArray(o,i)>-1)r&&r.push(o);else if(c=fe.contains(o.ownerDocument,o),a=v(d.appendChild(o),"script"),c&&y(a),n)for(u=0;o=a[u++];)Ve.test(o.type||"")&&n.push(o);return d}function w(){return!0}function b(){return!1}function k(){try{return te.activeElement}catch(e){}}function C(e,t,n,i,r,o){var a,s;if("object"==typeof t){"string"!=typeof n&&(i=i||n,n=void 0);for(s in t)C(e,s,n,i,t[s],o);return e}if(null==i&&null==r?(r=n,i=n=void 0):null==r&&("string"==typeof n?(r=i,i=void 0):(r=i,i=n,n=void 0)),r===!1)r=b;else if(!r)return e;return 1===o&&(a=r,r=function(e){return fe().off(e),a.apply(this,arguments)},r.guid=a.guid||(a.guid=fe.guid++)),e.each(function(){fe.event.add(this,t,r,i,n)})}function _(e,t){return fe.nodeName(e,"table")&&fe.nodeName(11!==t.nodeType?t:t.firstChild,"tr")?e.getElementsByTagName("tbody")[0]||e:e}function S(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function T(e){var t=it.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function E(e,t){var n,i,r,o,a,s,l,c;if(1===t.nodeType){if(Le.hasData(e)&&(o=Le.access(e),a=Le.set(t,o),c=o.events)){delete a.handle,a.events={};for(r in c)for(n=0,i=c[r].length;n<i;n++)fe.event.add(t,r,c[r][n])}Ie.hasData(e)&&(s=Ie.access(e),l=fe.extend({},s),Ie.set(t,l))}}function P(e,t){var n=t.nodeName.toLowerCase();"input"===n&&Ue.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function A(e,t,i,r){t=re.apply([],t);var o,a,s,l,c,u,d=0,p=e.length,h=p-1,f=t[0],g=fe.isFunction(f);if(g||p>1&&"string"==typeof f&&!pe.checkClone&&nt.test(f))return e.each(function(n){var o=e.eq(n);g&&(t[0]=f.call(this,n,o.html())),A(o,t,i,r)});if(p&&(o=x(t,e[0].ownerDocument,!1,e,r),a=o.firstChild,1===o.childNodes.length&&(o=a),a||r)){for(s=fe.map(v(o,"script"),S),l=s.length;d<p;d++)c=o,d!==h&&(c=fe.clone(c,!0,!0),l&&fe.merge(s,v(c,"script"))),i.call(e[d],c,d);if(l)for(u=s[s.length-1].ownerDocument,fe.map(s,T),d=0;d<l;d++)c=s[d],Ve.test(c.type||"")&&!Le.access(c,"globalEval")&&fe.contains(u,c)&&(c.src?fe._evalUrl&&fe._evalUrl(c.src):n(c.textContent.replace(rt,""),u))}return e}function D(e,t,n){for(var i,r=t?fe.filter(t,e):e,o=0;null!=(i=r[o]);o++)n||1!==i.nodeType||fe.cleanData(v(i)),i.parentNode&&(n&&fe.contains(i.ownerDocument,i)&&y(v(i,"script")),i.parentNode.removeChild(i));return e}function O(e,t,n){var i,r,o,a,s=e.style;return n=n||st(e),n&&(a=n.getPropertyValue(t)||n[t],""!==a||fe.contains(e.ownerDocument,e)||(a=fe.style(e,t)),!pe.pixelMarginRight()&&at.test(a)&&ot.test(t)&&(i=s.width,r=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=i,s.minWidth=r,s.maxWidth=o)),void 0!==a?a+"":a}function j(e,t){return{get:function(){return e()?void delete this.get:(this.get=t).apply(this,arguments)}}}function M(e){if(e in pt)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=dt.length;n--;)if(e=dt[n]+t,e in pt)return e}function R(e,t,n){var i=$e.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function L(e,t,n,i,r){var o,a=0;for(o=n===(i?"border":"content")?4:"width"===t?1:0;o<4;o+=2)"margin"===n&&(a+=fe.css(e,n+ze[o],!0,r)),i?("content"===n&&(a-=fe.css(e,"padding"+ze[o],!0,r)),"margin"!==n&&(a-=fe.css(e,"border"+ze[o]+"Width",!0,r))):(a+=fe.css(e,"padding"+ze[o],!0,r),"padding"!==n&&(a+=fe.css(e,"border"+ze[o]+"Width",!0,r)));return a}function I(e,t,n){var i,r=!0,o=st(e),a="border-box"===fe.css(e,"boxSizing",!1,o);if(e.getClientRects().length&&(i=e.getBoundingClientRect()[t]),i<=0||null==i){if(i=O(e,t,o),(i<0||null==i)&&(i=e.style[t]),at.test(i))return i;r=a&&(pe.boxSizingReliable()||i===e.style[t]),i=parseFloat(i)||0}return i+L(e,t,n||(a?"border":"content"),r,o)+"px"}function N(e,t,n,i,r){return new N.prototype.init(e,t,n,i,r)}function F(){ft&&(e.requestAnimationFrame(F),fe.fx.tick())}function H(){return e.setTimeout(function(){ht=void 0}),ht=fe.now()}function $(e,t){var n,i=0,r={height:e};for(t=t?1:0;i<4;i+=2-t)n=ze[i],r["margin"+n]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}function z(e,t,n){for(var i,r=(W.tweeners[t]||[]).concat(W.tweeners["*"]),o=0,a=r.length;o<a;o++)if(i=r[o].call(n,t,e))return i}function B(e,t,n){var i,r,o,a,s,l,c,u,d="width"in t||"height"in t,p=this,h={},f=e.style,g=e.nodeType&&Be(e),v=Le.get(e,"fxshow");n.queue||(a=fe._queueHooks(e,"fx"),null==a.unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,p.always(function(){p.always(function(){a.unqueued--,fe.queue(e,"fx").length||a.empty.fire()})}));for(i in t)if(r=t[i],gt.test(r)){if(delete t[i],o=o||"toggle"===r,r===(g?"hide":"show")){if("show"!==r||!v||void 0===v[i])continue;g=!0}h[i]=v&&v[i]||fe.style(e,i)}if(l=!fe.isEmptyObject(t),l||!fe.isEmptyObject(h)){d&&1===e.nodeType&&(n.overflow=[f.overflow,f.overflowX,f.overflowY],c=v&&v.display,null==c&&(c=Le.get(e,"display")),u=fe.css(e,"display"),"none"===u&&(c?u=c:(m([e],!0),c=e.style.display||c,u=fe.css(e,"display"),m([e]))),("inline"===u||"inline-block"===u&&null!=c)&&"none"===fe.css(e,"float")&&(l||(p.done(function(){f.display=c}),null==c&&(u=f.display,c="none"===u?"":u)),f.display="inline-block")),n.overflow&&(f.overflow="hidden",p.always(function(){f.overflow=n.overflow[0],f.overflowX=n.overflow[1],f.overflowY=n.overflow[2]})),l=!1;for(i in h)l||(v?"hidden"in v&&(g=v.hidden):v=Le.access(e,"fxshow",{display:c}),o&&(v.hidden=!g),g&&m([e],!0),p.done(function(){g||m([e]),Le.remove(e,"fxshow");for(i in h)fe.style(e,i,h[i])})),l=z(g?v[i]:0,i,p),i in v||(v[i]=l.start,g&&(l.end=l.start,l.start=0))}}function q(e,t){var n,i,r,o,a;for(n in e)if(i=fe.camelCase(n),r=t[i],o=e[n],fe.isArray(o)&&(r=o[1],o=e[n]=o[0]),n!==i&&(e[i]=o,delete e[n]),a=fe.cssHooks[i],a&&"expand"in a){o=a.expand(o),delete e[i];for(n in o)n in e||(e[n]=o[n],t[n]=r)}else t[i]=r}function W(e,t,n){var i,r,o=0,a=W.prefilters.length,s=fe.Deferred().always(function(){delete l.elem}),l=function(){if(r)return!1;for(var t=ht||H(),n=Math.max(0,c.startTime+c.duration-t),i=n/c.duration||0,o=1-i,a=0,l=c.tweens.length;a<l;a++)c.tweens[a].run(o);return s.notifyWith(e,[c,o,n]),o<1&&l?n:(s.resolveWith(e,[c]),!1)},c=s.promise({elem:e,props:fe.extend({},t),opts:fe.extend(!0,{specialEasing:{},easing:fe.easing._default},n),originalProperties:t,originalOptions:n,startTime:ht||H(),duration:n.duration,tweens:[],createTween:function(t,n){var i=fe.Tween(e,c.opts,t,n,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(i),i},stop:function(t){var n=0,i=t?c.tweens.length:0;if(r)return this;for(r=!0;n<i;n++)c.tweens[n].run(1);return t?(s.notifyWith(e,[c,1,0]),s.resolveWith(e,[c,t])):s.rejectWith(e,[c,t]),this}}),u=c.props;for(q(u,c.opts.specialEasing);o<a;o++)if(i=W.prefilters[o].call(c,e,u,c.opts))return fe.isFunction(i.stop)&&(fe._queueHooks(c.elem,c.opts.queue).stop=fe.proxy(i.stop,i)),i;return fe.map(u,z,c),fe.isFunction(c.opts.start)&&c.opts.start.call(e,c),fe.fx.timer(fe.extend(l,{elem:e,anim:c,queue:c.opts.queue})),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always)}function U(e){var t=e.match(De)||[];return t.join(" ")}function G(e){return e.getAttribute&&e.getAttribute("class")||""}function V(e,t,n,i){var r;if(fe.isArray(t))fe.each(t,function(t,r){n||Tt.test(e)?i(e,r):V(e+"["+("object"==typeof r&&null!=r?t:"")+"]",r,n,i)});else if(n||"object"!==fe.type(t))i(e,t);else for(r in t)V(e+"["+r+"]",t[r],n,i)}function K(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var i,r=0,o=t.toLowerCase().match(De)||[];if(fe.isFunction(n))for(;i=o[r++];)"+"===i[0]?(i=i.slice(1)||"*",(e[i]=e[i]||[]).unshift(n)):(e[i]=e[i]||[]).push(n)}}function Q(e,t,n,i){function r(s){var l;return o[s]=!0,fe.each(e[s]||[],function(e,s){var c=s(t,n,i);return"string"!=typeof c||a||o[c]?a?!(l=c):void 0:(t.dataTypes.unshift(c),r(c),!1)}),l}var o={},a=e===Ft;return r(t.dataTypes[0])||!o["*"]&&r("*")}function X(e,t){var n,i,r=fe.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((r[n]?e:i||(i={}))[n]=t[n]);return i&&fe.extend(!0,e,i),e}function Y(e,t,n){for(var i,r,o,a,s=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(r in s)if(s[r]&&s[r].test(i)){l.unshift(r);break}if(l[0]in n)o=l[0];else{for(r in n){if(!l[0]||e.converters[r+" "+l[0]]){o=r;break}a||(a=r)}o=o||a}if(o)return o!==l[0]&&l.unshift(o),n[o]}function Z(e,t,n,i){var r,o,a,s,l,c={},u=e.dataTypes.slice();if(u[1])for(a in e.converters)c[a.toLowerCase()]=e.converters[a];for(o=u.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=o,o=u.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(a=c[l+" "+o]||c["* "+o],!a)for(r in c)if(s=r.split(" "),s[1]===o&&(a=c[l+" "+s[0]]||c["* "+s[0]])){a===!0?a=c[r]:c[r]!==!0&&(o=s[0],u.unshift(s[1]));break}if(a!==!0)if(a&&e["throws"])t=a(t);else try{t=a(t)}catch(d){return{state:"parsererror",error:a?d:"No conversion from "+l+" to "+o}}}return{state:"success",data:t}}function J(e){return fe.isWindow(e)?e:9===e.nodeType&&e.defaultView}var ee=[],te=e.document,ne=Object.getPrototypeOf,ie=ee.slice,re=ee.concat,oe=ee.push,ae=ee.indexOf,se={},le=se.toString,ce=se.hasOwnProperty,ue=ce.toString,de=ue.call(Object),pe={},he="3.1.1",fe=function(e,t){return new fe.fn.init(e,t)},ge=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,me=/^-ms-/,ve=/-([a-z])/g,ye=function(e,t){return t.toUpperCase()};fe.fn=fe.prototype={jquery:he,constructor:fe,length:0,toArray:function(){return ie.call(this)},get:function(e){return null==e?ie.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=fe.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return fe.each(this,e)},map:function(e){return this.pushStack(fe.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(ie.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:oe,sort:ee.sort,splice:ee.splice},fe.extend=fe.fn.extend=function(){var e,t,n,i,r,o,a=arguments[0]||{},s=1,l=arguments.length,c=!1;for("boolean"==typeof a&&(c=a,a=arguments[s]||{},s++),"object"==typeof a||fe.isFunction(a)||(a={}),s===l&&(a=this,s--);s<l;s++)if(null!=(e=arguments[s]))for(t in e)n=a[t],i=e[t],a!==i&&(c&&i&&(fe.isPlainObject(i)||(r=fe.isArray(i)))?(r?(r=!1,o=n&&fe.isArray(n)?n:[]):o=n&&fe.isPlainObject(n)?n:{},a[t]=fe.extend(c,o,i)):void 0!==i&&(a[t]=i));return a},fe.extend({expando:"jQuery"+(he+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===fe.type(e)},isArray:Array.isArray,isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){var t=fe.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==le.call(e))&&(!(t=ne(e))||(n=ce.call(t,"constructor")&&t.constructor,"function"==typeof n&&ue.call(n)===de))},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?se[le.call(e)]||"object":typeof e},globalEval:function(e){n(e)},camelCase:function(e){return e.replace(me,"ms-").replace(ve,ye)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t){var n,r=0;if(i(e))for(n=e.length;r<n&&t.call(e[r],r,e[r])!==!1;r++);else for(r in e)if(t.call(e[r],r,e[r])===!1)break;return e},trim:function(e){return null==e?"":(e+"").replace(ge,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(i(Object(e))?fe.merge(n,"string"==typeof e?[e]:e):oe.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:ae.call(t,e,n)},merge:function(e,t){for(var n=+t.length,i=0,r=e.length;i<n;i++)e[r++]=t[i];return e.length=r,e},grep:function(e,t,n){for(var i,r=[],o=0,a=e.length,s=!n;o<a;o++)i=!t(e[o],o),i!==s&&r.push(e[o]);return r},map:function(e,t,n){var r,o,a=0,s=[];if(i(e))for(r=e.length;a<r;a++)o=t(e[a],a,n),null!=o&&s.push(o);else for(a in e)o=t(e[a],a,n),null!=o&&s.push(o);return re.apply([],s)},guid:1,proxy:function(e,t){var n,i,r;if("string"==typeof t&&(n=e[t],t=e,e=n),fe.isFunction(e))return i=ie.call(arguments,2),r=function(){return e.apply(t||this,i.concat(ie.call(arguments)))},r.guid=e.guid=e.guid||fe.guid++,r},now:Date.now,support:pe}),"function"==typeof Symbol&&(fe.fn[Symbol.iterator]=ee[Symbol.iterator]),fe.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){se["[object "+t+"]"]=t.toLowerCase()});var xe=function(e){function t(e,t,n,i){var r,o,a,s,l,c,u,p=t&&t.ownerDocument,f=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==f&&9!==f&&11!==f)return n;if(!i&&((t?t.ownerDocument||t:z)!==M&&j(t),t=t||M,L)){if(11!==f&&(l=ve.exec(e)))if(r=l[1]){if(9===f){if(!(a=t.getElementById(r)))return n;if(a.id===r)return n.push(a),n}else if(p&&(a=p.getElementById(r))&&H(t,a)&&a.id===r)return n.push(a),n}else{if(l[2])return Z.apply(n,t.getElementsByTagName(e)),n;if((r=l[3])&&k.getElementsByClassName&&t.getElementsByClassName)return Z.apply(n,t.getElementsByClassName(r)),n}if(k.qsa&&!G[e+" "]&&(!I||!I.test(e))){if(1!==f)p=t,u=e;else if("object"!==t.nodeName.toLowerCase()){for((s=t.getAttribute("id"))?s=s.replace(be,ke):t.setAttribute("id",s=$),c=T(e),o=c.length;o--;)c[o]="#"+s+" "+h(c[o]);u=c.join(","),p=ye.test(e)&&d(t.parentNode)||t}if(u)try{return Z.apply(n,p.querySelectorAll(u)),n}catch(g){}finally{s===$&&t.removeAttribute("id")}}}return P(e.replace(se,"$1"),t,n,i)}function n(){function e(n,i){return t.push(n+" ")>C.cacheLength&&delete e[t.shift()],e[n+" "]=i}var t=[];return e}function i(e){return e[$]=!0,e}function r(e){var t=M.createElement("fieldset");try{return!!e(t)}catch(n){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function o(e,t){for(var n=e.split("|"),i=n.length;i--;)C.attrHandle[n[i]]=t}function a(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function s(e){return function(t){var n=t.nodeName.toLowerCase();return"input"===n&&t.type===e}}function l(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function c(e){return function(t){return"form"in t?t.parentNode&&t.disabled===!1?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&_e(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function u(e){return i(function(t){return t=+t,i(function(n,i){for(var r,o=e([],n.length,t),a=o.length;a--;)n[r=o[a]]&&(n[r]=!(i[r]=n[r]))})})}function d(e){return e&&"undefined"!=typeof e.getElementsByTagName&&e}function p(){}function h(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function f(e,t,n){var i=t.dir,r=t.next,o=r||i,a=n&&"parentNode"===o,s=q++;return t.first?function(t,n,r){for(;t=t[i];)if(1===t.nodeType||a)return e(t,n,r);return!1}:function(t,n,l){var c,u,d,p=[B,s];if(l){for(;t=t[i];)if((1===t.nodeType||a)&&e(t,n,l))return!0}else for(;t=t[i];)if(1===t.nodeType||a)if(d=t[$]||(t[$]={}),u=d[t.uniqueID]||(d[t.uniqueID]={}),r&&r===t.nodeName.toLowerCase())t=t[i]||t;else{if((c=u[o])&&c[0]===B&&c[1]===s)return p[2]=c[2];if(u[o]=p,p[2]=e(t,n,l))return!0}return!1}}function g(e){return e.length>1?function(t,n,i){for(var r=e.length;r--;)if(!e[r](t,n,i))return!1;return!0}:e[0]}function m(e,n,i){for(var r=0,o=n.length;r<o;r++)t(e,n[r],i);return i}function v(e,t,n,i,r){for(var o,a=[],s=0,l=e.length,c=null!=t;s<l;s++)(o=e[s])&&(n&&!n(o,i,r)||(a.push(o),c&&t.push(s)));return a}function y(e,t,n,r,o,a){return r&&!r[$]&&(r=y(r)),o&&!o[$]&&(o=y(o,a)),i(function(i,a,s,l){var c,u,d,p=[],h=[],f=a.length,g=i||m(t||"*",s.nodeType?[s]:s,[]),y=!e||!i&&t?g:v(g,p,e,s,l),x=n?o||(i?e:f||r)?[]:a:y;if(n&&n(y,x,s,l),r)for(c=v(x,h),r(c,[],s,l),u=c.length;u--;)(d=c[u])&&(x[h[u]]=!(y[h[u]]=d));if(i){if(o||e){if(o){for(c=[],u=x.length;u--;)(d=x[u])&&c.push(y[u]=d);o(null,x=[],c,l)}for(u=x.length;u--;)(d=x[u])&&(c=o?ee(i,d):p[u])>-1&&(i[c]=!(a[c]=d))}}else x=v(x===a?x.splice(f,x.length):x),o?o(null,a,x,l):Z.apply(a,x)})}function x(e){for(var t,n,i,r=e.length,o=C.relative[e[0].type],a=o||C.relative[" "],s=o?1:0,l=f(function(e){return e===t},a,!0),c=f(function(e){return ee(t,e)>-1},a,!0),u=[function(e,n,i){var r=!o&&(i||n!==A)||((t=n).nodeType?l(e,n,i):c(e,n,i));return t=null,r}];s<r;s++)if(n=C.relative[e[s].type])u=[f(g(u),n)];else{if(n=C.filter[e[s].type].apply(null,e[s].matches),n[$]){for(i=++s;i<r&&!C.relative[e[i].type];i++);return y(s>1&&g(u),s>1&&h(e.slice(0,s-1).concat({value:" "===e[s-2].type?"*":""})).replace(se,"$1"),n,s<i&&x(e.slice(s,i)),i<r&&x(e=e.slice(i)),i<r&&h(e))}u.push(n)}return g(u)}function w(e,n){var r=n.length>0,o=e.length>0,a=function(i,a,s,l,c){var u,d,p,h=0,f="0",g=i&&[],m=[],y=A,x=i||o&&C.find.TAG("*",c),w=B+=null==y?1:Math.random()||.1,b=x.length;for(c&&(A=a===M||a||c);f!==b&&null!=(u=x[f]);f++){if(o&&u){for(d=0,a||u.ownerDocument===M||(j(u),s=!L);p=e[d++];)if(p(u,a||M,s)){l.push(u);break}c&&(B=w)}r&&((u=!p&&u)&&h--,i&&g.push(u))}if(h+=f,r&&f!==h){for(d=0;p=n[d++];)p(g,m,a,s);if(i){if(h>0)for(;f--;)g[f]||m[f]||(m[f]=X.call(l));m=v(m)}Z.apply(l,m),c&&!i&&m.length>0&&h+n.length>1&&t.uniqueSort(l)}return c&&(B=w,A=y),g};return r?i(a):a}var b,k,C,_,S,T,E,P,A,D,O,j,M,R,L,I,N,F,H,$="sizzle"+1*new Date,z=e.document,B=0,q=0,W=n(),U=n(),G=n(),V=function(e,t){return e===t&&(O=!0),0},K={}.hasOwnProperty,Q=[],X=Q.pop,Y=Q.push,Z=Q.push,J=Q.slice,ee=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},te="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ne="[\\x20\\t\\r\\n\\f]",ie="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",re="\\["+ne+"*("+ie+")(?:"+ne+"*([*^$|!~]?=)"+ne+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+ie+"))|)"+ne+"*\\]",oe=":("+ie+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+re+")*)|.*)\\)|)",ae=new RegExp(ne+"+","g"),se=new RegExp("^"+ne+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ne+"+$","g"),le=new RegExp("^"+ne+"*,"+ne+"*"),ce=new RegExp("^"+ne+"*([>+~]|"+ne+")"+ne+"*"),ue=new RegExp("="+ne+"*([^\\]'\"]*?)"+ne+"*\\]","g"),de=new RegExp(oe),pe=new RegExp("^"+ie+"$"),he={ID:new RegExp("^#("+ie+")"),CLASS:new RegExp("^\\.("+ie+")"),TAG:new RegExp("^("+ie+"|[*])"),ATTR:new RegExp("^"+re),PSEUDO:new RegExp("^"+oe),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ne+"*(even|odd|(([+-]|)(\\d*)n|)"+ne+"*(?:([+-]|)"+ne+"*(\\d+)|))"+ne+"*\\)|)","i"),bool:new RegExp("^(?:"+te+")$","i"),needsContext:new RegExp("^"+ne+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ne+"*((?:-\\d)?\\d*)"+ne+"*\\)|)(?=[^-]|$)","i")},fe=/^(?:input|select|textarea|button)$/i,ge=/^h\d$/i,me=/^[^{]+\{\s*\[native \w/,ve=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ye=/[+~]/,xe=new RegExp("\\\\([\\da-f]{1,6}"+ne+"?|("+ne+")|.)","ig"),we=function(e,t,n){var i="0x"+t-65536;return i!==i||n?t:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},be=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ke=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},Ce=function(){j()},_e=f(function(e){return e.disabled===!0&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{Z.apply(Q=J.call(z.childNodes),z.childNodes),Q[z.childNodes.length].nodeType}catch(Se){Z={apply:Q.length?function(e,t){Y.apply(e,J.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}k=t.support={},S=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},j=t.setDocument=function(e){var t,n,i=e?e.ownerDocument||e:z;return i!==M&&9===i.nodeType&&i.documentElement?(M=i,R=M.documentElement,L=!S(M),z!==M&&(n=M.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",Ce,!1):n.attachEvent&&n.attachEvent("onunload",Ce)),k.attributes=r(function(e){return e.className="i",!e.getAttribute("className")}),k.getElementsByTagName=r(function(e){return e.appendChild(M.createComment("")),!e.getElementsByTagName("*").length}),k.getElementsByClassName=me.test(M.getElementsByClassName),k.getById=r(function(e){return R.appendChild(e).id=$,!M.getElementsByName||!M.getElementsByName($).length}),k.getById?(C.filter.ID=function(e){var t=e.replace(xe,we);return function(e){return e.getAttribute("id")===t}},C.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&L){var n=t.getElementById(e);return n?[n]:[]}}):(C.filter.ID=function(e){var t=e.replace(xe,we);return function(e){var n="undefined"!=typeof e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},C.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&L){var n,i,r,o=t.getElementById(e);if(o){if(n=o.getAttributeNode("id"),n&&n.value===e)return[o];for(r=t.getElementsByName(e),i=0;o=r[i++];)if(n=o.getAttributeNode("id"),n&&n.value===e)return[o]}return[]}}),C.find.TAG=k.getElementsByTagName?function(e,t){return"undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):k.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],r=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[r++];)1===n.nodeType&&i.push(n);return i}return o},C.find.CLASS=k.getElementsByClassName&&function(e,t){if("undefined"!=typeof t.getElementsByClassName&&L)return t.getElementsByClassName(e)},N=[],I=[],(k.qsa=me.test(M.querySelectorAll))&&(r(function(e){R.appendChild(e).innerHTML="<a id='"+$+"'></a><select id='"+$+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&I.push("[*^$]="+ne+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||I.push("\\["+ne+"*(?:value|"+te+")"),e.querySelectorAll("[id~="+$+"-]").length||I.push("~="),e.querySelectorAll(":checked").length||I.push(":checked"),e.querySelectorAll("a#"+$+"+*").length||I.push(".#.+[+~]")}),r(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=M.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&I.push("name"+ne+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&I.push(":enabled",":disabled"),R.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&I.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),I.push(",.*:")})),(k.matchesSelector=me.test(F=R.matches||R.webkitMatchesSelector||R.mozMatchesSelector||R.oMatchesSelector||R.msMatchesSelector))&&r(function(e){k.disconnectedMatch=F.call(e,"*"),F.call(e,"[s!='']:x"),N.push("!=",oe)}),I=I.length&&new RegExp(I.join("|")),N=N.length&&new RegExp(N.join("|")),t=me.test(R.compareDocumentPosition),H=t||me.test(R.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,i=t&&t.parentNode;return e===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):e.compareDocumentPosition&&16&e.compareDocumentPosition(i)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},V=t?function(e,t){if(e===t)return O=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n?n:(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1,1&n||!k.sortDetached&&t.compareDocumentPosition(e)===n?e===M||e.ownerDocument===z&&H(z,e)?-1:t===M||t.ownerDocument===z&&H(z,t)?1:D?ee(D,e)-ee(D,t):0:4&n?-1:1)}:function(e,t){if(e===t)return O=!0,0;var n,i=0,r=e.parentNode,o=t.parentNode,s=[e],l=[t];if(!r||!o)return e===M?-1:t===M?1:r?-1:o?1:D?ee(D,e)-ee(D,t):0;if(r===o)return a(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)l.unshift(n);for(;s[i]===l[i];)i++;return i?a(s[i],l[i]):s[i]===z?-1:l[i]===z?1:0},M):M},t.matches=function(e,n){return t(e,null,null,n)},t.matchesSelector=function(e,n){if((e.ownerDocument||e)!==M&&j(e),n=n.replace(ue,"='$1']"),k.matchesSelector&&L&&!G[n+" "]&&(!N||!N.test(n))&&(!I||!I.test(n)))try{var i=F.call(e,n);if(i||k.disconnectedMatch||e.document&&11!==e.document.nodeType)return i}catch(r){}return t(n,M,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==M&&j(e),H(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==M&&j(e);var n=C.attrHandle[t.toLowerCase()],i=n&&K.call(C.attrHandle,t.toLowerCase())?n(e,t,!L):void 0;return void 0!==i?i:k.attributes||!L?e.getAttribute(t):(i=e.getAttributeNode(t))&&i.specified?i.value:null},t.escape=function(e){return(e+"").replace(be,ke)},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,n=[],i=0,r=0;if(O=!k.detectDuplicates,D=!k.sortStable&&e.slice(0),e.sort(V),O){for(;t=e[r++];)t===e[r]&&(i=n.push(r));for(;i--;)e.splice(n[i],1)}return D=null,e},_=t.getText=function(e){var t,n="",i=0,r=e.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=_(e)}else if(3===r||4===r)return e.nodeValue}else for(;t=e[i++];)n+=_(t);return n},C=t.selectors={cacheLength:50,createPseudo:i,match:he,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(xe,we),e[3]=(e[3]||e[4]||e[5]||"").replace(xe,we),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return he.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&de.test(n)&&(t=T(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(xe,we).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=W[e+" "];return t||(t=new RegExp("(^|"+ne+")"+e+"("+ne+"|$)"))&&W(e,function(e){return t.test("string"==typeof e.className&&e.className||"undefined"!=typeof e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,n,i){return function(r){var o=t.attr(r,e);return null==o?"!="===n:!n||(o+="","="===n?o===i:"!="===n?o!==i:"^="===n?i&&0===o.indexOf(i):"*="===n?i&&o.indexOf(i)>-1:"$="===n?i&&o.slice(-i.length)===i:"~="===n?(" "+o.replace(ae," ")+" ").indexOf(i)>-1:"|="===n&&(o===i||o.slice(0,i.length+1)===i+"-"))}},CHILD:function(e,t,n,i,r){var o="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===i&&0===r?function(e){return!!e.parentNode}:function(t,n,l){var c,u,d,p,h,f,g=o!==a?"nextSibling":"previousSibling",m=t.parentNode,v=s&&t.nodeName.toLowerCase(),y=!l&&!s,x=!1;if(m){if(o){for(;g;){for(p=t;p=p[g];)if(s?p.nodeName.toLowerCase()===v:1===p.nodeType)return!1;f=g="only"===e&&!f&&"nextSibling"}return!0}if(f=[a?m.firstChild:m.lastChild],a&&y){for(p=m,d=p[$]||(p[$]={}),u=d[p.uniqueID]||(d[p.uniqueID]={}),c=u[e]||[],h=c[0]===B&&c[1],x=h&&c[2],p=h&&m.childNodes[h];p=++h&&p&&p[g]||(x=h=0)||f.pop();)if(1===p.nodeType&&++x&&p===t){u[e]=[B,h,x];break}}else if(y&&(p=t,d=p[$]||(p[$]={}),u=d[p.uniqueID]||(d[p.uniqueID]={}),c=u[e]||[],h=c[0]===B&&c[1],x=h),x===!1)for(;(p=++h&&p&&p[g]||(x=h=0)||f.pop())&&((s?p.nodeName.toLowerCase()!==v:1!==p.nodeType)||!++x||(y&&(d=p[$]||(p[$]={}),u=d[p.uniqueID]||(d[p.uniqueID]={}),u[e]=[B,x]),p!==t)););return x-=r,x===i||x%i===0&&x/i>=0}}},PSEUDO:function(e,n){var r,o=C.pseudos[e]||C.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return o[$]?o(n):o.length>1?(r=[e,e,"",n],C.setFilters.hasOwnProperty(e.toLowerCase())?i(function(e,t){for(var i,r=o(e,n),a=r.length;a--;)i=ee(e,r[a]),e[i]=!(t[i]=r[a])}):function(e){return o(e,0,r)}):o}},pseudos:{not:i(function(e){var t=[],n=[],r=E(e.replace(se,"$1"));return r[$]?i(function(e,t,n,i){for(var o,a=r(e,null,i,[]),s=e.length;s--;)(o=a[s])&&(e[s]=!(t[s]=o))}):function(e,i,o){return t[0]=e,r(t,null,o,n),t[0]=null,!n.pop()}}),has:i(function(e){return function(n){return t(e,n).length>0}}),contains:i(function(e){return e=e.replace(xe,we),function(t){return(t.textContent||t.innerText||_(t)).indexOf(e)>-1}}),lang:i(function(e){return pe.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(xe,we).toLowerCase(),function(t){var n;do if(n=L?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return n=n.toLowerCase(),n===e||0===n.indexOf(e+"-");while((t=t.parentNode)&&1===t.nodeType);return!1;
}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===R},focus:function(e){return e===M.activeElement&&(!M.hasFocus||M.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:c(!1),disabled:c(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,e.selected===!0},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!C.pseudos.empty(e)},header:function(e){return ge.test(e.nodeName)},input:function(e){return fe.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:u(function(){return[0]}),last:u(function(e,t){return[t-1]}),eq:u(function(e,t,n){return[n<0?n+t:n]}),even:u(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:u(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:u(function(e,t,n){for(var i=n<0?n+t:n;--i>=0;)e.push(i);return e}),gt:u(function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e})}},C.pseudos.nth=C.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})C.pseudos[b]=s(b);for(b in{submit:!0,reset:!0})C.pseudos[b]=l(b);return p.prototype=C.filters=C.pseudos,C.setFilters=new p,T=t.tokenize=function(e,n){var i,r,o,a,s,l,c,u=U[e+" "];if(u)return n?0:u.slice(0);for(s=e,l=[],c=C.preFilter;s;){i&&!(r=le.exec(s))||(r&&(s=s.slice(r[0].length)||s),l.push(o=[])),i=!1,(r=ce.exec(s))&&(i=r.shift(),o.push({value:i,type:r[0].replace(se," ")}),s=s.slice(i.length));for(a in C.filter)!(r=he[a].exec(s))||c[a]&&!(r=c[a](r))||(i=r.shift(),o.push({value:i,type:a,matches:r}),s=s.slice(i.length));if(!i)break}return n?s.length:s?t.error(e):U(e,l).slice(0)},E=t.compile=function(e,t){var n,i=[],r=[],o=G[e+" "];if(!o){for(t||(t=T(e)),n=t.length;n--;)o=x(t[n]),o[$]?i.push(o):r.push(o);o=G(e,w(r,i)),o.selector=e}return o},P=t.select=function(e,t,n,i){var r,o,a,s,l,c="function"==typeof e&&e,u=!i&&T(e=c.selector||e);if(n=n||[],1===u.length){if(o=u[0]=u[0].slice(0),o.length>2&&"ID"===(a=o[0]).type&&9===t.nodeType&&L&&C.relative[o[1].type]){if(t=(C.find.ID(a.matches[0].replace(xe,we),t)||[])[0],!t)return n;c&&(t=t.parentNode),e=e.slice(o.shift().value.length)}for(r=he.needsContext.test(e)?0:o.length;r--&&(a=o[r],!C.relative[s=a.type]);)if((l=C.find[s])&&(i=l(a.matches[0].replace(xe,we),ye.test(o[0].type)&&d(t.parentNode)||t))){if(o.splice(r,1),e=i.length&&h(o),!e)return Z.apply(n,i),n;break}}return(c||E(e,u))(i,t,!L,n,!t||ye.test(e)&&d(t.parentNode)||t),n},k.sortStable=$.split("").sort(V).join("")===$,k.detectDuplicates=!!O,j(),k.sortDetached=r(function(e){return 1&e.compareDocumentPosition(M.createElement("fieldset"))}),r(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||o("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),k.attributes&&r(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||o("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),r(function(e){return null==e.getAttribute("disabled")})||o(te,function(e,t,n){var i;if(!n)return e[t]===!0?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null}),t}(e);fe.find=xe,fe.expr=xe.selectors,fe.expr[":"]=fe.expr.pseudos,fe.uniqueSort=fe.unique=xe.uniqueSort,fe.text=xe.getText,fe.isXMLDoc=xe.isXML,fe.contains=xe.contains,fe.escapeSelector=xe.escape;var we=function(e,t,n){for(var i=[],r=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(r&&fe(e).is(n))break;i.push(e)}return i},be=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},ke=fe.expr.match.needsContext,Ce=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,_e=/^.[^:#\[\.,]*$/;fe.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?fe.find.matchesSelector(i,e)?[i]:[]:fe.find.matches(e,fe.grep(t,function(e){return 1===e.nodeType}))},fe.fn.extend({find:function(e){var t,n,i=this.length,r=this;if("string"!=typeof e)return this.pushStack(fe(e).filter(function(){for(t=0;t<i;t++)if(fe.contains(r[t],this))return!0}));for(n=this.pushStack([]),t=0;t<i;t++)fe.find(e,r[t],n);return i>1?fe.uniqueSort(n):n},filter:function(e){return this.pushStack(r(this,e||[],!1))},not:function(e){return this.pushStack(r(this,e||[],!0))},is:function(e){return!!r(this,"string"==typeof e&&ke.test(e)?fe(e):e||[],!1).length}});var Se,Te=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,Ee=fe.fn.init=function(e,t,n){var i,r;if(!e)return this;if(n=n||Se,"string"==typeof e){if(i="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:Te.exec(e),!i||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof fe?t[0]:t,fe.merge(this,fe.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:te,!0)),Ce.test(i[1])&&fe.isPlainObject(t))for(i in t)fe.isFunction(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return r=te.getElementById(i[2]),r&&(this[0]=r,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):fe.isFunction(e)?void 0!==n.ready?n.ready(e):e(fe):fe.makeArray(e,this)};Ee.prototype=fe.fn,Se=fe(te);var Pe=/^(?:parents|prev(?:Until|All))/,Ae={children:!0,contents:!0,next:!0,prev:!0};fe.fn.extend({has:function(e){var t=fe(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(fe.contains(this,t[e]))return!0})},closest:function(e,t){var n,i=0,r=this.length,o=[],a="string"!=typeof e&&fe(e);if(!ke.test(e))for(;i<r;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&fe.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?fe.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?ae.call(fe(e),this[0]):ae.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(fe.uniqueSort(fe.merge(this.get(),fe(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),fe.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return we(e,"parentNode")},parentsUntil:function(e,t,n){return we(e,"parentNode",n)},next:function(e){return o(e,"nextSibling")},prev:function(e){return o(e,"previousSibling")},nextAll:function(e){return we(e,"nextSibling")},prevAll:function(e){return we(e,"previousSibling")},nextUntil:function(e,t,n){return we(e,"nextSibling",n)},prevUntil:function(e,t,n){return we(e,"previousSibling",n)},siblings:function(e){return be((e.parentNode||{}).firstChild,e)},children:function(e){return be(e.firstChild)},contents:function(e){return e.contentDocument||fe.merge([],e.childNodes)}},function(e,t){fe.fn[e]=function(n,i){var r=fe.map(this,t,n);return"Until"!==e.slice(-5)&&(i=n),i&&"string"==typeof i&&(r=fe.filter(i,r)),this.length>1&&(Ae[e]||fe.uniqueSort(r),Pe.test(e)&&r.reverse()),this.pushStack(r)}});var De=/[^\x20\t\r\n\f]+/g;fe.Callbacks=function(e){e="string"==typeof e?a(e):fe.extend({},e);var t,n,i,r,o=[],s=[],l=-1,c=function(){for(r=e.once,i=t=!0;s.length;l=-1)for(n=s.shift();++l<o.length;)o[l].apply(n[0],n[1])===!1&&e.stopOnFalse&&(l=o.length,n=!1);e.memory||(n=!1),t=!1,r&&(o=n?[]:"")},u={add:function(){return o&&(n&&!t&&(l=o.length-1,s.push(n)),function i(t){fe.each(t,function(t,n){fe.isFunction(n)?e.unique&&u.has(n)||o.push(n):n&&n.length&&"string"!==fe.type(n)&&i(n)})}(arguments),n&&!t&&c()),this},remove:function(){return fe.each(arguments,function(e,t){for(var n;(n=fe.inArray(t,o,n))>-1;)o.splice(n,1),n<=l&&l--}),this},has:function(e){return e?fe.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return r=s=[],o=n="",this},disabled:function(){return!o},lock:function(){return r=s=[],n||t||(o=n=""),this},locked:function(){return!!r},fireWith:function(e,n){return r||(n=n||[],n=[e,n.slice?n.slice():n],s.push(n),t||c()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!i}};return u},fe.extend({Deferred:function(t){var n=[["notify","progress",fe.Callbacks("memory"),fe.Callbacks("memory"),2],["resolve","done",fe.Callbacks("once memory"),fe.Callbacks("once memory"),0,"resolved"],["reject","fail",fe.Callbacks("once memory"),fe.Callbacks("once memory"),1,"rejected"]],i="pending",r={state:function(){return i},always:function(){return o.done(arguments).fail(arguments),this},"catch":function(e){return r.then(null,e)},pipe:function(){var e=arguments;return fe.Deferred(function(t){fe.each(n,function(n,i){var r=fe.isFunction(e[i[4]])&&e[i[4]];o[i[1]](function(){var e=r&&r.apply(this,arguments);e&&fe.isFunction(e.promise)?e.promise().progress(t.notify).done(t.resolve).fail(t.reject):t[i[0]+"With"](this,r?[e]:arguments)})}),e=null}).promise()},then:function(t,i,r){function o(t,n,i,r){return function(){var c=this,u=arguments,d=function(){var e,d;if(!(t<a)){if(e=i.apply(c,u),e===n.promise())throw new TypeError("Thenable self-resolution");d=e&&("object"==typeof e||"function"==typeof e)&&e.then,fe.isFunction(d)?r?d.call(e,o(a,n,s,r),o(a,n,l,r)):(a++,d.call(e,o(a,n,s,r),o(a,n,l,r),o(a,n,s,n.notifyWith))):(i!==s&&(c=void 0,u=[e]),(r||n.resolveWith)(c,u))}},p=r?d:function(){try{d()}catch(e){fe.Deferred.exceptionHook&&fe.Deferred.exceptionHook(e,p.stackTrace),t+1>=a&&(i!==l&&(c=void 0,u=[e]),n.rejectWith(c,u))}};t?p():(fe.Deferred.getStackHook&&(p.stackTrace=fe.Deferred.getStackHook()),e.setTimeout(p))}}var a=0;return fe.Deferred(function(e){n[0][3].add(o(0,e,fe.isFunction(r)?r:s,e.notifyWith)),n[1][3].add(o(0,e,fe.isFunction(t)?t:s)),n[2][3].add(o(0,e,fe.isFunction(i)?i:l))}).promise()},promise:function(e){return null!=e?fe.extend(e,r):r}},o={};return fe.each(n,function(e,t){var a=t[2],s=t[5];r[t[1]]=a.add,s&&a.add(function(){i=s},n[3-e][2].disable,n[0][2].lock),a.add(t[3].fire),o[t[0]]=function(){return o[t[0]+"With"](this===o?void 0:this,arguments),this},o[t[0]+"With"]=a.fireWith}),r.promise(o),t&&t.call(o,o),o},when:function(e){var t=arguments.length,n=t,i=Array(n),r=ie.call(arguments),o=fe.Deferred(),a=function(e){return function(n){i[e]=this,r[e]=arguments.length>1?ie.call(arguments):n,--t||o.resolveWith(i,r)}};if(t<=1&&(c(e,o.done(a(n)).resolve,o.reject),"pending"===o.state()||fe.isFunction(r[n]&&r[n].then)))return o.then();for(;n--;)c(r[n],a(n),o.reject);return o.promise()}});var Oe=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;fe.Deferred.exceptionHook=function(t,n){e.console&&e.console.warn&&t&&Oe.test(t.name)&&e.console.warn("jQuery.Deferred exception: "+t.message,t.stack,n)},fe.readyException=function(t){e.setTimeout(function(){throw t})};var je=fe.Deferred();fe.fn.ready=function(e){return je.then(e)["catch"](function(e){fe.readyException(e)}),this},fe.extend({isReady:!1,readyWait:1,holdReady:function(e){e?fe.readyWait++:fe.ready(!0)},ready:function(e){(e===!0?--fe.readyWait:fe.isReady)||(fe.isReady=!0,e!==!0&&--fe.readyWait>0||je.resolveWith(te,[fe]))}}),fe.ready.then=je.then,"complete"===te.readyState||"loading"!==te.readyState&&!te.documentElement.doScroll?e.setTimeout(fe.ready):(te.addEventListener("DOMContentLoaded",u),e.addEventListener("load",u));var Me=function(e,t,n,i,r,o,a){var s=0,l=e.length,c=null==n;if("object"===fe.type(n)){r=!0;for(s in n)Me(e,t,s,n[s],!0,o,a)}else if(void 0!==i&&(r=!0,fe.isFunction(i)||(a=!0),c&&(a?(t.call(e,i),t=null):(c=t,t=function(e,t,n){return c.call(fe(e),n)})),t))for(;s<l;s++)t(e[s],n,a?i:i.call(e[s],s,t(e[s],n)));return r?e:c?t.call(e):l?t(e[0],n):o},Re=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};d.uid=1,d.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Re(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var i,r=this.cache(e);if("string"==typeof t)r[fe.camelCase(t)]=n;else for(i in t)r[fe.camelCase(i)]=t[i];return r},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][fe.camelCase(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i=e[this.expando];if(void 0!==i){if(void 0!==t){fe.isArray(t)?t=t.map(fe.camelCase):(t=fe.camelCase(t),t=t in i?[t]:t.match(De)||[]),n=t.length;for(;n--;)delete i[t[n]]}(void 0===t||fe.isEmptyObject(i))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!fe.isEmptyObject(t)}};var Le=new d,Ie=new d,Ne=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Fe=/[A-Z]/g;fe.extend({hasData:function(e){return Ie.hasData(e)||Le.hasData(e)},data:function(e,t,n){return Ie.access(e,t,n)},removeData:function(e,t){Ie.remove(e,t)},_data:function(e,t,n){return Le.access(e,t,n)},_removeData:function(e,t){Le.remove(e,t)}}),fe.fn.extend({data:function(e,t){var n,i,r,o=this[0],a=o&&o.attributes;if(void 0===e){if(this.length&&(r=Ie.get(o),1===o.nodeType&&!Le.get(o,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&(i=a[n].name,0===i.indexOf("data-")&&(i=fe.camelCase(i.slice(5)),h(o,i,r[i])));Le.set(o,"hasDataAttrs",!0)}return r}return"object"==typeof e?this.each(function(){Ie.set(this,e)}):Me(this,function(t){var n;if(o&&void 0===t){if(n=Ie.get(o,e),void 0!==n)return n;if(n=h(o,e),void 0!==n)return n}else this.each(function(){Ie.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){Ie.remove(this,e)})}}),fe.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=Le.get(e,t),n&&(!i||fe.isArray(n)?i=Le.access(e,t,fe.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=fe.queue(e,t),i=n.length,r=n.shift(),o=fe._queueHooks(e,t),a=function(){fe.dequeue(e,t)};"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===t&&n.unshift("inprogress"),delete o.stop,r.call(e,a,o)),!i&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Le.get(e,n)||Le.access(e,n,{empty:fe.Callbacks("once memory").add(function(){Le.remove(e,[t+"queue",n])})})}}),fe.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?fe.queue(this[0],e):void 0===t?this:this.each(function(){var n=fe.queue(this,e,t);fe._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&fe.dequeue(this,e)})},dequeue:function(e){return this.each(function(){fe.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,i=1,r=fe.Deferred(),o=this,a=this.length,s=function(){--i||r.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)n=Le.get(o[a],e+"queueHooks"),n&&n.empty&&(i++,n.empty.add(s));return s(),r.promise(t)}});var He=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,$e=new RegExp("^(?:([+-])=|)("+He+")([a-z%]*)$","i"),ze=["Top","Right","Bottom","Left"],Be=function(e,t){return e=t||e,"none"===e.style.display||""===e.style.display&&fe.contains(e.ownerDocument,e)&&"none"===fe.css(e,"display")},qe=function(e,t,n,i){var r,o,a={};for(o in t)a[o]=e.style[o],e.style[o]=t[o];r=n.apply(e,i||[]);for(o in t)e.style[o]=a[o];return r},We={};fe.fn.extend({show:function(){return m(this,!0)},hide:function(){return m(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){Be(this)?fe(this).show():fe(this).hide()})}});var Ue=/^(?:checkbox|radio)$/i,Ge=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,Ve=/^$|\/(?:java|ecma)script/i,Ke={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Ke.optgroup=Ke.option,Ke.tbody=Ke.tfoot=Ke.colgroup=Ke.caption=Ke.thead,Ke.th=Ke.td;var Qe=/<|&#?\w+;/;!function(){var e=te.createDocumentFragment(),t=e.appendChild(te.createElement("div")),n=te.createElement("input");n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),t.appendChild(n),pe.checkClone=t.cloneNode(!0).cloneNode(!0).lastChild.checked,t.innerHTML="<textarea>x</textarea>",pe.noCloneChecked=!!t.cloneNode(!0).lastChild.defaultValue}();var Xe=te.documentElement,Ye=/^key/,Ze=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Je=/^([^.]*)(?:\.(.+)|)/;fe.event={global:{},add:function(e,t,n,i,r){var o,a,s,l,c,u,d,p,h,f,g,m=Le.get(e);if(m)for(n.handler&&(o=n,n=o.handler,r=o.selector),r&&fe.find.matchesSelector(Xe,r),n.guid||(n.guid=fe.guid++),(l=m.events)||(l=m.events={}),(a=m.handle)||(a=m.handle=function(t){return"undefined"!=typeof fe&&fe.event.triggered!==t.type?fe.event.dispatch.apply(e,arguments):void 0}),t=(t||"").match(De)||[""],c=t.length;c--;)s=Je.exec(t[c])||[],h=g=s[1],f=(s[2]||"").split(".").sort(),h&&(d=fe.event.special[h]||{},h=(r?d.delegateType:d.bindType)||h,d=fe.event.special[h]||{},u=fe.extend({type:h,origType:g,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&fe.expr.match.needsContext.test(r),namespace:f.join(".")},o),(p=l[h])||(p=l[h]=[],p.delegateCount=0,d.setup&&d.setup.call(e,i,f,a)!==!1||e.addEventListener&&e.addEventListener(h,a)),d.add&&(d.add.call(e,u),u.handler.guid||(u.handler.guid=n.guid)),r?p.splice(p.delegateCount++,0,u):p.push(u),fe.event.global[h]=!0)},remove:function(e,t,n,i,r){var o,a,s,l,c,u,d,p,h,f,g,m=Le.hasData(e)&&Le.get(e);if(m&&(l=m.events)){for(t=(t||"").match(De)||[""],c=t.length;c--;)if(s=Je.exec(t[c])||[],h=g=s[1],f=(s[2]||"").split(".").sort(),h){for(d=fe.event.special[h]||{},h=(i?d.delegateType:d.bindType)||h,p=l[h]||[],s=s[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=p.length;o--;)u=p[o],!r&&g!==u.origType||n&&n.guid!==u.guid||s&&!s.test(u.namespace)||i&&i!==u.selector&&("**"!==i||!u.selector)||(p.splice(o,1),u.selector&&p.delegateCount--,d.remove&&d.remove.call(e,u));a&&!p.length&&(d.teardown&&d.teardown.call(e,f,m.handle)!==!1||fe.removeEvent(e,h,m.handle),delete l[h])}else for(h in l)fe.event.remove(e,h+t[c],n,i,!0);fe.isEmptyObject(l)&&Le.remove(e,"handle events")}},dispatch:function(e){var t,n,i,r,o,a,s=fe.event.fix(e),l=new Array(arguments.length),c=(Le.get(this,"events")||{})[s.type]||[],u=fe.event.special[s.type]||{};for(l[0]=s,t=1;t<arguments.length;t++)l[t]=arguments[t];if(s.delegateTarget=this,!u.preDispatch||u.preDispatch.call(this,s)!==!1){for(a=fe.event.handlers.call(this,s,c),t=0;(r=a[t++])&&!s.isPropagationStopped();)for(s.currentTarget=r.elem,n=0;(o=r.handlers[n++])&&!s.isImmediatePropagationStopped();)s.rnamespace&&!s.rnamespace.test(o.namespace)||(s.handleObj=o,s.data=o.data,i=((fe.event.special[o.origType]||{}).handle||o.handler).apply(r.elem,l),void 0!==i&&(s.result=i)===!1&&(s.preventDefault(),s.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,s),s.result}},handlers:function(e,t){var n,i,r,o,a,s=[],l=t.delegateCount,c=e.target;if(l&&c.nodeType&&!("click"===e.type&&e.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||c.disabled!==!0)){for(o=[],a={},n=0;n<l;n++)i=t[n],r=i.selector+" ",void 0===a[r]&&(a[r]=i.needsContext?fe(r,this).index(c)>-1:fe.find(r,this,null,[c]).length),a[r]&&o.push(i);o.length&&s.push({elem:c,handlers:o})}return c=this,l<t.length&&s.push({elem:c,handlers:t.slice(l)}),s},addProp:function(e,t){Object.defineProperty(fe.Event.prototype,e,{enumerable:!0,configurable:!0,get:fe.isFunction(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[fe.expando]?e:new fe.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==k()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===k()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&fe.nodeName(this,"input"))return this.click(),!1},_default:function(e){return fe.nodeName(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},fe.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},fe.Event=function(e,t){return this instanceof fe.Event?(e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&e.returnValue===!1?w:b,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&fe.extend(this,t),this.timeStamp=e&&e.timeStamp||fe.now(),void(this[fe.expando]=!0)):new fe.Event(e,t)},fe.Event.prototype={constructor:fe.Event,isDefaultPrevented:b,isPropagationStopped:b,isImmediatePropagationStopped:b,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=w,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=w,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=w,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},fe.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,"char":!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Ye.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Ze.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},fe.event.addProp),fe.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){fe.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,i=this,r=e.relatedTarget,o=e.handleObj;return r&&(r===i||fe.contains(i,r))||(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),fe.fn.extend({on:function(e,t,n,i){return C(this,e,t,n,i)},one:function(e,t,n,i){return C(this,e,t,n,i,1)},off:function(e,t,n){var i,r;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,fe(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof e){for(r in e)this.off(r,t,e[r]);return this}return t!==!1&&"function"!=typeof t||(n=t,t=void 0),n===!1&&(n=b),this.each(function(){fe.event.remove(this,e,n,t)})}});var et=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,tt=/<script|<style|<link/i,nt=/checked\s*(?:[^=]|=\s*.checked.)/i,it=/^true\/(.*)/,rt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;fe.extend({htmlPrefilter:function(e){return e.replace(et,"<$1></$2>")},clone:function(e,t,n){var i,r,o,a,s=e.cloneNode(!0),l=fe.contains(e.ownerDocument,e);if(!(pe.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||fe.isXMLDoc(e)))for(a=v(s),o=v(e),i=0,r=o.length;i<r;i++)P(o[i],a[i]);if(t)if(n)for(o=o||v(e),a=a||v(s),i=0,r=o.length;i<r;i++)E(o[i],a[i]);else E(e,s);return a=v(s,"script"),a.length>0&&y(a,!l&&v(e,"script")),s},cleanData:function(e){for(var t,n,i,r=fe.event.special,o=0;void 0!==(n=e[o]);o++)if(Re(n)){if(t=n[Le.expando]){if(t.events)for(i in t.events)r[i]?fe.event.remove(n,i):fe.removeEvent(n,i,t.handle);n[Le.expando]=void 0}n[Ie.expando]&&(n[Ie.expando]=void 0)}}}),fe.fn.extend({detach:function(e){return D(this,e,!0)},remove:function(e){return D(this,e)},text:function(e){return Me(this,function(e){return void 0===e?fe.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return A(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=_(this,e);t.appendChild(e)}})},prepend:function(){return A(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=_(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return A(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return A(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(fe.cleanData(v(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return fe.clone(this,e,t)})},html:function(e){return Me(this,function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!tt.test(e)&&!Ke[(Ge.exec(e)||["",""])[1].toLowerCase()]){e=fe.htmlPrefilter(e);try{for(;n<i;n++)t=this[n]||{},1===t.nodeType&&(fe.cleanData(v(t,!1)),t.innerHTML=e);t=0}catch(r){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return A(this,arguments,function(t){var n=this.parentNode;fe.inArray(this,e)<0&&(fe.cleanData(v(this)),n&&n.replaceChild(t,this))},e)}}),fe.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){fe.fn[e]=function(e){for(var n,i=[],r=fe(e),o=r.length-1,a=0;a<=o;a++)n=a===o?this:this.clone(!0),fe(r[a])[t](n),oe.apply(i,n.get());return this.pushStack(i)}});var ot=/^margin/,at=new RegExp("^("+He+")(?!px)[a-z%]+$","i"),st=function(t){var n=t.ownerDocument.defaultView;return n&&n.opener||(n=e),n.getComputedStyle(t)};!function(){function t(){if(s){s.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",s.innerHTML="",Xe.appendChild(a);var t=e.getComputedStyle(s);n="1%"!==t.top,o="2px"===t.marginLeft,i="4px"===t.width,s.style.marginRight="50%",r="4px"===t.marginRight,Xe.removeChild(a),s=null}}var n,i,r,o,a=te.createElement("div"),s=te.createElement("div");s.style&&(s.style.backgroundClip="content-box",s.cloneNode(!0).style.backgroundClip="",pe.clearCloneStyle="content-box"===s.style.backgroundClip,a.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",a.appendChild(s),fe.extend(pe,{pixelPosition:function(){return t(),n},boxSizingReliable:function(){return t(),i},pixelMarginRight:function(){return t(),r},reliableMarginLeft:function(){return t(),o}}))}();var lt=/^(none|table(?!-c[ea]).+)/,ct={position:"absolute",visibility:"hidden",display:"block"},ut={letterSpacing:"0",fontWeight:"400"},dt=["Webkit","Moz","ms"],pt=te.createElement("div").style;fe.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=O(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var r,o,a,s=fe.camelCase(t),l=e.style;return t=fe.cssProps[s]||(fe.cssProps[s]=M(s)||s),a=fe.cssHooks[t]||fe.cssHooks[s],void 0===n?a&&"get"in a&&void 0!==(r=a.get(e,!1,i))?r:l[t]:(o=typeof n,"string"===o&&(r=$e.exec(n))&&r[1]&&(n=f(e,t,r),o="number"),null!=n&&n===n&&("number"===o&&(n+=r&&r[3]||(fe.cssNumber[s]?"":"px")),pe.clearCloneStyle||""!==n||0!==t.indexOf("background")||(l[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,i))||(l[t]=n)),void 0)}},css:function(e,t,n,i){var r,o,a,s=fe.camelCase(t);return t=fe.cssProps[s]||(fe.cssProps[s]=M(s)||s),a=fe.cssHooks[t]||fe.cssHooks[s],a&&"get"in a&&(r=a.get(e,!0,n)),void 0===r&&(r=O(e,t,i)),"normal"===r&&t in ut&&(r=ut[t]),""===n||n?(o=parseFloat(r),n===!0||isFinite(o)?o||0:r):r}}),fe.each(["height","width"],function(e,t){fe.cssHooks[t]={get:function(e,n,i){if(n)return!lt.test(fe.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?I(e,t,i):qe(e,ct,function(){return I(e,t,i)})},set:function(e,n,i){var r,o=i&&st(e),a=i&&L(e,t,i,"border-box"===fe.css(e,"boxSizing",!1,o),o);return a&&(r=$e.exec(n))&&"px"!==(r[3]||"px")&&(e.style[t]=n,n=fe.css(e,t)),R(e,n,a)}}}),fe.cssHooks.marginLeft=j(pe.reliableMarginLeft,function(e,t){if(t)return(parseFloat(O(e,"marginLeft"))||e.getBoundingClientRect().left-qe(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),fe.each({margin:"",padding:"",border:"Width"},function(e,t){fe.cssHooks[e+t]={expand:function(n){for(var i=0,r={},o="string"==typeof n?n.split(" "):[n];i<4;i++)r[e+ze[i]+t]=o[i]||o[i-2]||o[0];return r}},ot.test(e)||(fe.cssHooks[e+t].set=R)}),fe.fn.extend({css:function(e,t){return Me(this,function(e,t,n){var i,r,o={},a=0;if(fe.isArray(t)){for(i=st(e),r=t.length;a<r;a++)o[t[a]]=fe.css(e,t[a],!1,i);return o}return void 0!==n?fe.style(e,t,n):fe.css(e,t)},e,t,arguments.length>1)}}),fe.Tween=N,N.prototype={constructor:N,init:function(e,t,n,i,r,o){this.elem=e,this.prop=n,this.easing=r||fe.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=o||(fe.cssNumber[n]?"":"px")},cur:function(){var e=N.propHooks[this.prop];return e&&e.get?e.get(this):N.propHooks._default.get(this)},run:function(e){var t,n=N.propHooks[this.prop];return this.options.duration?this.pos=t=fe.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):N.propHooks._default.set(this),this}},N.prototype.init.prototype=N.prototype,N.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=fe.css(e.elem,e.prop,""),t&&"auto"!==t?t:0)},set:function(e){fe.fx.step[e.prop]?fe.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[fe.cssProps[e.prop]]&&!fe.cssHooks[e.prop]?e.elem[e.prop]=e.now:fe.style(e.elem,e.prop,e.now+e.unit)}}},N.propHooks.scrollTop=N.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},fe.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},fe.fx=N.prototype.init,fe.fx.step={};var ht,ft,gt=/^(?:toggle|show|hide)$/,mt=/queueHooks$/;fe.Animation=fe.extend(W,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return f(n.elem,e,$e.exec(t),n),n}]},tweener:function(e,t){fe.isFunction(e)?(t=e,e=["*"]):e=e.match(De);for(var n,i=0,r=e.length;i<r;i++)n=e[i],W.tweeners[n]=W.tweeners[n]||[],W.tweeners[n].unshift(t)},prefilters:[B],prefilter:function(e,t){t?W.prefilters.unshift(e):W.prefilters.push(e)}}),fe.speed=function(e,t,n){var i=e&&"object"==typeof e?fe.extend({},e):{complete:n||!n&&t||fe.isFunction(e)&&e,duration:e,easing:n&&t||t&&!fe.isFunction(t)&&t};return fe.fx.off||te.hidden?i.duration=0:"number"!=typeof i.duration&&(i.duration in fe.fx.speeds?i.duration=fe.fx.speeds[i.duration]:i.duration=fe.fx.speeds._default),null!=i.queue&&i.queue!==!0||(i.queue="fx"),i.old=i.complete,i.complete=function(){fe.isFunction(i.old)&&i.old.call(this),i.queue&&fe.dequeue(this,i.queue)},i},fe.fn.extend({fadeTo:function(e,t,n,i){return this.filter(Be).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(e,t,n,i){var r=fe.isEmptyObject(e),o=fe.speed(t,n,i),a=function(){var t=W(this,fe.extend({},e),o);(r||Le.get(this,"finish"))&&t.stop(!0)};return a.finish=a,r||o.queue===!1?this.each(a):this.queue(o.queue,a)},stop:function(e,t,n){var i=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&e!==!1&&this.queue(e||"fx",[]),this.each(function(){var t=!0,r=null!=e&&e+"queueHooks",o=fe.timers,a=Le.get(this);
if(r)a[r]&&a[r].stop&&i(a[r]);else for(r in a)a[r]&&a[r].stop&&mt.test(r)&&i(a[r]);for(r=o.length;r--;)o[r].elem!==this||null!=e&&o[r].queue!==e||(o[r].anim.stop(n),t=!1,o.splice(r,1));!t&&n||fe.dequeue(this,e)})},finish:function(e){return e!==!1&&(e=e||"fx"),this.each(function(){var t,n=Le.get(this),i=n[e+"queue"],r=n[e+"queueHooks"],o=fe.timers,a=i?i.length:0;for(n.finish=!0,fe.queue(this,e,[]),r&&r.stop&&r.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<a;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete n.finish})}}),fe.each(["toggle","show","hide"],function(e,t){var n=fe.fn[t];fe.fn[t]=function(e,i,r){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate($(t,!0),e,i,r)}}),fe.each({slideDown:$("show"),slideUp:$("hide"),slideToggle:$("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){fe.fn[e]=function(e,n,i){return this.animate(t,e,n,i)}}),fe.timers=[],fe.fx.tick=function(){var e,t=0,n=fe.timers;for(ht=fe.now();t<n.length;t++)e=n[t],e()||n[t]!==e||n.splice(t--,1);n.length||fe.fx.stop(),ht=void 0},fe.fx.timer=function(e){fe.timers.push(e),e()?fe.fx.start():fe.timers.pop()},fe.fx.interval=13,fe.fx.start=function(){ft||(ft=e.requestAnimationFrame?e.requestAnimationFrame(F):e.setInterval(fe.fx.tick,fe.fx.interval))},fe.fx.stop=function(){e.cancelAnimationFrame?e.cancelAnimationFrame(ft):e.clearInterval(ft),ft=null},fe.fx.speeds={slow:600,fast:200,_default:400},fe.fn.delay=function(t,n){return t=fe.fx?fe.fx.speeds[t]||t:t,n=n||"fx",this.queue(n,function(n,i){var r=e.setTimeout(n,t);i.stop=function(){e.clearTimeout(r)}})},function(){var e=te.createElement("input"),t=te.createElement("select"),n=t.appendChild(te.createElement("option"));e.type="checkbox",pe.checkOn=""!==e.value,pe.optSelected=n.selected,e=te.createElement("input"),e.value="t",e.type="radio",pe.radioValue="t"===e.value}();var vt,yt=fe.expr.attrHandle;fe.fn.extend({attr:function(e,t){return Me(this,fe.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){fe.removeAttr(this,e)})}}),fe.extend({attr:function(e,t,n){var i,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return"undefined"==typeof e.getAttribute?fe.prop(e,t,n):(1===o&&fe.isXMLDoc(e)||(r=fe.attrHooks[t.toLowerCase()]||(fe.expr.match.bool.test(t)?vt:void 0)),void 0!==n?null===n?void fe.removeAttr(e,t):r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:(e.setAttribute(t,n+""),n):r&&"get"in r&&null!==(i=r.get(e,t))?i:(i=fe.find.attr(e,t),null==i?void 0:i))},attrHooks:{type:{set:function(e,t){if(!pe.radioValue&&"radio"===t&&fe.nodeName(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i=0,r=t&&t.match(De);if(r&&1===e.nodeType)for(;n=r[i++];)e.removeAttribute(n)}}),vt={set:function(e,t,n){return t===!1?fe.removeAttr(e,n):e.setAttribute(n,n),n}},fe.each(fe.expr.match.bool.source.match(/\w+/g),function(e,t){var n=yt[t]||fe.find.attr;yt[t]=function(e,t,i){var r,o,a=t.toLowerCase();return i||(o=yt[a],yt[a]=r,r=null!=n(e,t,i)?a:null,yt[a]=o),r}});var xt=/^(?:input|select|textarea|button)$/i,wt=/^(?:a|area)$/i;fe.fn.extend({prop:function(e,t){return Me(this,fe.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[fe.propFix[e]||e]})}}),fe.extend({prop:function(e,t,n){var i,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&fe.isXMLDoc(e)||(t=fe.propFix[t]||t,r=fe.propHooks[t]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:e[t]=n:r&&"get"in r&&null!==(i=r.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=fe.find.attr(e,"tabindex");return t?parseInt(t,10):xt.test(e.nodeName)||wt.test(e.nodeName)&&e.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),pe.optSelected||(fe.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),fe.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){fe.propFix[this.toLowerCase()]=this}),fe.fn.extend({addClass:function(e){var t,n,i,r,o,a,s,l=0;if(fe.isFunction(e))return this.each(function(t){fe(this).addClass(e.call(this,t,G(this)))});if("string"==typeof e&&e)for(t=e.match(De)||[];n=this[l++];)if(r=G(n),i=1===n.nodeType&&" "+U(r)+" "){for(a=0;o=t[a++];)i.indexOf(" "+o+" ")<0&&(i+=o+" ");s=U(i),r!==s&&n.setAttribute("class",s)}return this},removeClass:function(e){var t,n,i,r,o,a,s,l=0;if(fe.isFunction(e))return this.each(function(t){fe(this).removeClass(e.call(this,t,G(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof e&&e)for(t=e.match(De)||[];n=this[l++];)if(r=G(n),i=1===n.nodeType&&" "+U(r)+" "){for(a=0;o=t[a++];)for(;i.indexOf(" "+o+" ")>-1;)i=i.replace(" "+o+" "," ");s=U(i),r!==s&&n.setAttribute("class",s)}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):fe.isFunction(e)?this.each(function(n){fe(this).toggleClass(e.call(this,n,G(this),t),t)}):this.each(function(){var t,i,r,o;if("string"===n)for(i=0,r=fe(this),o=e.match(De)||[];t=o[i++];)r.hasClass(t)?r.removeClass(t):r.addClass(t);else void 0!==e&&"boolean"!==n||(t=G(this),t&&Le.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||e===!1?"":Le.get(this,"__className__")||""))})},hasClass:function(e){var t,n,i=0;for(t=" "+e+" ";n=this[i++];)if(1===n.nodeType&&(" "+U(G(n))+" ").indexOf(t)>-1)return!0;return!1}});var bt=/\r/g;fe.fn.extend({val:function(e){var t,n,i,r=this[0];{if(arguments.length)return i=fe.isFunction(e),this.each(function(n){var r;1===this.nodeType&&(r=i?e.call(this,n,fe(this).val()):e,null==r?r="":"number"==typeof r?r+="":fe.isArray(r)&&(r=fe.map(r,function(e){return null==e?"":e+""})),t=fe.valHooks[this.type]||fe.valHooks[this.nodeName.toLowerCase()],t&&"set"in t&&void 0!==t.set(this,r,"value")||(this.value=r))});if(r)return t=fe.valHooks[r.type]||fe.valHooks[r.nodeName.toLowerCase()],t&&"get"in t&&void 0!==(n=t.get(r,"value"))?n:(n=r.value,"string"==typeof n?n.replace(bt,""):null==n?"":n)}}}),fe.extend({valHooks:{option:{get:function(e){var t=fe.find.attr(e,"value");return null!=t?t:U(fe.text(e))}},select:{get:function(e){var t,n,i,r=e.options,o=e.selectedIndex,a="select-one"===e.type,s=a?null:[],l=a?o+1:r.length;for(i=o<0?l:a?o:0;i<l;i++)if(n=r[i],(n.selected||i===o)&&!n.disabled&&(!n.parentNode.disabled||!fe.nodeName(n.parentNode,"optgroup"))){if(t=fe(n).val(),a)return t;s.push(t)}return s},set:function(e,t){for(var n,i,r=e.options,o=fe.makeArray(t),a=r.length;a--;)i=r[a],(i.selected=fe.inArray(fe.valHooks.option.get(i),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),fe.each(["radio","checkbox"],function(){fe.valHooks[this]={set:function(e,t){if(fe.isArray(t))return e.checked=fe.inArray(fe(e).val(),t)>-1}},pe.checkOn||(fe.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var kt=/^(?:focusinfocus|focusoutblur)$/;fe.extend(fe.event,{trigger:function(t,n,i,r){var o,a,s,l,c,u,d,p=[i||te],h=ce.call(t,"type")?t.type:t,f=ce.call(t,"namespace")?t.namespace.split("."):[];if(a=s=i=i||te,3!==i.nodeType&&8!==i.nodeType&&!kt.test(h+fe.event.triggered)&&(h.indexOf(".")>-1&&(f=h.split("."),h=f.shift(),f.sort()),c=h.indexOf(":")<0&&"on"+h,t=t[fe.expando]?t:new fe.Event(h,"object"==typeof t&&t),t.isTrigger=r?2:3,t.namespace=f.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=i),n=null==n?[t]:fe.makeArray(n,[t]),d=fe.event.special[h]||{},r||!d.trigger||d.trigger.apply(i,n)!==!1)){if(!r&&!d.noBubble&&!fe.isWindow(i)){for(l=d.delegateType||h,kt.test(l+h)||(a=a.parentNode);a;a=a.parentNode)p.push(a),s=a;s===(i.ownerDocument||te)&&p.push(s.defaultView||s.parentWindow||e)}for(o=0;(a=p[o++])&&!t.isPropagationStopped();)t.type=o>1?l:d.bindType||h,u=(Le.get(a,"events")||{})[t.type]&&Le.get(a,"handle"),u&&u.apply(a,n),u=c&&a[c],u&&u.apply&&Re(a)&&(t.result=u.apply(a,n),t.result===!1&&t.preventDefault());return t.type=h,r||t.isDefaultPrevented()||d._default&&d._default.apply(p.pop(),n)!==!1||!Re(i)||c&&fe.isFunction(i[h])&&!fe.isWindow(i)&&(s=i[c],s&&(i[c]=null),fe.event.triggered=h,i[h](),fe.event.triggered=void 0,s&&(i[c]=s)),t.result}},simulate:function(e,t,n){var i=fe.extend(new fe.Event,n,{type:e,isSimulated:!0});fe.event.trigger(i,null,t)}}),fe.fn.extend({trigger:function(e,t){return this.each(function(){fe.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return fe.event.trigger(e,t,n,!0)}}),fe.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){fe.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),fe.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),pe.focusin="onfocusin"in e,pe.focusin||fe.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){fe.event.simulate(t,e.target,fe.event.fix(e))};fe.event.special[t]={setup:function(){var i=this.ownerDocument||this,r=Le.access(i,t);r||i.addEventListener(e,n,!0),Le.access(i,t,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this,r=Le.access(i,t)-1;r?Le.access(i,t,r):(i.removeEventListener(e,n,!0),Le.remove(i,t))}}});var Ct=e.location,_t=fe.now(),St=/\?/;fe.parseXML=function(t){var n;if(!t||"string"!=typeof t)return null;try{n=(new e.DOMParser).parseFromString(t,"text/xml")}catch(i){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||fe.error("Invalid XML: "+t),n};var Tt=/\[\]$/,Et=/\r?\n/g,Pt=/^(?:submit|button|image|reset|file)$/i,At=/^(?:input|select|textarea|keygen)/i;fe.param=function(e,t){var n,i=[],r=function(e,t){var n=fe.isFunction(t)?t():t;i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(fe.isArray(e)||e.jquery&&!fe.isPlainObject(e))fe.each(e,function(){r(this.name,this.value)});else for(n in e)V(n,e[n],t,r);return i.join("&")},fe.fn.extend({serialize:function(){return fe.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=fe.prop(this,"elements");return e?fe.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!fe(this).is(":disabled")&&At.test(this.nodeName)&&!Pt.test(e)&&(this.checked||!Ue.test(e))}).map(function(e,t){var n=fe(this).val();return null==n?null:fe.isArray(n)?fe.map(n,function(e){return{name:t.name,value:e.replace(Et,"\r\n")}}):{name:t.name,value:n.replace(Et,"\r\n")}}).get()}});var Dt=/%20/g,Ot=/#.*$/,jt=/([?&])_=[^&]*/,Mt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Rt=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Lt=/^(?:GET|HEAD)$/,It=/^\/\//,Nt={},Ft={},Ht="*/".concat("*"),$t=te.createElement("a");$t.href=Ct.href,fe.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ct.href,type:"GET",isLocal:Rt.test(Ct.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ht,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":fe.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?X(X(e,fe.ajaxSettings),t):X(fe.ajaxSettings,e)},ajaxPrefilter:K(Nt),ajaxTransport:K(Ft),ajax:function(t,n){function i(t,n,i,s){var c,p,h,w,b,k=n;u||(u=!0,l&&e.clearTimeout(l),r=void 0,a=s||"",C.readyState=t>0?4:0,c=t>=200&&t<300||304===t,i&&(w=Y(f,C,i)),w=Z(f,w,C,c),c?(f.ifModified&&(b=C.getResponseHeader("Last-Modified"),b&&(fe.lastModified[o]=b),b=C.getResponseHeader("etag"),b&&(fe.etag[o]=b)),204===t||"HEAD"===f.type?k="nocontent":304===t?k="notmodified":(k=w.state,p=w.data,h=w.error,c=!h)):(h=k,!t&&k||(k="error",t<0&&(t=0))),C.status=t,C.statusText=(n||k)+"",c?v.resolveWith(g,[p,k,C]):v.rejectWith(g,[C,k,h]),C.statusCode(x),x=void 0,d&&m.trigger(c?"ajaxSuccess":"ajaxError",[C,f,c?p:h]),y.fireWith(g,[C,k]),d&&(m.trigger("ajaxComplete",[C,f]),--fe.active||fe.event.trigger("ajaxStop")))}"object"==typeof t&&(n=t,t=void 0),n=n||{};var r,o,a,s,l,c,u,d,p,h,f=fe.ajaxSetup({},n),g=f.context||f,m=f.context&&(g.nodeType||g.jquery)?fe(g):fe.event,v=fe.Deferred(),y=fe.Callbacks("once memory"),x=f.statusCode||{},w={},b={},k="canceled",C={readyState:0,getResponseHeader:function(e){var t;if(u){if(!s)for(s={};t=Mt.exec(a);)s[t[1].toLowerCase()]=t[2];t=s[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return u?a:null},setRequestHeader:function(e,t){return null==u&&(e=b[e.toLowerCase()]=b[e.toLowerCase()]||e,w[e]=t),this},overrideMimeType:function(e){return null==u&&(f.mimeType=e),this},statusCode:function(e){var t;if(e)if(u)C.always(e[C.status]);else for(t in e)x[t]=[x[t],e[t]];return this},abort:function(e){var t=e||k;return r&&r.abort(t),i(0,t),this}};if(v.promise(C),f.url=((t||f.url||Ct.href)+"").replace(It,Ct.protocol+"//"),f.type=n.method||n.type||f.method||f.type,f.dataTypes=(f.dataType||"*").toLowerCase().match(De)||[""],null==f.crossDomain){c=te.createElement("a");try{c.href=f.url,c.href=c.href,f.crossDomain=$t.protocol+"//"+$t.host!=c.protocol+"//"+c.host}catch(_){f.crossDomain=!0}}if(f.data&&f.processData&&"string"!=typeof f.data&&(f.data=fe.param(f.data,f.traditional)),Q(Nt,f,n,C),u)return C;d=fe.event&&f.global,d&&0===fe.active++&&fe.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!Lt.test(f.type),o=f.url.replace(Ot,""),f.hasContent?f.data&&f.processData&&0===(f.contentType||"").indexOf("application/x-www-form-urlencoded")&&(f.data=f.data.replace(Dt,"+")):(h=f.url.slice(o.length),f.data&&(o+=(St.test(o)?"&":"?")+f.data,delete f.data),f.cache===!1&&(o=o.replace(jt,"$1"),h=(St.test(o)?"&":"?")+"_="+_t++ +h),f.url=o+h),f.ifModified&&(fe.lastModified[o]&&C.setRequestHeader("If-Modified-Since",fe.lastModified[o]),fe.etag[o]&&C.setRequestHeader("If-None-Match",fe.etag[o])),(f.data&&f.hasContent&&f.contentType!==!1||n.contentType)&&C.setRequestHeader("Content-Type",f.contentType),C.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+Ht+"; q=0.01":""):f.accepts["*"]);for(p in f.headers)C.setRequestHeader(p,f.headers[p]);if(f.beforeSend&&(f.beforeSend.call(g,C,f)===!1||u))return C.abort();if(k="abort",y.add(f.complete),C.done(f.success),C.fail(f.error),r=Q(Ft,f,n,C)){if(C.readyState=1,d&&m.trigger("ajaxSend",[C,f]),u)return C;f.async&&f.timeout>0&&(l=e.setTimeout(function(){C.abort("timeout")},f.timeout));try{u=!1,r.send(w,i)}catch(_){if(u)throw _;i(-1,_)}}else i(-1,"No Transport");return C},getJSON:function(e,t,n){return fe.get(e,t,n,"json")},getScript:function(e,t){return fe.get(e,void 0,t,"script")}}),fe.each(["get","post"],function(e,t){fe[t]=function(e,n,i,r){return fe.isFunction(n)&&(r=r||i,i=n,n=void 0),fe.ajax(fe.extend({url:e,type:t,dataType:r,data:n,success:i},fe.isPlainObject(e)&&e))}}),fe._evalUrl=function(e){return fe.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,"throws":!0})},fe.fn.extend({wrapAll:function(e){var t;return this[0]&&(fe.isFunction(e)&&(e=e.call(this[0])),t=fe(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return fe.isFunction(e)?this.each(function(t){fe(this).wrapInner(e.call(this,t))}):this.each(function(){var t=fe(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=fe.isFunction(e);return this.each(function(n){fe(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){fe(this).replaceWith(this.childNodes)}),this}}),fe.expr.pseudos.hidden=function(e){return!fe.expr.pseudos.visible(e)},fe.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},fe.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(t){}};var zt={0:200,1223:204},Bt=fe.ajaxSettings.xhr();pe.cors=!!Bt&&"withCredentials"in Bt,pe.ajax=Bt=!!Bt,fe.ajaxTransport(function(t){var n,i;if(pe.cors||Bt&&!t.crossDomain)return{send:function(r,o){var a,s=t.xhr();if(s.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(a in t.xhrFields)s[a]=t.xhrFields[a];t.mimeType&&s.overrideMimeType&&s.overrideMimeType(t.mimeType),t.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest");for(a in r)s.setRequestHeader(a,r[a]);n=function(e){return function(){n&&(n=i=s.onload=s.onerror=s.onabort=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?o(0,"error"):o(s.status,s.statusText):o(zt[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=n(),i=s.onerror=n("error"),void 0!==s.onabort?s.onabort=i:s.onreadystatechange=function(){4===s.readyState&&e.setTimeout(function(){n&&i()})},n=n("abort");try{s.send(t.hasContent&&t.data||null)}catch(l){if(n)throw l}},abort:function(){n&&n()}}}),fe.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),fe.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return fe.globalEval(e),e}}}),fe.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),fe.ajaxTransport("script",function(e){if(e.crossDomain){var t,n;return{send:function(i,r){t=fe("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&r("error"===e.type?404:200,e.type)}),te.head.appendChild(t[0])},abort:function(){n&&n()}}}});var qt=[],Wt=/(=)\?(?=&|$)|\?\?/;fe.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=qt.pop()||fe.expando+"_"+_t++;return this[e]=!0,e}}),fe.ajaxPrefilter("json jsonp",function(t,n,i){var r,o,a,s=t.jsonp!==!1&&(Wt.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Wt.test(t.data)&&"data");if(s||"jsonp"===t.dataTypes[0])return r=t.jsonpCallback=fe.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,s?t[s]=t[s].replace(Wt,"$1"+r):t.jsonp!==!1&&(t.url+=(St.test(t.url)?"&":"?")+t.jsonp+"="+r),t.converters["script json"]=function(){return a||fe.error(r+" was not called"),a[0]},t.dataTypes[0]="json",o=e[r],e[r]=function(){a=arguments},i.always(function(){void 0===o?fe(e).removeProp(r):e[r]=o,t[r]&&(t.jsonpCallback=n.jsonpCallback,qt.push(r)),a&&fe.isFunction(o)&&o(a[0]),a=o=void 0}),"script"}),pe.createHTMLDocument=function(){var e=te.implementation.createHTMLDocument("").body;return e.innerHTML="<form></form><form></form>",2===e.childNodes.length}(),fe.parseHTML=function(e,t,n){if("string"!=typeof e)return[];"boolean"==typeof t&&(n=t,t=!1);var i,r,o;return t||(pe.createHTMLDocument?(t=te.implementation.createHTMLDocument(""),i=t.createElement("base"),i.href=te.location.href,t.head.appendChild(i)):t=te),r=Ce.exec(e),o=!n&&[],r?[t.createElement(r[1])]:(r=x([e],t,o),o&&o.length&&fe(o).remove(),fe.merge([],r.childNodes))},fe.fn.load=function(e,t,n){var i,r,o,a=this,s=e.indexOf(" ");return s>-1&&(i=U(e.slice(s)),e=e.slice(0,s)),fe.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(r="POST"),a.length>0&&fe.ajax({url:e,type:r||"GET",dataType:"html",data:t}).done(function(e){o=arguments,a.html(i?fe("<div>").append(fe.parseHTML(e)).find(i):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},fe.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){fe.fn[t]=function(e){return this.on(t,e)}}),fe.expr.pseudos.animated=function(e){return fe.grep(fe.timers,function(t){return e===t.elem}).length},fe.offset={setOffset:function(e,t,n){var i,r,o,a,s,l,c,u=fe.css(e,"position"),d=fe(e),p={};"static"===u&&(e.style.position="relative"),s=d.offset(),o=fe.css(e,"top"),l=fe.css(e,"left"),c=("absolute"===u||"fixed"===u)&&(o+l).indexOf("auto")>-1,c?(i=d.position(),a=i.top,r=i.left):(a=parseFloat(o)||0,r=parseFloat(l)||0),fe.isFunction(t)&&(t=t.call(e,n,fe.extend({},s))),null!=t.top&&(p.top=t.top-s.top+a),null!=t.left&&(p.left=t.left-s.left+r),"using"in t?t.using.call(e,p):d.css(p)}},fe.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){fe.offset.setOffset(this,e,t)});var t,n,i,r,o=this[0];if(o)return o.getClientRects().length?(i=o.getBoundingClientRect(),i.width||i.height?(r=o.ownerDocument,n=J(r),t=r.documentElement,{top:i.top+n.pageYOffset-t.clientTop,left:i.left+n.pageXOffset-t.clientLeft}):i):{top:0,left:0}},position:function(){if(this[0]){var e,t,n=this[0],i={top:0,left:0};return"fixed"===fe.css(n,"position")?t=n.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),fe.nodeName(e[0],"html")||(i=e.offset()),i={top:i.top+fe.css(e[0],"borderTopWidth",!0),left:i.left+fe.css(e[0],"borderLeftWidth",!0)}),{top:t.top-i.top-fe.css(n,"marginTop",!0),left:t.left-i.left-fe.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===fe.css(e,"position");)e=e.offsetParent;return e||Xe})}}),fe.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;fe.fn[e]=function(i){return Me(this,function(e,i,r){var o=J(e);return void 0===r?o?o[t]:e[i]:void(o?o.scrollTo(n?o.pageXOffset:r,n?r:o.pageYOffset):e[i]=r)},e,i,arguments.length)}}),fe.each(["top","left"],function(e,t){fe.cssHooks[t]=j(pe.pixelPosition,function(e,n){if(n)return n=O(e,t),at.test(n)?fe(e).position()[t]+"px":n})}),fe.each({Height:"height",Width:"width"},function(e,t){fe.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,i){fe.fn[i]=function(r,o){var a=arguments.length&&(n||"boolean"!=typeof r),s=n||(r===!0||o===!0?"margin":"border");return Me(this,function(t,n,r){var o;return fe.isWindow(t)?0===i.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===r?fe.css(t,n,s):fe.style(t,n,r,s)},t,a?r:void 0,a)}})}),fe.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),fe.parseJSON=JSON.parse,"function"==typeof define&&define.amd&&define("jquery",[],function(){return fe});var Ut=e.jQuery,Gt=e.$;return fe.noConflict=function(t){return e.$===fe&&(e.$=Gt),t&&e.jQuery===fe&&(e.jQuery=Ut),fe},t||(e.jQuery=e.$=fe),fe}),!function(e,t,n,i){function r(t,n){this.settings=null,this.options=e.extend({},r.Defaults,n),this.$element=e(t),this._handlers={},this._plugins={},this._supress={},this._current=null,this._speed=null,this._coordinates=[],this._breakpoint=null,this._width=null,this._items=[],this._clones=[],this._mergers=[],this._widths=[],this._invalidated={},this._pipe=[],this._drag={time:null,target:null,pointer:null,stage:{start:null,current:null},direction:null},this._states={current:{},tags:{initializing:["busy"],animating:["busy"],dragging:["interacting"]}},e.each(["onResize","onThrottledResize"],e.proxy(function(t,n){this._handlers[n]=e.proxy(this[n],this)},this)),e.each(r.Plugins,e.proxy(function(e,t){this._plugins[e.charAt(0).toLowerCase()+e.slice(1)]=new t(this)},this)),e.each(r.Workers,e.proxy(function(t,n){this._pipe.push({filter:n.filter,run:e.proxy(n.run,this)})},this)),this.setup(),this.initialize()}r.Defaults={items:3,loop:!1,center:!1,rewind:!1,mouseDrag:!0,touchDrag:!0,pullDrag:!0,freeDrag:!1,margin:0,stagePadding:0,merge:!1,mergeFit:!0,autoWidth:!1,startPosition:0,rtl:!1,smartSpeed:250,fluidSpeed:!1,dragEndSpeed:!1,responsive:{},responsiveRefreshRate:200,responsiveBaseElement:t,fallbackEasing:"swing",info:!1,nestedItemSelector:!1,itemElement:"div",stageElement:"div",refreshClass:"owl-refresh",loadedClass:"owl-loaded",loadingClass:"owl-loading",rtlClass:"owl-rtl",responsiveClass:"owl-responsive",dragClass:"owl-drag",itemClass:"owl-item",stageClass:"owl-stage",stageOuterClass:"owl-stage-outer",grabClass:"owl-grab"},r.Width={Default:"default",Inner:"inner",Outer:"outer"},r.Type={Event:"event",State:"state"},r.Plugins={},r.Workers=[{filter:["width","settings"],run:function(){this._width=this.$element.width()}},{filter:["width","items","settings"],run:function(e){e.current=this._items&&this._items[this.relative(this._current)]}},{filter:["items","settings"],run:function(){this.$stage.children(".cloned").remove()}},{filter:["width","items","settings"],run:function(e){var t=this.settings.margin||"",n=!this.settings.autoWidth,i=this.settings.rtl,r={width:"auto","margin-left":i?t:"","margin-right":i?"":t};!n&&this.$stage.children().css(r),e.css=r}},{filter:["width","items","settings"],run:function(e){var t=(this.width()/this.settings.items).toFixed(3)-this.settings.margin,n=null,i=this._items.length,r=!this.settings.autoWidth,o=[];for(e.items={merge:!1,width:t};i--;)n=this._mergers[i],n=this.settings.mergeFit&&Math.min(n,this.settings.items)||n,e.items.merge=n>1||e.items.merge,o[i]=r?t*n:this._items[i].width();this._widths=o}},{filter:["items","settings"],run:function(){var t=[],n=this._items,i=this.settings,r=Math.max(2*i.items,4),o=2*Math.ceil(n.length/2),a=i.loop&&n.length?i.rewind?r:Math.max(r,o):0,s="",l="";for(a/=2;a--;)t.push(this.normalize(t.length/2,!0)),s+=n[t[t.length-1]][0].outerHTML,t.push(this.normalize(n.length-1-(t.length-1)/2,!0)),l=n[t[t.length-1]][0].outerHTML+l;this._clones=t,e(s).addClass("cloned").appendTo(this.$stage),e(l).addClass("cloned").prependTo(this.$stage)}},{filter:["width","items","settings"],run:function(){for(var e=this.settings.rtl?1:-1,t=this._clones.length+this._items.length,n=-1,i=0,r=0,o=[];++n<t;)i=o[n-1]||0,r=this._widths[this.relative(n)]+this.settings.margin,o.push(i+r*e);this._coordinates=o}},{filter:["width","items","settings"],run:function(){var e=this.settings.stagePadding,t=this._coordinates,n={width:Math.ceil(Math.abs(t[t.length-1]))+2*e,"padding-left":e||"","padding-right":e||""};this.$stage.css(n)}},{filter:["width","items","settings"],run:function(e){var t=this._coordinates.length,n=!this.settings.autoWidth,i=this.$stage.children();if(n&&e.items.merge)for(;t--;)e.css.width=this._widths[this.relative(t)],i.eq(t).css(e.css);else n&&(e.css.width=e.items.width,i.css(e.css))}},{filter:["items"],run:function(){this._coordinates.length<1&&this.$stage.removeAttr("style")}},{filter:["width","items","settings"],run:function(e){e.current=e.current?this.$stage.children().index(e.current):0,e.current=Math.max(this.minimum(),Math.min(this.maximum(),e.current)),this.reset(e.current)}},{filter:["position"],run:function(){this.animate(this.coordinates(this._current))}},{filter:["width","position","items","settings"],run:function(){var e,t,n,i,r=this.settings.rtl?1:-1,o=2*this.settings.stagePadding,a=this.coordinates(this.current())+o,s=a+this.width()*r,l=[];for(n=0,i=this._coordinates.length;i>n;n++)e=this._coordinates[n-1]||0,t=Math.abs(this._coordinates[n])+o*r,(this.op(e,"<=",a)&&this.op(e,">",s)||this.op(t,"<",a)&&this.op(t,">",s))&&l.push(n);this.$stage.children(".active").removeClass("active"),this.$stage.children(":eq("+l.join("), :eq(")+")").addClass("active"),this.settings.center&&(this.$stage.children(".center").removeClass("center"),this.$stage.children().eq(this.current()).addClass("center"))}}],r.prototype.initialize=function(){if(this.enter("initializing"),this.trigger("initialize"),this.$element.toggleClass(this.settings.rtlClass,this.settings.rtl),this.settings.autoWidth&&!this.is("pre-loading")){var t,n,r;t=this.$element.find("img"),n=this.settings.nestedItemSelector?"."+this.settings.nestedItemSelector:i,r=this.$element.children(n).width(),t.length&&0>=r&&this.preloadAutoWidthImages(t)}this.$element.addClass(this.options.loadingClass),this.$stage=e("<"+this.settings.stageElement+' class="'+this.settings.stageClass+'"/>').wrap('<div class="'+this.settings.stageOuterClass+'"/>'),this.$element.append(this.$stage.parent()),this.replace(this.$element.children().not(this.$stage.parent())),this.$element.is(":visible")?this.refresh():this.invalidate("width"),this.$element.removeClass(this.options.loadingClass).addClass(this.options.loadedClass),this.registerEventHandlers(),this.leave("initializing"),this.trigger("initialized")},r.prototype.setup=function(){var t=this.viewport(),n=this.options.responsive,i=-1,r=null;n?(e.each(n,function(e){t>=e&&e>i&&(i=Number(e))}),r=e.extend({},this.options,n[i]),"function"==typeof r.stagePadding&&(r.stagePadding=r.stagePadding()),delete r.responsive,r.responsiveClass&&this.$element.attr("class",this.$element.attr("class").replace(new RegExp("("+this.options.responsiveClass+"-)\\S+\\s","g"),"$1"+i))):r=e.extend({},this.options),this.trigger("change",{property:{name:"settings",value:r}}),this._breakpoint=i,this.settings=r,this.invalidate("settings"),this.trigger("changed",{property:{name:"settings",value:this.settings}})},r.prototype.optionsLogic=function(){this.settings.autoWidth&&(this.settings.stagePadding=!1,this.settings.merge=!1)},r.prototype.prepare=function(t){var n=this.trigger("prepare",{content:t});return n.data||(n.data=e("<"+this.settings.itemElement+"/>").addClass(this.options.itemClass).append(t)),this.trigger("prepared",{content:n.data}),n.data},r.prototype.update=function(){for(var t=0,n=this._pipe.length,i=e.proxy(function(e){return this[e]},this._invalidated),r={};n>t;)(this._invalidated.all||e.grep(this._pipe[t].filter,i).length>0)&&this._pipe[t].run(r),t++;this._invalidated={},!this.is("valid")&&this.enter("valid")},r.prototype.width=function(e){switch(e=e||r.Width.Default){case r.Width.Inner:case r.Width.Outer:return this._width;default:return this._width-2*this.settings.stagePadding+this.settings.margin}},r.prototype.refresh=function(){this.enter("refreshing"),this.trigger("refresh"),this.setup(),this.optionsLogic(),this.$element.addClass(this.options.refreshClass),this.update(),this.$element.removeClass(this.options.refreshClass),this.leave("refreshing"),this.trigger("refreshed")},r.prototype.onThrottledResize=function(){t.clearTimeout(this.resizeTimer),this.resizeTimer=t.setTimeout(this._handlers.onResize,this.settings.responsiveRefreshRate)},r.prototype.onResize=function(){return!!this._items.length&&(this._width!==this.$element.width()&&(!!this.$element.is(":visible")&&(this.enter("resizing"),this.trigger("resize").isDefaultPrevented()?(this.leave("resizing"),!1):(this.invalidate("width"),this.refresh(),this.leave("resizing"),void this.trigger("resized")))))},r.prototype.registerEventHandlers=function(){e.support.transition&&this.$stage.on(e.support.transition.end+".owl.core",e.proxy(this.onTransitionEnd,this)),this.settings.responsive!==!1&&this.on(t,"resize",this._handlers.onThrottledResize),this.settings.mouseDrag&&(this.$element.addClass(this.options.dragClass),this.$stage.on("mousedown.owl.core",e.proxy(this.onDragStart,this)),this.$stage.on("dragstart.owl.core selectstart.owl.core",function(){return!1})),this.settings.touchDrag&&(this.$stage.on("touchstart.owl.core",e.proxy(this.onDragStart,this)),this.$stage.on("touchcancel.owl.core",e.proxy(this.onDragEnd,this)))},r.prototype.onDragStart=function(t){var i=null;3!==t.which&&(e.support.transform?(i=this.$stage.css("transform").replace(/.*\(|\)| /g,"").split(","),i={x:i[16===i.length?12:4],y:i[16===i.length?13:5]
}):(i=this.$stage.position(),i={x:this.settings.rtl?i.left+this.$stage.width()-this.width()+this.settings.margin:i.left,y:i.top}),this.is("animating")&&(e.support.transform?this.animate(i.x):this.$stage.stop(),this.invalidate("position")),this.$element.toggleClass(this.options.grabClass,"mousedown"===t.type),this.speed(0),this._drag.time=(new Date).getTime(),this._drag.target=e(t.target),this._drag.stage.start=i,this._drag.stage.current=i,this._drag.pointer=this.pointer(t),e(n).on("mouseup.owl.core touchend.owl.core",e.proxy(this.onDragEnd,this)),e(n).one("mousemove.owl.core touchmove.owl.core",e.proxy(function(t){var i=this.difference(this._drag.pointer,this.pointer(t));e(n).on("mousemove.owl.core touchmove.owl.core",e.proxy(this.onDragMove,this)),Math.abs(i.x)<Math.abs(i.y)&&this.is("valid")||(t.preventDefault(),this.enter("dragging"),this.trigger("drag"))},this)))},r.prototype.onDragMove=function(e){var t=null,n=null,i=null,r=this.difference(this._drag.pointer,this.pointer(e)),o=this.difference(this._drag.stage.start,r);this.is("dragging")&&(e.preventDefault(),this.settings.loop?(t=this.coordinates(this.minimum()),n=this.coordinates(this.maximum()+1)-t,o.x=((o.x-t)%n+n)%n+t):(t=this.settings.rtl?this.coordinates(this.maximum()):this.coordinates(this.minimum()),n=this.settings.rtl?this.coordinates(this.minimum()):this.coordinates(this.maximum()),i=this.settings.pullDrag?-1*r.x/5:0,o.x=Math.max(Math.min(o.x,t+i),n+i)),this._drag.stage.current=o,this.animate(o.x))},r.prototype.onDragEnd=function(t){var i=this.difference(this._drag.pointer,this.pointer(t)),r=this._drag.stage.current,o=i.x>0^this.settings.rtl?"left":"right";e(n).off(".owl.core"),this.$element.removeClass(this.options.grabClass),(0!==i.x&&this.is("dragging")||!this.is("valid"))&&(this.speed(this.settings.dragEndSpeed||this.settings.smartSpeed),this.current(this.closest(r.x,0!==i.x?o:this._drag.direction)),this.invalidate("position"),this.update(),this._drag.direction=o,(Math.abs(i.x)>3||(new Date).getTime()-this._drag.time>300)&&this._drag.target.one("click.owl.core",function(){return!1})),this.is("dragging")&&(this.leave("dragging"),this.trigger("dragged"))},r.prototype.closest=function(t,n){var i=-1,r=30,o=this.width(),a=this.coordinates();return this.settings.freeDrag||e.each(a,e.proxy(function(e,s){return"left"===n&&t>s-r&&s+r>t?i=e:"right"===n&&t>s-o-r&&s-o+r>t?i=e+1:this.op(t,"<",s)&&this.op(t,">",a[e+1]||s-o)&&(i="left"===n?e+1:e),-1===i},this)),this.settings.loop||(this.op(t,">",a[this.minimum()])?i=t=this.minimum():this.op(t,"<",a[this.maximum()])&&(i=t=this.maximum())),i},r.prototype.animate=function(t){var n=this.speed()>0;this.is("animating")&&this.onTransitionEnd(),n&&(this.enter("animating"),this.trigger("translate")),e.support.transform3d&&e.support.transition?this.$stage.css({transform:"translate3d("+t+"px,0px,0px)",transition:this.speed()/1e3+"s"}):n?this.$stage.animate({left:t+"px"},this.speed(),this.settings.fallbackEasing,e.proxy(this.onTransitionEnd,this)):this.$stage.css({left:t+"px"})},r.prototype.is=function(e){return this._states.current[e]&&this._states.current[e]>0},r.prototype.current=function(e){if(e===i)return this._current;if(0===this._items.length)return i;if(e=this.normalize(e),this._current!==e){var t=this.trigger("change",{property:{name:"position",value:e}});t.data!==i&&(e=this.normalize(t.data)),this._current=e,this.invalidate("position"),this.trigger("changed",{property:{name:"position",value:this._current}})}return this._current},r.prototype.invalidate=function(t){return"string"===e.type(t)&&(this._invalidated[t]=!0,this.is("valid")&&this.leave("valid")),e.map(this._invalidated,function(e,t){return t})},r.prototype.reset=function(e){e=this.normalize(e),e!==i&&(this._speed=0,this._current=e,this.suppress(["translate","translated"]),this.animate(this.coordinates(e)),this.release(["translate","translated"]))},r.prototype.normalize=function(e,t){var n=this._items.length,r=t?0:this._clones.length;return!this.isNumeric(e)||1>n?e=i:(0>e||e>=n+r)&&(e=((e-r/2)%n+n)%n+r/2),e},r.prototype.relative=function(e){return e-=this._clones.length/2,this.normalize(e,!0)},r.prototype.maximum=function(e){var t,n,i,r=this.settings,o=this._coordinates.length;if(r.loop)o=this._clones.length/2+this._items.length-1;else if(r.autoWidth||r.merge){for(t=this._items.length,n=this._items[--t].width(),i=this.$element.width();t--&&(n+=this._items[t].width()+this.settings.margin,!(n>i)););o=t+1}else o=r.center?this._items.length-1:this._items.length-r.items;return e&&(o-=this._clones.length/2),Math.max(o,0)},r.prototype.minimum=function(e){return e?0:this._clones.length/2},r.prototype.items=function(e){return e===i?this._items.slice():(e=this.normalize(e,!0),this._items[e])},r.prototype.mergers=function(e){return e===i?this._mergers.slice():(e=this.normalize(e,!0),this._mergers[e])},r.prototype.clones=function(t){var n=this._clones.length/2,r=n+this._items.length,o=function(e){return e%2===0?r+e/2:n-(e+1)/2};return t===i?e.map(this._clones,function(e,t){return o(t)}):e.map(this._clones,function(e,n){return e===t?o(n):null})},r.prototype.speed=function(e){return e!==i&&(this._speed=e),this._speed},r.prototype.coordinates=function(t){var n,r=1,o=t-1;return t===i?e.map(this._coordinates,e.proxy(function(e,t){return this.coordinates(t)},this)):(this.settings.center?(this.settings.rtl&&(r=-1,o=t+1),n=this._coordinates[t],n+=(this.width()-n+(this._coordinates[o]||0))/2*r):n=this._coordinates[o]||0,n=Math.ceil(n))},r.prototype.duration=function(e,t,n){return 0===n?0:Math.min(Math.max(Math.abs(t-e),1),6)*Math.abs(n||this.settings.smartSpeed)},r.prototype.to=function(e,t){var n=this.current(),i=null,r=e-this.relative(n),o=(r>0)-(0>r),a=this._items.length,s=this.minimum(),l=this.maximum();this.settings.loop?(!this.settings.rewind&&Math.abs(r)>a/2&&(r+=-1*o*a),e=n+r,i=((e-s)%a+a)%a+s,i!==e&&l>=i-r&&i-r>0&&(n=i-r,e=i,this.reset(n))):this.settings.rewind?(l+=1,e=(e%l+l)%l):e=Math.max(s,Math.min(l,e)),this.speed(this.duration(n,e,t)),this.current(e),this.$element.is(":visible")&&this.update()},r.prototype.next=function(e){e=e||!1,this.to(this.relative(this.current())+1,e)},r.prototype.prev=function(e){e=e||!1,this.to(this.relative(this.current())-1,e)},r.prototype.onTransitionEnd=function(e){return(e===i||(e.stopPropagation(),(e.target||e.srcElement||e.originalTarget)===this.$stage.get(0)))&&(this.leave("animating"),void this.trigger("translated"))},r.prototype.viewport=function(){var i;if(this.options.responsiveBaseElement!==t)i=e(this.options.responsiveBaseElement).width();else if(t.innerWidth)i=t.innerWidth;else{if(!n.documentElement||!n.documentElement.clientWidth)throw"Can not detect viewport width.";i=n.documentElement.clientWidth}return i},r.prototype.replace=function(t){this.$stage.empty(),this._items=[],t&&(t=t instanceof jQuery?t:e(t)),this.settings.nestedItemSelector&&(t=t.find("."+this.settings.nestedItemSelector)),t.filter(function(){return 1===this.nodeType}).each(e.proxy(function(e,t){t=this.prepare(t),this.$stage.append(t),this._items.push(t),this._mergers.push(1*t.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)},this)),this.reset(this.isNumeric(this.settings.startPosition)?this.settings.startPosition:0),this.invalidate("items")},r.prototype.add=function(t,n){var r=this.relative(this._current);n=n===i?this._items.length:this.normalize(n,!0),t=t instanceof jQuery?t:e(t),this.trigger("add",{content:t,position:n}),t=this.prepare(t),0===this._items.length||n===this._items.length?(0===this._items.length&&this.$stage.append(t),0!==this._items.length&&this._items[n-1].after(t),this._items.push(t),this._mergers.push(1*t.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)):(this._items[n].before(t),this._items.splice(n,0,t),this._mergers.splice(n,0,1*t.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)),this._items[r]&&this.reset(this._items[r].index()),this.invalidate("items"),this.trigger("added",{content:t,position:n})},r.prototype.remove=function(e){e=this.normalize(e,!0),e!==i&&(this.trigger("remove",{content:this._items[e],position:e}),this._items[e].remove(),this._items.splice(e,1),this._mergers.splice(e,1),this.invalidate("items"),this.trigger("removed",{content:null,position:e}))},r.prototype.preloadAutoWidthImages=function(t){t.each(e.proxy(function(t,n){this.enter("pre-loading"),n=e(n),e(new Image).one("load",e.proxy(function(e){n.attr("src",e.target.src),n.css("opacity",1),this.leave("pre-loading"),!this.is("pre-loading")&&!this.is("initializing")&&this.refresh()},this)).attr("src",n.attr("src")||n.attr("data-src")||n.attr("data-src-retina"))},this))},r.prototype.destroy=function(){this.$element.off(".owl.core"),this.$stage.off(".owl.core"),e(n).off(".owl.core"),this.settings.responsive!==!1&&(t.clearTimeout(this.resizeTimer),this.off(t,"resize",this._handlers.onThrottledResize));for(var i in this._plugins)this._plugins[i].destroy();this.$stage.children(".cloned").remove(),this.$stage.unwrap(),this.$stage.children().contents().unwrap(),this.$stage.children().unwrap(),this.$element.removeClass(this.options.refreshClass).removeClass(this.options.loadingClass).removeClass(this.options.loadedClass).removeClass(this.options.rtlClass).removeClass(this.options.dragClass).removeClass(this.options.grabClass).attr("class",this.$element.attr("class").replace(new RegExp(this.options.responsiveClass+"-\\S+\\s","g"),"")).removeData("owl.carousel")},r.prototype.op=function(e,t,n){var i=this.settings.rtl;switch(t){case"<":return i?e>n:n>e;case">":return i?n>e:e>n;case">=":return i?n>=e:e>=n;case"<=":return i?e>=n:n>=e}},r.prototype.on=function(e,t,n,i){e.addEventListener?e.addEventListener(t,n,i):e.attachEvent&&e.attachEvent("on"+t,n)},r.prototype.off=function(e,t,n,i){e.removeEventListener?e.removeEventListener(t,n,i):e.detachEvent&&e.detachEvent("on"+t,n)},r.prototype.trigger=function(t,n,i,o,a){var s={item:{count:this._items.length,index:this.current()}},l=e.camelCase(e.grep(["on",t,i],function(e){return e}).join("-").toLowerCase()),c=e.Event([t,"owl",i||"carousel"].join(".").toLowerCase(),e.extend({relatedTarget:this},s,n));return this._supress[t]||(e.each(this._plugins,function(e,t){t.onTrigger&&t.onTrigger(c)}),this.register({type:r.Type.Event,name:t}),this.$element.trigger(c),this.settings&&"function"==typeof this.settings[l]&&this.settings[l].call(this,c)),c},r.prototype.enter=function(t){e.each([t].concat(this._states.tags[t]||[]),e.proxy(function(e,t){this._states.current[t]===i&&(this._states.current[t]=0),this._states.current[t]++},this))},r.prototype.leave=function(t){e.each([t].concat(this._states.tags[t]||[]),e.proxy(function(e,t){this._states.current[t]--},this))},r.prototype.register=function(t){if(t.type===r.Type.Event){if(e.event.special[t.name]||(e.event.special[t.name]={}),!e.event.special[t.name].owl){var n=e.event.special[t.name]._default;e.event.special[t.name]._default=function(e){return!n||!n.apply||e.namespace&&-1!==e.namespace.indexOf("owl")?e.namespace&&e.namespace.indexOf("owl")>-1:n.apply(this,arguments)},e.event.special[t.name].owl=!0}}else t.type===r.Type.State&&(this._states.tags[t.name]?this._states.tags[t.name]=this._states.tags[t.name].concat(t.tags):this._states.tags[t.name]=t.tags,this._states.tags[t.name]=e.grep(this._states.tags[t.name],e.proxy(function(n,i){return e.inArray(n,this._states.tags[t.name])===i},this)))},r.prototype.suppress=function(t){e.each(t,e.proxy(function(e,t){this._supress[t]=!0},this))},r.prototype.release=function(t){e.each(t,e.proxy(function(e,t){delete this._supress[t]},this))},r.prototype.pointer=function(e){var n={x:null,y:null};return e=e.originalEvent||e||t.event,e=e.touches&&e.touches.length?e.touches[0]:e.changedTouches&&e.changedTouches.length?e.changedTouches[0]:e,e.pageX?(n.x=e.pageX,n.y=e.pageY):(n.x=e.clientX,n.y=e.clientY),n},r.prototype.isNumeric=function(e){return!isNaN(parseFloat(e))},r.prototype.difference=function(e,t){return{x:e.x-t.x,y:e.y-t.y}},e.fn.owlCarousel=function(t){var n=Array.prototype.slice.call(arguments,1);return this.each(function(){var i=e(this),o=i.data("owl.carousel");o||(o=new r(this,"object"==typeof t&&t),i.data("owl.carousel",o),e.each(["next","prev","to","destroy","refresh","replace","add","remove"],function(t,n){o.register({type:r.Type.Event,name:n}),o.$element.on(n+".owl.carousel.core",e.proxy(function(e){e.namespace&&e.relatedTarget!==this&&(this.suppress([n]),o[n].apply(this,[].slice.call(arguments,1)),this.release([n]))},o))})),"string"==typeof t&&"_"!==t.charAt(0)&&o[t].apply(o,n)})},e.fn.owlCarousel.Constructor=r}(window.Zepto||window.jQuery,window,document),function(e,t,n,i){var r=function(t){this._core=t,this._interval=null,this._visible=null,this._handlers={"initialized.owl.carousel":e.proxy(function(e){e.namespace&&this._core.settings.autoRefresh&&this.watch()},this)},this._core.options=e.extend({},r.Defaults,this._core.options),this._core.$element.on(this._handlers)};r.Defaults={autoRefresh:!0,autoRefreshInterval:500},r.prototype.watch=function(){this._interval||(this._visible=this._core.$element.is(":visible"),this._interval=t.setInterval(e.proxy(this.refresh,this),this._core.settings.autoRefreshInterval))},r.prototype.refresh=function(){this._core.$element.is(":visible")!==this._visible&&(this._visible=!this._visible,this._core.$element.toggleClass("owl-hidden",!this._visible),this._visible&&this._core.invalidate("width")&&this._core.refresh())},r.prototype.destroy=function(){var e,n;t.clearInterval(this._interval);for(e in this._handlers)this._core.$element.off(e,this._handlers[e]);for(n in Object.getOwnPropertyNames(this))"function"!=typeof this[n]&&(this[n]=null)},e.fn.owlCarousel.Constructor.Plugins.AutoRefresh=r}(window.Zepto||window.jQuery,window,document),function(e,t,n,i){var r=function(t){this._core=t,this._loaded=[],this._handlers={"initialized.owl.carousel change.owl.carousel resized.owl.carousel":e.proxy(function(t){if(t.namespace&&this._core.settings&&this._core.settings.lazyLoad&&(t.property&&"position"==t.property.name||"initialized"==t.type))for(var n=this._core.settings,r=n.center&&Math.ceil(n.items/2)||n.items,o=n.center&&-1*r||0,a=(t.property&&t.property.value!==i?t.property.value:this._core.current())+o,s=this._core.clones().length,l=e.proxy(function(e,t){this.load(t)},this);o++<r;)this.load(s/2+this._core.relative(a)),s&&e.each(this._core.clones(this._core.relative(a)),l),a++},this)},this._core.options=e.extend({},r.Defaults,this._core.options),this._core.$element.on(this._handlers)};r.Defaults={lazyLoad:!1},r.prototype.load=function(n){var i=this._core.$stage.children().eq(n),r=i&&i.find(".owl-lazy");!r||e.inArray(i.get(0),this._loaded)>-1||(r.each(e.proxy(function(n,i){var r,o=e(i),a=t.devicePixelRatio>1&&o.attr("data-src-retina")||o.attr("data-src");this._core.trigger("load",{element:o,url:a},"lazy"),o.is("img")?o.one("load.owl.lazy",e.proxy(function(){o.css("opacity",1),this._core.trigger("loaded",{element:o,url:a},"lazy")},this)).attr("src",a):(r=new Image,r.onload=e.proxy(function(){o.css({"background-image":"url("+a+")",opacity:"1"}),this._core.trigger("loaded",{element:o,url:a},"lazy")},this),r.src=a)},this)),this._loaded.push(i.get(0)))},r.prototype.destroy=function(){var e,t;for(e in this.handlers)this._core.$element.off(e,this.handlers[e]);for(t in Object.getOwnPropertyNames(this))"function"!=typeof this[t]&&(this[t]=null)},e.fn.owlCarousel.Constructor.Plugins.Lazy=r}(window.Zepto||window.jQuery,window,document),function(e,t,n,i){var r=function(t){this._core=t,this._handlers={"initialized.owl.carousel refreshed.owl.carousel":e.proxy(function(e){e.namespace&&this._core.settings.autoHeight&&this.update()},this),"changed.owl.carousel":e.proxy(function(e){e.namespace&&this._core.settings.autoHeight&&"position"==e.property.name&&this.update()},this),"loaded.owl.lazy":e.proxy(function(e){e.namespace&&this._core.settings.autoHeight&&e.element.closest("."+this._core.settings.itemClass).index()===this._core.current()&&this.update()},this)},this._core.options=e.extend({},r.Defaults,this._core.options),this._core.$element.on(this._handlers)};r.Defaults={autoHeight:!1,autoHeightClass:"owl-height"},r.prototype.update=function(){var t=this._core._current,n=t+this._core.settings.items,i=this._core.$stage.children().toArray().slice(t,n),r=[],o=0;e.each(i,function(t,n){r.push(e(n).height())}),o=Math.max.apply(null,r),this._core.$stage.parent().height(o).addClass(this._core.settings.autoHeightClass)},r.prototype.destroy=function(){var e,t;for(e in this._handlers)this._core.$element.off(e,this._handlers[e]);for(t in Object.getOwnPropertyNames(this))"function"!=typeof this[t]&&(this[t]=null)},e.fn.owlCarousel.Constructor.Plugins.AutoHeight=r}(window.Zepto||window.jQuery,window,document),function(e,t,n,i){var r=function(t){this._core=t,this._videos={},this._playing=null,this._handlers={"initialized.owl.carousel":e.proxy(function(e){e.namespace&&this._core.register({type:"state",name:"playing",tags:["interacting"]})},this),"resize.owl.carousel":e.proxy(function(e){e.namespace&&this._core.settings.video&&this.isInFullScreen()&&e.preventDefault()},this),"refreshed.owl.carousel":e.proxy(function(e){e.namespace&&this._core.is("resizing")&&this._core.$stage.find(".cloned .owl-video-frame").remove()},this),"changed.owl.carousel":e.proxy(function(e){e.namespace&&"position"===e.property.name&&this._playing&&this.stop()},this),"prepared.owl.carousel":e.proxy(function(t){if(t.namespace){var n=e(t.content).find(".owl-video");n.length&&(n.css("display","none"),this.fetch(n,e(t.content)))}},this)},this._core.options=e.extend({},r.Defaults,this._core.options),this._core.$element.on(this._handlers),this._core.$element.on("click.owl.video",".owl-video-play-icon",e.proxy(function(e){this.play(e)},this))};r.Defaults={video:!1,videoHeight:!1,videoWidth:!1},r.prototype.fetch=function(e,t){var n=function(){return e.attr("data-vimeo-id")?"vimeo":e.attr("data-vzaar-id")?"vzaar":"youtube"}(),i=e.attr("data-vimeo-id")||e.attr("data-youtube-id")||e.attr("data-vzaar-id"),r=e.attr("data-width")||this._core.settings.videoWidth,o=e.attr("data-height")||this._core.settings.videoHeight,a=e.attr("href");if(!a)throw new Error("Missing video URL.");if(i=a.match(/(http:|https:|)\/\/(player.|www.|app.)?(vimeo\.com|youtu(be\.com|\.be|be\.googleapis\.com)|vzaar\.com)\/(video\/|videos\/|embed\/|channels\/.+\/|groups\/.+\/|watch\?v=|v\/)?([A-Za-z0-9._%-]*)(\&\S+)?/),i[3].indexOf("youtu")>-1)n="youtube";else if(i[3].indexOf("vimeo")>-1)n="vimeo";else{if(!(i[3].indexOf("vzaar")>-1))throw new Error("Video URL not supported.");n="vzaar"}i=i[6],this._videos[a]={type:n,id:i,width:r,height:o},t.attr("data-video",a),this.thumbnail(e,this._videos[a])},r.prototype.thumbnail=function(t,n){var i,r,o,a=n.width&&n.height?'style="width:'+n.width+"px;height:"+n.height+'px;"':"",s=t.find("img"),l="src",c="",u=this._core.settings,d=function(e){r='<div class="owl-video-play-icon"></div>',i=u.lazyLoad?'<div class="owl-video-tn '+c+'" '+l+'="'+e+'"></div>':'<div class="owl-video-tn" style="opacity:1;background-image:url('+e+')"></div>',t.after(i),t.after(r)};return t.wrap('<div class="owl-video-wrapper"'+a+"></div>"),this._core.settings.lazyLoad&&(l="data-src",c="owl-lazy"),s.length?(d(s.attr(l)),s.remove(),!1):void("youtube"===n.type?(o="//img.youtube.com/vi/"+n.id+"/hqdefault.jpg",d(o)):"vimeo"===n.type?e.ajax({type:"GET",url:"//vimeo.com/api/v2/video/"+n.id+".json",jsonp:"callback",dataType:"jsonp",success:function(e){o=e[0].thumbnail_large,d(o)}}):"vzaar"===n.type&&e.ajax({type:"GET",url:"//vzaar.com/api/videos/"+n.id+".json",jsonp:"callback",dataType:"jsonp",success:function(e){o=e.framegrab_url,d(o)}}))},r.prototype.stop=function(){this._core.trigger("stop",null,"video"),this._playing.find(".owl-video-frame").remove(),this._playing.removeClass("owl-video-playing"),this._playing=null,this._core.leave("playing"),this._core.trigger("stopped",null,"video")},r.prototype.play=function(t){var n,i=e(t.target),r=i.closest("."+this._core.settings.itemClass),o=this._videos[r.attr("data-video")],a=o.width||"100%",s=o.height||this._core.$stage.height();this._playing||(this._core.enter("playing"),this._core.trigger("play",null,"video"),r=this._core.items(this._core.relative(r.index())),this._core.reset(r.index()),"youtube"===o.type?n='<iframe width="'+a+'" height="'+s+'" src="//www.youtube.com/embed/'+o.id+"?autoplay=1&v="+o.id+'" frameborder="0" allowfullscreen></iframe>':"vimeo"===o.type?n='<iframe src="//player.vimeo.com/video/'+o.id+'?autoplay=1" width="'+a+'" height="'+s+'" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>':"vzaar"===o.type&&(n='<iframe frameborder="0"height="'+s+'"width="'+a+'" allowfullscreen mozallowfullscreen webkitAllowFullScreen src="//view.vzaar.com/'+o.id+'/player?autoplay=true"></iframe>'),e('<div class="owl-video-frame">'+n+"</div>").insertAfter(r.find(".owl-video")),this._playing=r.addClass("owl-video-playing"))},r.prototype.isInFullScreen=function(){var t=n.fullscreenElement||n.mozFullScreenElement||n.webkitFullscreenElement;return t&&e(t).parent().hasClass("owl-video-frame")},r.prototype.destroy=function(){var e,t;this._core.$element.off("click.owl.video");for(e in this._handlers)this._core.$element.off(e,this._handlers[e]);for(t in Object.getOwnPropertyNames(this))"function"!=typeof this[t]&&(this[t]=null)},e.fn.owlCarousel.Constructor.Plugins.Video=r}(window.Zepto||window.jQuery,window,document),function(e,t,n,i){var r=function(t){this.core=t,this.core.options=e.extend({},r.Defaults,this.core.options),this.swapping=!0,this.previous=i,this.next=i,this.handlers={"change.owl.carousel":e.proxy(function(e){e.namespace&&"position"==e.property.name&&(this.previous=this.core.current(),this.next=e.property.value)},this),"drag.owl.carousel dragged.owl.carousel translated.owl.carousel":e.proxy(function(e){e.namespace&&(this.swapping="translated"==e.type)},this),"translate.owl.carousel":e.proxy(function(e){e.namespace&&this.swapping&&(this.core.options.animateOut||this.core.options.animateIn)&&this.swap()},this)},this.core.$element.on(this.handlers)};r.Defaults={animateOut:!1,animateIn:!1},r.prototype.swap=function(){if(1===this.core.settings.items&&e.support.animation&&e.support.transition){this.core.speed(0);var t,n=e.proxy(this.clear,this),i=this.core.$stage.children().eq(this.previous),r=this.core.$stage.children().eq(this.next),o=this.core.settings.animateIn,a=this.core.settings.animateOut;this.core.current()!==this.previous&&(a&&(t=this.core.coordinates(this.previous)-this.core.coordinates(this.next),i.one(e.support.animation.end,n).css({left:t+"px"}).addClass("animated owl-animated-out").addClass(a)),o&&r.one(e.support.animation.end,n).addClass("animated owl-animated-in").addClass(o))}},r.prototype.clear=function(t){e(t.target).css({left:""}).removeClass("animated owl-animated-out owl-animated-in").removeClass(this.core.settings.animateIn).removeClass(this.core.settings.animateOut),this.core.onTransitionEnd()},r.prototype.destroy=function(){var e,t;for(e in this.handlers)this.core.$element.off(e,this.handlers[e]);for(t in Object.getOwnPropertyNames(this))"function"!=typeof this[t]&&(this[t]=null)},e.fn.owlCarousel.Constructor.Plugins.Animate=r}(window.Zepto||window.jQuery,window,document),function(e,t,n,i){var r=function(t){this._core=t,this._timeout=null,this._paused=!1,this._handlers={"changed.owl.carousel":e.proxy(function(e){e.namespace&&"settings"===e.property.name?this._core.settings.autoplay?this.play():this.stop():e.namespace&&"position"===e.property.name&&this._core.settings.autoplay&&this._setAutoPlayInterval()},this),"initialized.owl.carousel":e.proxy(function(e){e.namespace&&this._core.settings.autoplay&&this.play()},this),"play.owl.autoplay":e.proxy(function(e,t,n){e.namespace&&this.play(t,n)},this),"stop.owl.autoplay":e.proxy(function(e){e.namespace&&this.stop()},this),"mouseover.owl.autoplay":e.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.pause()},this),"mouseleave.owl.autoplay":e.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.play()},this),"touchstart.owl.core":e.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.pause()},this),"touchend.owl.core":e.proxy(function(){this._core.settings.autoplayHoverPause&&this.play()},this)},this._core.$element.on(this._handlers),this._core.options=e.extend({},r.Defaults,this._core.options)};r.Defaults={autoplay:!1,autoplayTimeout:5e3,autoplayHoverPause:!1,autoplaySpeed:!1},r.prototype.play=function(e,t){this._paused=!1,this._core.is("rotating")||(this._core.enter("rotating"),this._setAutoPlayInterval())},r.prototype._getNextTimeout=function(i,r){return this._timeout&&t.clearTimeout(this._timeout),t.setTimeout(e.proxy(function(){this._paused||this._core.is("busy")||this._core.is("interacting")||n.hidden||this._core.next(r||this._core.settings.autoplaySpeed)},this),i||this._core.settings.autoplayTimeout)},r.prototype._setAutoPlayInterval=function(){this._timeout=this._getNextTimeout()},r.prototype.stop=function(){this._core.is("rotating")&&(t.clearTimeout(this._timeout),this._core.leave("rotating"))},r.prototype.pause=function(){this._core.is("rotating")&&(this._paused=!0)},r.prototype.destroy=function(){var e,t;this.stop();for(e in this._handlers)this._core.$element.off(e,this._handlers[e]);for(t in Object.getOwnPropertyNames(this))"function"!=typeof this[t]&&(this[t]=null)},e.fn.owlCarousel.Constructor.Plugins.autoplay=r}(window.Zepto||window.jQuery,window,document),function(e,t,n,i){"use strict";var r=function(t){this._core=t,this._initialized=!1,this._pages=[],this._controls={},this._templates=[],this.$element=this._core.$element,this._overrides={next:this._core.next,prev:this._core.prev,to:this._core.to},this._handlers={"prepared.owl.carousel":e.proxy(function(t){t.namespace&&this._core.settings.dotsData&&this._templates.push('<div class="'+this._core.settings.dotClass+'">'+e(t.content).find("[data-dot]").addBack("[data-dot]").attr("data-dot")+"</div>")},this),"added.owl.carousel":e.proxy(function(e){e.namespace&&this._core.settings.dotsData&&this._templates.splice(e.position,0,this._templates.pop())},this),"remove.owl.carousel":e.proxy(function(e){e.namespace&&this._core.settings.dotsData&&this._templates.splice(e.position,1)},this),"changed.owl.carousel":e.proxy(function(e){e.namespace&&"position"==e.property.name&&this.draw()},this),"initialized.owl.carousel":e.proxy(function(e){e.namespace&&!this._initialized&&(this._core.trigger("initialize",null,"navigation"),this.initialize(),this.update(),this.draw(),this._initialized=!0,this._core.trigger("initialized",null,"navigation"))},this),"refreshed.owl.carousel":e.proxy(function(e){e.namespace&&this._initialized&&(this._core.trigger("refresh",null,"navigation"),this.update(),this.draw(),this._core.trigger("refreshed",null,"navigation"))},this)},this._core.options=e.extend({},r.Defaults,this._core.options),this.$element.on(this._handlers)};r.Defaults={nav:!1,navText:["prev","next"],navSpeed:!1,navElement:"div",navContainer:!1,navContainerClass:"owl-nav",navClass:["owl-prev","owl-next"],slideBy:1,dotClass:"owl-dot",dotsClass:"owl-dots",dots:!0,dotsEach:!1,dotsData:!1,dotsSpeed:!1,dotsContainer:!1},r.prototype.initialize=function(){var t,n=this._core.settings;this._controls.$relative=(n.navContainer?e(n.navContainer):e("<div>").addClass(n.navContainerClass).appendTo(this.$element)).addClass("disabled"),this._controls.$previous=e("<"+n.navElement+">").addClass(n.navClass[0]).html(n.navText[0]).prependTo(this._controls.$relative).on("click",e.proxy(function(e){this.prev(n.navSpeed)},this)),this._controls.$next=e("<"+n.navElement+">").addClass(n.navClass[1]).html(n.navText[1]).appendTo(this._controls.$relative).on("click",e.proxy(function(e){this.next(n.navSpeed)},this)),n.dotsData||(this._templates=[e("<div>").addClass(n.dotClass).append(e("<span>")).prop("outerHTML")]),this._controls.$absolute=(n.dotsContainer?e(n.dotsContainer):e("<div>").addClass(n.dotsClass).appendTo(this.$element)).addClass("disabled"),this._controls.$absolute.on("click","div",e.proxy(function(t){var i=e(t.target).parent().is(this._controls.$absolute)?e(t.target).index():e(t.target).parent().index();t.preventDefault(),this.to(i,n.dotsSpeed)},this));for(t in this._overrides)this._core[t]=e.proxy(this[t],this)},r.prototype.destroy=function(){var e,t,n,i;for(e in this._handlers)this.$element.off(e,this._handlers[e]);for(t in this._controls)this._controls[t].remove();for(i in this.overides)this._core[i]=this._overrides[i];for(n in Object.getOwnPropertyNames(this))"function"!=typeof this[n]&&(this[n]=null)},r.prototype.update=function(){var e,t,n,i=this._core.clones().length/2,r=i+this._core.items().length,o=this._core.maximum(!0),a=this._core.settings,s=a.center||a.autoWidth||a.dotsData?1:a.dotsEach||a.items;if("page"!==a.slideBy&&(a.slideBy=Math.min(a.slideBy,a.items)),a.dots||"page"==a.slideBy)for(this._pages=[],e=i,t=0,n=0;r>e;e++){if(t>=s||0===t){if(this._pages.push({start:Math.min(o,e-i),end:e-i+s-1}),Math.min(o,e-i)===o)break;t=0,++n}t+=this._core.mergers(this._core.relative(e))}},r.prototype.draw=function(){var t,n=this._core.settings,i=this._core.items().length<=n.items,r=this._core.relative(this._core.current()),o=n.loop||n.rewind;this._controls.$relative.toggleClass("disabled",!n.nav||i),n.nav&&(this._controls.$previous.toggleClass("disabled",!o&&r<=this._core.minimum(!0)),this._controls.$next.toggleClass("disabled",!o&&r>=this._core.maximum(!0))),this._controls.$absolute.toggleClass("disabled",!n.dots||i),n.dots&&(t=this._pages.length-this._controls.$absolute.children().length,n.dotsData&&0!==t?this._controls.$absolute.html(this._templates.join("")):t>0?this._controls.$absolute.append(new Array(t+1).join(this._templates[0])):0>t&&this._controls.$absolute.children().slice(t).remove(),this._controls.$absolute.find(".active").removeClass("active"),this._controls.$absolute.children().eq(e.inArray(this.current(),this._pages)).addClass("active"))},r.prototype.onTrigger=function(t){var n=this._core.settings;t.page={index:e.inArray(this.current(),this._pages),count:this._pages.length,size:n&&(n.center||n.autoWidth||n.dotsData?1:n.dotsEach||n.items)}},r.prototype.current=function(){var t=this._core.relative(this._core.current());return e.grep(this._pages,e.proxy(function(e,n){return e.start<=t&&e.end>=t},this)).pop()},r.prototype.getPosition=function(t){var n,i,r=this._core.settings;return"page"==r.slideBy?(n=e.inArray(this.current(),this._pages),i=this._pages.length,t?++n:--n,n=this._pages[(n%i+i)%i].start):(n=this._core.relative(this._core.current()),i=this._core.items().length,t?n+=r.slideBy:n-=r.slideBy),n},r.prototype.next=function(t){e.proxy(this._overrides.to,this._core)(this.getPosition(!0),t)},r.prototype.prev=function(t){e.proxy(this._overrides.to,this._core)(this.getPosition(!1),t)},r.prototype.to=function(t,n,i){var r;!i&&this._pages.length?(r=this._pages.length,e.proxy(this._overrides.to,this._core)(this._pages[(t%r+r)%r].start,n)):e.proxy(this._overrides.to,this._core)(t,n)},e.fn.owlCarousel.Constructor.Plugins.Navigation=r}(window.Zepto||window.jQuery,window,document),function(e,t,n,i){"use strict";var r=function(n){this._core=n,this._hashes={},this.$element=this._core.$element,this._handlers={"initialized.owl.carousel":e.proxy(function(n){n.namespace&&"URLHash"===this._core.settings.startPosition&&e(t).trigger("hashchange.owl.navigation")},this),"prepared.owl.carousel":e.proxy(function(t){if(t.namespace){var n=e(t.content).find("[data-hash]").addBack("[data-hash]").attr("data-hash");if(!n)return;this._hashes[n]=t.content}},this),"changed.owl.carousel":e.proxy(function(n){if(n.namespace&&"position"===n.property.name){var i=this._core.items(this._core.relative(this._core.current())),r=e.map(this._hashes,function(e,t){return e===i?t:null}).join();if(!r||t.location.hash.slice(1)===r)return;t.location.hash=r}},this)},this._core.options=e.extend({},r.Defaults,this._core.options),
this.$element.on(this._handlers),e(t).on("hashchange.owl.navigation",e.proxy(function(e){var n=t.location.hash.substring(1),r=this._core.$stage.children(),o=this._hashes[n]&&r.index(this._hashes[n]);o!==i&&o!==this._core.current()&&this._core.to(this._core.relative(o),!1,!0)},this))};r.Defaults={URLhashListener:!1},r.prototype.destroy=function(){var n,i;e(t).off("hashchange.owl.navigation");for(n in this._handlers)this._core.$element.off(n,this._handlers[n]);for(i in Object.getOwnPropertyNames(this))"function"!=typeof this[i]&&(this[i]=null)},e.fn.owlCarousel.Constructor.Plugins.Hash=r}(window.Zepto||window.jQuery,window,document),function(e,t,n,i){function r(t,n){var r=!1,o=t.charAt(0).toUpperCase()+t.slice(1);return e.each((t+" "+s.join(o+" ")+o).split(" "),function(e,t){return a[t]!==i?(r=!n||t,!1):void 0}),r}function o(e){return r(e,!0)}var a=e("<support>").get(0).style,s="Webkit Moz O ms".split(" "),l={transition:{end:{WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd",transition:"transitionend"}},animation:{end:{WebkitAnimation:"webkitAnimationEnd",MozAnimation:"animationend",OAnimation:"oAnimationEnd",animation:"animationend"}}},c={csstransforms:function(){return!!r("transform")},csstransforms3d:function(){return!!r("perspective")},csstransitions:function(){return!!r("transition")},cssanimations:function(){return!!r("animation")}};c.csstransitions()&&(e.support.transition=new String(o("transition")),e.support.transition.end=l.transition.end[e.support.transition]),c.cssanimations()&&(e.support.animation=new String(o("animation")),e.support.animation.end=l.animation.end[e.support.animation]),c.csstransforms()&&(e.support.transform=new String(o("transform")),e.support.transform3d=c.csstransforms3d())}(window.Zepto||window.jQuery,window,document),!function(e){function t(n,i){return this instanceof t?(e.isPlainObject(n)?i=n:(i=i||{},i.alias=n),this.el=void 0,this.opts=e.extend(!0,{},this.defaults,i),this.noMasksCache=i&&void 0!==i.definitions,this.userOptions=i||{},this.events={},void r(this.opts.alias,i,this.opts)):new t(n,i)}function n(e){var t=document.createElement("input"),n="on"+e,i=n in t;return i||(t.setAttribute(n,"return;"),i="function"==typeof t[n]),t=null,i}function i(t,n){var i=t.getAttribute("type"),r="INPUT"===t.tagName&&e.inArray(i,n.supportsInputType)!==-1||t.isContentEditable||"TEXTAREA"===t.tagName;if(!r&&"INPUT"===t.tagName){var o=document.createElement("input");o.setAttribute("type",i),r="text"===o.type,o=null}return r}function r(t,n,i){var o=i.aliases[t];return o?(o.alias&&r(o.alias,void 0,i),e.extend(!0,i,o),e.extend(!0,i,n),!0):(null===i.mask&&(i.mask=t),!1)}function o(t,n,i){function o(e,n){n=void 0!==n?n:t.getAttribute("data-inputmask-"+e),null!==n&&("string"==typeof n&&(0===e.indexOf("on")?n=window[n]:"false"===n?n=!1:"true"===n&&(n=!0)),i[e]=n)}var a,s,l,c,u=t.getAttribute("data-inputmask");if(u&&""!==u&&(u=u.replace(new RegExp("'","g"),'"'),s=JSON.parse("{"+u+"}")),s){l=void 0;for(c in s)if("alias"===c.toLowerCase()){l=s[c];break}}o("alias",l),i.alias&&r(i.alias,i,n);for(a in n){if(s){l=void 0;for(c in s)if(c.toLowerCase()===a.toLowerCase()){l=s[c];break}}o(a,l)}return e.extend(!0,n,i),n}function a(n,i){function r(t){function i(e,t,n,i){this.matches=[],this.isGroup=e||!1,this.isOptional=t||!1,this.isQuantifier=n||!1,this.isAlternator=i||!1,this.quantifier={min:1,max:1}}function r(t,i,r){var o=n.definitions[i];r=void 0!==r?r:t.matches.length;var a=t.matches[r-1];if(o&&!v){o.placeholder=e.isFunction(o.placeholder)?o.placeholder(n):o.placeholder;for(var s=o.prevalidator,l=s?s.length:0,c=1;c<o.cardinality;c++){var u=l>=c?s[c-1]:[],d=u.validator,p=u.cardinality;t.matches.splice(r++,0,{fn:d?"string"==typeof d?new RegExp(d):new function(){this.test=d}:new RegExp("."),cardinality:p?p:1,optionality:t.isOptional,newBlockMarker:void 0===a||a.def!==(o.definitionSymbol||i),casing:o.casing,def:o.definitionSymbol||i,placeholder:o.placeholder,mask:i}),a=t.matches[r-1]}t.matches.splice(r++,0,{fn:o.validator?"string"==typeof o.validator?new RegExp(o.validator):new function(){this.test=o.validator}:new RegExp("."),cardinality:o.cardinality,optionality:t.isOptional,newBlockMarker:void 0===a||a.def!==(o.definitionSymbol||i),casing:o.casing,def:o.definitionSymbol||i,placeholder:o.placeholder,mask:i})}else t.matches.splice(r++,0,{fn:null,cardinality:0,optionality:t.isOptional,newBlockMarker:void 0===a||a.def!==i,casing:null,def:n.staticDefinitionSymbol||i,placeholder:void 0!==n.staticDefinitionSymbol?i:void 0,mask:i}),v=!1}function o(e,t){e.isGroup&&(e.isGroup=!1,r(e,n.groupmarker.start,0),t!==!0&&r(e,n.groupmarker.end))}function a(e,t,n,i){t.matches.length>0&&(void 0===i||i)&&(n=t.matches[t.matches.length-1],o(n)),r(t,e)}function s(){if(x.length>0){if(p=x[x.length-1],a(u,p,f,!p.isAlternator),p.isAlternator){h=x.pop();for(var e=0;e<h.matches.length;e++)h.matches[e].isGroup=!1;x.length>0?(p=x[x.length-1],p.matches.push(h)):y.matches.push(h)}}else a(u,y,f)}function l(e){function t(e){return e===n.optionalmarker.start?e=n.optionalmarker.end:e===n.optionalmarker.end?e=n.optionalmarker.start:e===n.groupmarker.start?e=n.groupmarker.end:e===n.groupmarker.end&&(e=n.groupmarker.start),e}e.matches=e.matches.reverse();for(var i in e.matches){var r=parseInt(i);if(e.matches[i].isQuantifier&&e.matches[r+1]&&e.matches[r+1].isGroup){var o=e.matches[i];e.matches.splice(i,1),e.matches.splice(r+1,0,o)}void 0!==e.matches[i].matches?e.matches[i]=l(e.matches[i]):e.matches[i]=t(e.matches[i])}return e}for(var c,u,d,p,h,f,g,m=/(?:[?*+]|\{[0-9\+\*]+(?:,[0-9\+\*]*)?\})|[^.?*+^${[]()|\\]+|./g,v=!1,y=new i,x=[],w=[];c=m.exec(t);)if(u=c[0],v)s();else switch(u.charAt(0)){case n.escapeChar:v=!0;break;case n.optionalmarker.end:case n.groupmarker.end:if(d=x.pop(),void 0!==d)if(x.length>0){if(p=x[x.length-1],p.matches.push(d),p.isAlternator){h=x.pop();for(var b=0;b<h.matches.length;b++)h.matches[b].isGroup=!1;x.length>0?(p=x[x.length-1],p.matches.push(h)):y.matches.push(h)}}else y.matches.push(d);else s();break;case n.optionalmarker.start:x.push(new i((!1),(!0)));break;case n.groupmarker.start:x.push(new i((!0)));break;case n.quantifiermarker.start:var k=new i((!1),(!1),(!0));u=u.replace(/[{}]/g,"");var C=u.split(","),_=isNaN(C[0])?C[0]:parseInt(C[0]),S=1===C.length?_:isNaN(C[1])?C[1]:parseInt(C[1]);if("*"!==S&&"+"!==S||(_="*"===S?0:1),k.quantifier={min:_,max:S},x.length>0){var T=x[x.length-1].matches;c=T.pop(),c.isGroup||(g=new i((!0)),g.matches.push(c),c=g),T.push(c),T.push(k)}else c=y.matches.pop(),c.isGroup||(g=new i((!0)),g.matches.push(c),c=g),y.matches.push(c),y.matches.push(k);break;case n.alternatormarker:x.length>0?(p=x[x.length-1],f=p.matches.pop()):f=y.matches.pop(),f.isAlternator?x.push(f):(h=new i((!1),(!1),(!1),(!0)),h.matches.push(f),x.push(h));break;default:s()}for(;x.length>0;)d=x.pop(),o(d,!0),y.matches.push(d);return y.matches.length>0&&(f=y.matches[y.matches.length-1],o(f),w.push(y)),n.numericInput&&l(w[0]),w}function o(o,a){if(null!==o&&""!==o){if(1===o.length&&n.greedy===!1&&0!==n.repeat&&(n.placeholder=""),n.repeat>0||"*"===n.repeat||"+"===n.repeat){var s="*"===n.repeat?0:"+"===n.repeat?1:n.repeat;o=n.groupmarker.start+o+n.groupmarker.end+n.quantifiermarker.start+s+","+n.repeat+n.quantifiermarker.end}var l;return void 0===t.prototype.masksCache[o]||i===!0?(l={mask:o,maskToken:r(o),validPositions:{},_buffer:void 0,buffer:void 0,tests:{},metadata:a,maskLength:void 0},i!==!0&&(t.prototype.masksCache[n.numericInput?o.split("").reverse().join(""):o]=l,l=e.extend(!0,{},t.prototype.masksCache[n.numericInput?o.split("").reverse().join(""):o]))):l=e.extend(!0,{},t.prototype.masksCache[n.numericInput?o.split("").reverse().join(""):o]),l}}function a(e){return e=e.toString()}var s;if(e.isFunction(n.mask)&&(n.mask=n.mask(n)),e.isArray(n.mask)){if(n.mask.length>1){n.keepStatic=null===n.keepStatic||n.keepStatic;var l="(";return e.each(n.numericInput?n.mask.reverse():n.mask,function(t,n){l.length>1&&(l+=")|("),l+=a(void 0===n.mask||e.isFunction(n.mask)?n:n.mask)}),l+=")",o(l,n.mask)}n.mask=n.mask.pop()}return n.mask&&(s=void 0===n.mask.mask||e.isFunction(n.mask.mask)?o(a(n.mask),n.mask):o(a(n.mask.mask),n.mask)),s}function s(r,o,a){function l(e,t,n){t=t||0;var i,r,o,s=[],l=0,c=f();ae=void 0!==re?re.maxLength:void 0,ae===-1&&(ae=void 0);do{if(e===!0&&p().validPositions[l]){var u=p().validPositions[l];r=u.match,i=u.locator.slice(),s.push(n===!0?u.input:M(l,r))}else o=v(l,i,l-1),r=o.match,i=o.locator.slice(),(a.jitMasking===!1||l<c||isFinite(a.jitMasking)&&a.jitMasking>l)&&s.push(M(l,r));l++}while((void 0===ae||l<ae)&&(null!==r.fn||""!==r.def)||t>l);return""===s[s.length-1]&&s.pop(),p().maskLength=l+1,s}function p(){return o}function h(e){var t=p();t.buffer=void 0,e!==!0&&(t._buffer=void 0,t.validPositions={},t.p=0)}function f(e,t,n){var i=-1,r=-1,o=n||p().validPositions;void 0===e&&(e=-1);for(var a in o){var s=parseInt(a);o[s]&&(t||null!==o[s].match.fn)&&(s<=e&&(i=s),s>=e&&(r=s))}return i!==-1&&e-i>1||r<e?i:r}function g(t,n,i,r){function o(e){var t=p().validPositions[e];if(void 0!==t&&null===t.match.fn){var n=p().validPositions[e-1],i=p().validPositions[e+1];return void 0!==n&&void 0!==i}return!1}var s,l=t,c=e.extend(!0,{},p().validPositions),u=!1;for(p().p=t,s=n-1;s>=l;s--)void 0!==p().validPositions[s]&&(i===!0||!o(s)&&a.canClearPosition(p(),s,f(),r,a)!==!1)&&delete p().validPositions[s];for(h(!0),s=l+1;s<=f();){for(;void 0!==p().validPositions[l];)l++;var d=p().validPositions[l];if(s<l&&(s=l+1),void 0===p().validPositions[s]&&P(s)||void 0!==d)s++;else{var g=v(s);u===!1&&c[l]&&c[l].match.def===g.match.def?(p().validPositions[l]=e.extend(!0,{},c[l]),p().validPositions[l].input=g.input,delete p().validPositions[s],s++):x(l,g.match.def)?E(l,g.input||M(s),!0)!==!1&&(delete p().validPositions[s],s++,u=!0):P(s)||(s++,l--),l++}}h(!0)}function m(e,t){for(var n,i=e,r=f(),o=p().validPositions[r]||b(0)[0],s=void 0!==o.alternation?o.locator[o.alternation].toString().split(","):[],l=0;l<i.length&&(n=i[l],!(n.match&&(a.greedy&&n.match.optionalQuantifier!==!0||(n.match.optionality===!1||n.match.newBlockMarker===!1)&&n.match.optionalQuantifier!==!0)&&(void 0===o.alternation||o.alternation!==n.alternation||void 0!==n.locator[o.alternation]&&T(n.locator[o.alternation].toString().split(","),s)))||t===!0&&(null!==n.match.fn||/[0-9a-bA-Z]/.test(n.match.def)));l++);return n}function v(e,t,n){return p().validPositions[e]||m(b(e,t?t.slice():t,n))}function y(e){return p().validPositions[e]?p().validPositions[e]:b(e)[0]}function x(e,t){for(var n=!1,i=b(e),r=0;r<i.length;r++)if(i[r].match&&i[r].match.def===t){n=!0;break}return n}function w(t,n){var i,r;return(p().tests[t]||p().validPositions[t])&&e.each(p().tests[t]||[p().validPositions[t]],function(e,t){var o=t.alternation?t.locator[t.alternation].toString().indexOf(n):-1;(void 0===r||o<r)&&o!==-1&&(i=t,r=o)}),i}function b(t,n,i){function r(n,i,o,s){function c(o,s,d){function m(t,n){var i=0===e.inArray(t,n.matches);return i||e.each(n.matches,function(e,r){if(r.isQuantifier===!0&&(i=m(t,n.matches[e-1])))return!1}),i}function v(e,t){var n=w(e,t);return n?n.locator.slice(n.alternation+1):void 0}function y(e,n){return null===e.match.fn&&null!==n.match.fn&&n.match.fn.test(e.match.def,p(),t,!1,a,!1)}if(u>1e4)throw"Inputmask: There is probably an error in your mask definition or in the code. Create an issue on github with an example of the mask you are using. "+p().mask;if(u===t&&void 0===o.matches)return h.push({match:o,locator:s.reverse(),cd:g}),!0;if(void 0!==o.matches){if(o.isGroup&&d!==o){if(o=c(n.matches[e.inArray(o,n.matches)+1],s))return!0}else if(o.isOptional){var x=o;if(o=r(o,i,s,d)){if(l=h[h.length-1].match,!m(l,x))return!0;f=!0,u=t}}else if(o.isAlternator){var b,k=o,C=[],_=h.slice(),S=s.length,T=i.length>0?i.shift():-1;if(T===-1||"string"==typeof T){var E,P=u,A=i.slice(),D=[];if("string"==typeof T)D=T.split(",");else for(E=0;E<k.matches.length;E++)D.push(E);for(var O=0;O<D.length;O++){if(E=parseInt(D[O]),h=[],i=v(u,E)||A.slice(),o=c(k.matches[E]||n.matches[E],[E].concat(s),d)||o,o!==!0&&void 0!==o&&D[D.length-1]<k.matches.length){var j=e.inArray(o,n.matches)+1;n.matches.length>j&&(o=c(n.matches[j],[j].concat(s.slice(1,s.length)),d),o&&(D.push(j.toString()),e.each(h,function(e,t){t.alternation=s.length-1})))}b=h.slice(),u=P,h=[];for(var M=0;M<b.length;M++){var R=b[M],L=!1;R.alternation=R.alternation||S;for(var I=0;I<C.length;I++){var N=C[I];if(("string"!=typeof T||e.inArray(R.locator[R.alternation].toString(),D)!==-1)&&(R.match.def===N.match.def||y(R,N))){L=R.match.mask===N.match.mask,N.locator[R.alternation].toString().indexOf(R.locator[R.alternation])===-1&&(N.locator[R.alternation]=N.locator[R.alternation]+","+R.locator[R.alternation],N.alternation=R.alternation,null==R.match.fn&&(N.na=N.na||R.locator[R.alternation].toString(),N.na.indexOf(R.locator[R.alternation])===-1&&(N.na=N.na+","+R.locator[R.alternation])));break}}L||C.push(R)}}"string"==typeof T&&(C=e.map(C,function(t,n){if(isFinite(n)){var i,r=t.alternation,o=t.locator[r].toString().split(",");t.locator[r]=void 0,t.alternation=void 0;for(var a=0;a<o.length;a++)i=e.inArray(o[a],D)!==-1,i&&(void 0!==t.locator[r]?(t.locator[r]+=",",t.locator[r]+=o[a]):t.locator[r]=parseInt(o[a]),t.alternation=r);if(void 0!==t.locator[r])return t}})),h=_.concat(C),u=t,f=h.length>0,i=A.slice()}else o=c(k.matches[T]||n.matches[T],[T].concat(s),d);if(o)return!0}else if(o.isQuantifier&&d!==n.matches[e.inArray(o,n.matches)-1])for(var F=o,H=i.length>0?i.shift():0;H<(isNaN(F.quantifier.max)?H+1:F.quantifier.max)&&u<=t;H++){var $=n.matches[e.inArray(F,n.matches)-1];if(o=c($,[H].concat(s),$)){if(l=h[h.length-1].match,l.optionalQuantifier=H>F.quantifier.min-1,m(l,$)){if(H>F.quantifier.min-1){f=!0,u=t;break}return!0}return!0}}else if(o=r(o,i,s,d))return!0}else u++}for(var d=i.length>0?i.shift():0;d<n.matches.length;d++)if(n.matches[d].isQuantifier!==!0){var m=c(n.matches[d],[d].concat(o),s);if(m&&u===t)return m;if(u>t)break}}function o(t){var n=[];return e.isArray(t)||(t=[t]),t.length>0&&(void 0===t[0].alternation?(n=m(t.slice()).locator.slice(),0===n.length&&(n=t[0].locator.slice())):e.each(t,function(e,t){if(""!==t.def)if(0===n.length)n=t.locator.slice();else for(var i=0;i<n.length;i++)t.locator[i]&&n[i].toString().indexOf(t.locator[i])===-1&&(n[i]+=","+t.locator[i])})),n}function s(e){return a.keepStatic&&t>0&&e.length>1+(""===e[e.length-1].match.def?1:0)&&e[0].match.optionality!==!0&&e[0].match.optionalQuantifier!==!0&&null===e[0].match.fn&&!/[0-9a-bA-Z]/.test(e[0].match.def)?[m(e)]:e}var l,c=p().maskToken,u=n?i:0,d=n?n.slice():[0],h=[],f=!1,g=n?n.join(""):"";if(t>-1){if(void 0===n){for(var v,y=t-1;void 0===(v=p().validPositions[y]||p().tests[y])&&y>-1;)y--;void 0!==v&&y>-1&&(d=o(v),g=d.join(""),u=y)}if(p().tests[t]&&p().tests[t][0].cd===g)return s(p().tests[t]);for(var x=d.shift();x<c.length;x++){var b=r(c[x],d,[x]);if(b&&u===t||u>t)break}}return(0===h.length||f)&&h.push({match:{fn:null,cardinality:0,optionality:!0,casing:null,def:"",placeholder:""},locator:[],cd:g}),void 0!==n&&p().tests[t]?s(e.extend(!0,[],h)):(p().tests[t]=e.extend(!0,[],h),s(p().tests[t]))}function k(){return void 0===p()._buffer&&(p()._buffer=l(!1,1),void 0===p().buffer&&p()._buffer.slice()),p()._buffer}function C(e){return void 0!==p().buffer&&e!==!0||(p().buffer=l(!0,f(),!0)),p().buffer}function _(e,t,n){var i;if(e===!0)h(),e=0,t=n.length;else for(i=e;i<t;i++)delete p().validPositions[i];for(i=e;i<t;i++)h(!0),n[i]!==a.skipOptionalPartCharacter&&E(i,n[i],!0,!0)}function S(e,n,i){switch(a.casing||n.casing){case"upper":e=e.toUpperCase();break;case"lower":e=e.toLowerCase();break;case"title":var r=p().validPositions[i-1];e=0===i||r&&r.input===String.fromCharCode(t.keyCode.SPACE)?e.toUpperCase():e.toLowerCase()}return e}function T(t,n){for(var i=a.greedy?n:n.slice(0,1),r=!1,o=0;o<t.length;o++)if(e.inArray(t[o],i)!==-1){r=!0;break}return r}function E(n,i,r,o,s){function l(e){return le?e.begin-e.end>1||e.begin-e.end===1&&a.insertMode:e.end-e.begin>1||e.end-e.begin===1&&a.insertMode}function c(t,i,r){var s=!1;return e.each(b(t),function(c,u){for(var d=u.match,m=i?1:0,v="",x=d.cardinality;x>m;x--)v+=O(t-(x-1));if(i&&(v+=i),C(!0),s=null!=d.fn?d.fn.test(v,p(),t,r,a,l(n)):(i===d.def||i===a.skipOptionalPartCharacter)&&""!==d.def&&{c:d.placeholder||d.def,pos:t},s!==!1){var w=void 0!==s.c?s.c:i;w=w===a.skipOptionalPartCharacter&&null===d.fn?d.placeholder||d.def:w;var b=t,k=C();if(void 0!==s.remove&&(e.isArray(s.remove)||(s.remove=[s.remove]),e.each(s.remove.sort(function(e,t){return t-e}),function(e,t){g(t,t+1,!0)})),void 0!==s.insert&&(e.isArray(s.insert)||(s.insert=[s.insert]),e.each(s.insert.sort(function(e,t){return e-t}),function(e,t){E(t.pos,t.c,!1,o)})),s.refreshFromBuffer){var T=s.refreshFromBuffer;if(r=!0,_(T===!0?T:T.start,T.end,k),void 0===s.pos&&void 0===s.c)return s.pos=f(),!1;if(b=void 0!==s.pos?s.pos:t,b!==t)return s=e.extend(s,E(b,w,!0,o)),!1}else if(s!==!0&&void 0!==s.pos&&s.pos!==t&&(b=s.pos,_(t,b,C().slice()),b!==t))return s=e.extend(s,E(b,w,!0)),!1;return(s===!0||void 0!==s.pos||void 0!==s.c)&&(c>0&&h(!0),y(b,e.extend({},u,{input:S(w,d,b)}),o,l(n))||(s=!1),!1)}}),s}function u(t,n,i){var r,s,l,c,u,d,g,m,v=e.extend(!0,{},p().validPositions),y=!1,x=f();for(c=p().validPositions[x];x>=0;x--)if(l=p().validPositions[x],l&&void 0!==l.alternation){if(r=x,s=p().validPositions[r].alternation,c.locator[l.alternation]!==l.locator[l.alternation])break;c=l}if(void 0!==s){m=parseInt(r);var w=void 0!==c.locator[c.alternation||s]?c.locator[c.alternation||s]:g[0];w.length>0&&(w=w.split(",")[0]);var k=p().validPositions[m],C=p().validPositions[m-1];e.each(b(m,C?C.locator:void 0,m-1),function(r,l){g=l.locator[s]?l.locator[s].toString().split(","):[];for(var c=0;c<g.length;c++){var x=[],b=0,C=0,_=!1;if(w<g[c]&&(void 0===l.na||e.inArray(g[c],l.na.split(","))===-1)){p().validPositions[m]=e.extend(!0,{},l);var S=p().validPositions[m].locator;for(p().validPositions[m].locator[s]=parseInt(g[c]),null==l.match.fn?(k.input!==l.match.def&&(_=!0,k.generatedInput!==!0&&x.push(k.input)),C++,p().validPositions[m].generatedInput=!/[0-9a-bA-Z]/.test(l.match.def),p().validPositions[m].input=l.match.def):p().validPositions[m].input=k.input,u=m+1;u<f(void 0,!0)+1;u++)d=p().validPositions[u],d&&d.generatedInput!==!0&&/[0-9a-bA-Z]/.test(d.input)?x.push(d.input):u<t&&b++,delete p().validPositions[u];for(_&&x[0]===l.match.def&&x.shift(),h(!0),y=!0;x.length>0;){var T=x.shift();if(T!==a.skipOptionalPartCharacter&&!(y=E(f(void 0,!0)+1,T,!1,o,!0)))break}if(y){p().validPositions[m].locator=S;var P=f(t)+1;for(u=m+1;u<f()+1;u++)d=p().validPositions[u],(void 0===d||null==d.match.fn)&&u<t+(C-b)&&C++;t+=C-b,y=E(t>P?P:t,n,i,o,!0)}if(y)return!1;h(),p().validPositions=e.extend(!0,{},v)}}})}return y}function d(t,n){for(var i=p().validPositions[n],r=i.locator,o=r.length,a=t;a<n;a++)if(void 0===p().validPositions[a]&&!P(a,!0)){var s=b(a),l=s[0],c=-1;e.each(s,function(e,t){for(var n=0;n<o&&void 0!==t.locator[n]&&T(t.locator[n].toString().split(","),r[n].toString().split(","));n++)c<n&&(c=n,l=t)}),y(a,e.extend({},l,{input:l.match.placeholder||l.match.def}),!0)}}function y(t,n,i,r){if(r||a.insertMode&&void 0!==p().validPositions[t]&&void 0===i){var o,s=e.extend(!0,{},p().validPositions),l=f();for(o=t;o<=l;o++)delete p().validPositions[o];p().validPositions[t]=e.extend(!0,{},n);var c,u=!0,d=p().validPositions,g=!1,m=p().maskLength;for(o=c=t;o<=l;o++){var v=s[o];if(void 0!==v)for(var y=c;y<p().maskLength&&(null==v.match.fn&&d[o]&&(d[o].match.optionalQuantifier===!0||d[o].match.optionality===!0)||null!=v.match.fn);){if(y++,g===!1&&s[y]&&s[y].match.def===v.match.def)p().validPositions[y]=e.extend(!0,{},s[y]),p().validPositions[y].input=v.input,w(y),c=y,u=!0;else if(x(y,v.match.def)){var b=E(y,v.input,!0,!0);u=b!==!1,c=b.caret||b.insert?f():y,g=!0}else u=v.generatedInput===!0;if(p().maskLength<m&&(p().maskLength=m),u)break}if(!u)break}if(!u)return p().validPositions=e.extend(!0,{},s),h(!0),!1}else p().validPositions[t]=e.extend(!0,{},n);return h(!0),!0}function w(t){for(var n=t-1;n>-1&&!p().validPositions[n];n--);var i,r;for(n++;n<t;n++)void 0===p().validPositions[n]&&(a.jitMasking===!1||a.jitMasking>n)&&(r=b(n,v(n-1).locator,n-1).slice(),""===r[r.length-1].match.def&&r.pop(),i=m(r),i&&(i.match.def===a.radixPointDefinitionSymbol||!P(n,!0)||e.inArray(a.radixPoint,C())<n&&i.match.fn&&i.match.fn.test(M(n),p(),n,!1,a))&&(D=c(n,i.match.placeholder||(null==i.match.fn?i.match.def:""!==M(n)?M(n):C()[n]),!0),D!==!1&&(p().validPositions[D.pos||n].generatedInput=!0)))}r=r===!0;var k=n;void 0!==n.begin&&(k=le&&!l(n)?n.end:n.begin);var D=!1,j=e.extend(!0,{},p().validPositions);if(w(k),l(n)&&(z(void 0,t.keyCode.DELETE,n),k=p().p),k<p().maskLength&&(D=c(k,i,r),(!r||o===!0)&&D===!1)){var R=p().validPositions[k];if(!R||null!==R.match.fn||R.match.def!==i&&i!==a.skipOptionalPartCharacter){if((a.insertMode||void 0===p().validPositions[A(k)])&&!P(k,!0)){var L=b(k).slice();""===L[L.length-1].match.def&&L.pop();var I=m(L,!0);I&&(I=I.match.placeholder||I.match.def,c(k,I,r),p().validPositions[k].generatedInput=!0);for(var N=k+1,F=A(k);N<=F;N++)if(D=c(N,i,r),D!==!1){d(k,N),k=N;break}}}else D={caret:A(k)}}return D===!1&&a.keepStatic&&!r&&s!==!0&&(D=u(k,i,r)),D===!0&&(D={pos:k}),e.isFunction(a.postValidation)&&D!==!1&&!r&&o!==!0&&(D=!!a.postValidation(C(!0),D,a)&&D),void 0===D.pos&&(D.pos=k),D===!1&&(h(!0),p().validPositions=e.extend(!0,{},j)),D}function P(e,t){var n;if(t?(n=v(e).match,""===n.def&&(n=y(e).match)):n=y(e).match,null!=n.fn)return n.fn;if(t!==!0&&e>-1){var i=b(e);return i.length>1+(""===i[i.length-1].match.def?1:0)}return!1}function A(e,t){var n=p().maskLength;if(e>=n)return n;for(var i=e;++i<n&&(t===!0&&(y(i).match.newBlockMarker!==!0||!P(i))||t!==!0&&!P(i)););return i}function D(e,t){var n,i=e;if(i<=0)return 0;for(;--i>0&&(t===!0&&y(i).match.newBlockMarker!==!0||t!==!0&&!P(i)&&(n=b(i),n.length<2||2===n.length&&""===n[1].match.def)););return i}function O(e){return void 0===p().validPositions[e]?M(e):p().validPositions[e].input}function j(t,n,i,r,o){if(r&&e.isFunction(a.onBeforeWrite)){var s=a.onBeforeWrite(r,n,i,a);if(s){if(s.refreshFromBuffer){var l=s.refreshFromBuffer;_(l===!0?l:l.start,l.end,s.buffer||n),n=C(!0)}void 0!==i&&(i=void 0!==s.caret?s.caret:i)}}t.inputmask._valueSet(n.join("")),void 0===i||void 0!==r&&"blur"===r.type||I(t,i),o===!0&&(ue=!0,e(t).trigger("input"))}function M(e,t){if(t=t||y(e).match,void 0!==t.placeholder)return t.placeholder;if(null===t.fn){if(e>-1&&void 0===p().validPositions[e]){var n,i=b(e),r=[];if(i.length>1+(""===i[i.length-1].match.def?1:0))for(var o=0;o<i.length;o++)if(i[o].match.optionality!==!0&&i[o].match.optionalQuantifier!==!0&&(null===i[o].match.fn||void 0===n||i[o].match.fn.test(n.match.def,p(),e,!0,a)!==!1)&&(r.push(i[o]),null===i[o].match.fn&&(n=i[o]),r.length>1&&/[0-9a-bA-Z]/.test(r[0].match.def)))return a.placeholder.charAt(e%a.placeholder.length)}return t.def}return a.placeholder.charAt(e%a.placeholder.length)}function R(n,i,r,o,s,l){function c(){var e=!1,t=k().slice(g,A(g)).join("").indexOf(d);if(t!==-1&&!P(g)){e=!0;for(var n=k().slice(g,g+t),i=0;i<n.length;i++)if(" "!==n[i]){e=!1;break}}return e}var u=o.slice(),d="",g=0,m=void 0;if(h(),p().p=A(-1),!r)if(a.autoUnmask!==!0){var y=k().slice(0,A(-1)).join(""),x=u.join("").match(new RegExp("^"+t.escapeRegex(y),"g"));x&&x.length>0&&(u.splice(0,x.length*y.length),g=A(g))}else g=A(g);if(e.each(u,function(t,i){if(void 0!==i){var o=new e.Event("keypress");o.which=i.charCodeAt(0),d+=i;var s=f(void 0,!0),l=p().validPositions[s],u=v(s+1,l?l.locator.slice():void 0,s);if(!c()||r||a.autoUnmask){var y=r?t:null==u.match.fn&&u.match.optionality&&s+1<p().p?s+1:p().p;m=q.call(n,o,!0,!1,r,y),g=y+1,d=""}else m=q.call(n,o,!0,!1,!0,s+1);if(!r&&e.isFunction(a.onBeforeWrite)&&(m=a.onBeforeWrite(o,C(),m.forwardPosition,a),m&&m.refreshFromBuffer)){var x=m.refreshFromBuffer;_(x===!0?x:x.start,x.end,m.buffer),h(!0),m.caret&&(p().p=m.caret)}}}),i){var w=void 0,b=f();document.activeElement===n&&(s||m)&&(w=I(n).begin-(l===!0?1:0),m&&l!==!0&&(w<b+1||b===-1)&&(w=a.numericInput&&void 0===m.caret?D(m.forwardPosition):m.forwardPosition)),j(n,C(),w,s||new e.Event("checkval"))}}function L(t){if(t&&void 0===t.inputmask)return t.value;var n=[],i=p().validPositions;for(var r in i)i[r].match&&null!=i[r].match.fn&&n.push(i[r].input);var o=0===n.length?"":(le?n.reverse():n).join("");if(e.isFunction(a.onUnMask)){var s=(le?C().slice().reverse():C()).join("");o=a.onUnMask(s,o,a)||o}return o}function I(e,t,n,i){function r(e){if(i!==!0&&le&&"number"==typeof e&&(!a.greedy||""!==a.placeholder)){var t=C().join("").length;e=t-e}return e}var o;if("number"!=typeof t)return e.setSelectionRange?(t=e.selectionStart,n=e.selectionEnd):window.getSelection?(o=window.getSelection().getRangeAt(0),o.commonAncestorContainer.parentNode!==e&&o.commonAncestorContainer!==e||(t=o.startOffset,n=o.endOffset)):document.selection&&document.selection.createRange&&(o=document.selection.createRange(),t=0-o.duplicate().moveStart("character",-e.inputmask._valueGet().length),n=t+o.text.length),{begin:r(t),end:r(n)};t=r(t),n=r(n),n="number"==typeof n?n:t;var s=parseInt(((e.ownerDocument.defaultView||window).getComputedStyle?(e.ownerDocument.defaultView||window).getComputedStyle(e,null):e.currentStyle).fontSize)*n;if(e.scrollLeft=s>e.scrollWidth?s:0,c||a.insertMode!==!1||t!==n||n++,e.setSelectionRange)e.selectionStart=t,e.selectionEnd=n;else if(window.getSelection){if(o=document.createRange(),void 0===e.firstChild||null===e.firstChild){var l=document.createTextNode("");e.appendChild(l)}o.setStart(e.firstChild,t<e.inputmask._valueGet().length?t:e.inputmask._valueGet().length),o.setEnd(e.firstChild,n<e.inputmask._valueGet().length?n:e.inputmask._valueGet().length),o.collapse(!0);var u=window.getSelection();u.removeAllRanges(),u.addRange(o)}else e.createTextRange&&(o=e.createTextRange(),o.collapse(!0),o.moveEnd("character",n),o.moveStart("character",t),o.select())}function N(t){var n,i,r=C(),o=r.length,a=f(),s={},l=p().validPositions[a],c=void 0!==l?l.locator.slice():void 0;for(n=a+1;n<r.length;n++)i=v(n,c,n-1),c=i.locator.slice(),s[n]=e.extend(!0,{},i);var u=l&&void 0!==l.alternation?l.locator[l.alternation]:void 0;for(n=o-1;n>a&&(i=s[n],(i.match.optionality||i.match.optionalQuantifier||u&&(u!==s[n].locator[l.alternation]&&null!=i.match.fn||null===i.match.fn&&i.locator[l.alternation]&&T(i.locator[l.alternation].toString().split(","),u.toString().split(","))&&""!==b(n)[0].def))&&r[n]===M(n,i.match));n--)o--;return t?{l:o,def:s[o]?s[o].match:void 0}:o}function F(e){for(var t=N(),n=e.length-1;n>t&&!P(n);n--);return e.splice(t,n+1-t),e}function H(t){if(e.isFunction(a.isComplete))return a.isComplete(t,a);if("*"!==a.repeat){var n=!1,i=N(!0),r=D(i.l);if(void 0===i.def||i.def.newBlockMarker||i.def.optionality||i.def.optionalQuantifier){n=!0;for(var o=0;o<=r;o++){var s=v(o).match;if(null!==s.fn&&void 0===p().validPositions[o]&&s.optionality!==!0&&s.optionalQuantifier!==!0||null===s.fn&&t[o]!==M(o,s)){n=!1;break}}}return n}}function $(t){function n(t){if(e.valHooks&&(void 0===e.valHooks[t]||e.valHooks[t].inputmaskpatch!==!0)){var n=e.valHooks[t]&&e.valHooks[t].get?e.valHooks[t].get:function(e){return e.value},i=e.valHooks[t]&&e.valHooks[t].set?e.valHooks[t].set:function(e,t){return e.value=t,e};e.valHooks[t]={get:function(e){if(e.inputmask){if(e.inputmask.opts.autoUnmask)return e.inputmask.unmaskedvalue();var t=n(e);return f(void 0,void 0,e.inputmask.maskset.validPositions)!==-1||a.nullable!==!0?t:""}return n(e)},set:function(t,n){var r,o=e(t);return r=i(t,n),t.inputmask&&o.trigger("setvalue"),r},inputmaskpatch:!0}}}function i(){return this.inputmask?this.inputmask.opts.autoUnmask?this.inputmask.unmaskedvalue():f()!==-1||a.nullable!==!0?document.activeElement===this&&a.clearMaskOnLostFocus?(le?F(C().slice()).reverse():F(C().slice())).join(""):s.call(this):"":s.call(this)}function r(t){l.call(this,t),this.inputmask&&e(this).trigger("setvalue")}function o(t){he.on(t,"mouseenter",function(t){var n=e(this),i=this,r=i.inputmask._valueGet();r!==C().join("")&&n.trigger("setvalue")})}var s,l;if(!t.inputmask.__valueGet){if(Object.getOwnPropertyDescriptor){"function"!=typeof Object.getPrototypeOf&&(Object.getPrototypeOf="object"==typeof"test".__proto__?function(e){return e.__proto__}:function(e){return e.constructor.prototype});var c=Object.getPrototypeOf?Object.getOwnPropertyDescriptor(Object.getPrototypeOf(t),"value"):void 0;c&&c.get&&c.set?(s=c.get,l=c.set,Object.defineProperty(t,"value",{get:i,set:r,configurable:!0})):"INPUT"!==t.tagName&&(s=function(){return this.textContent},l=function(e){this.textContent=e},Object.defineProperty(t,"value",{get:i,set:r,configurable:!0}))}else document.__lookupGetter__&&t.__lookupGetter__("value")&&(s=t.__lookupGetter__("value"),l=t.__lookupSetter__("value"),t.__defineGetter__("value",i),t.__defineSetter__("value",r));t.inputmask.__valueGet=s,t.inputmask._valueGet=function(e){return le&&e!==!0?s.call(this.el).split("").reverse().join(""):s.call(this.el)},t.inputmask.__valueSet=l,t.inputmask._valueSet=function(e,t){l.call(this.el,null===e||void 0===e?"":t!==!0&&le?e.split("").reverse().join(""):e)},void 0===s&&(s=function(){return this.value},l=function(e){this.value=e},n(t.type),o(t))}}function z(n,i,r,o){function s(){if(a.keepStatic){for(var t=[],i=f(-1,!0),r=e.extend(!0,{},p().validPositions),o=p().validPositions[i];i>=0;i--){var s=p().validPositions[i];if(s){if(s.generatedInput!==!0&&/[0-9a-bA-Z]/.test(s.input)&&t.push(s.input),delete p().validPositions[i],void 0!==s.alternation&&s.locator[s.alternation]!==o.locator[s.alternation])break;o=s}}if(i>-1)for(p().p=A(f(-1,!0));t.length>0;){var l=new e.Event("keypress");l.which=t.pop().charCodeAt(0),q.call(n,l,!0,!1,!1,p().p)}else p().validPositions=e.extend(!0,{},r)}}if((a.numericInput||le)&&(i===t.keyCode.BACKSPACE?i=t.keyCode.DELETE:i===t.keyCode.DELETE&&(i=t.keyCode.BACKSPACE),le)){var l=r.end;r.end=r.begin,r.begin=l}i===t.keyCode.BACKSPACE&&(r.end-r.begin<1||a.insertMode===!1)?(r.begin=D(r.begin),void 0===p().validPositions[r.begin]||p().validPositions[r.begin].input!==a.groupSeparator&&p().validPositions[r.begin].input!==a.radixPoint||r.begin--):i===t.keyCode.DELETE&&r.begin===r.end&&(r.end=P(r.end,!0)?r.end+1:A(r.end)+1,void 0===p().validPositions[r.begin]||p().validPositions[r.begin].input!==a.groupSeparator&&p().validPositions[r.begin].input!==a.radixPoint||r.end++),g(r.begin,r.end,!1,o),o!==!0&&s();var c=f(r.begin,!0);c<r.begin?p().p=A(c):o!==!0&&(p().p=r.begin)}function B(i){var r=this,o=e(r),s=i.keyCode,l=I(r);if(s===t.keyCode.BACKSPACE||s===t.keyCode.DELETE||d&&s===t.keyCode.BACKSPACE_SAFARI||i.ctrlKey&&s===t.keyCode.X&&!n("cut"))i.preventDefault(),z(r,s,l),j(r,C(!0),p().p,i,r.inputmask._valueGet()!==C().join("")),r.inputmask._valueGet()===k().join("")?o.trigger("cleared"):H(C())===!0&&o.trigger("complete"),a.showTooltip&&(r.title=a.tooltip||p().mask);else if(s===t.keyCode.END||s===t.keyCode.PAGE_DOWN){i.preventDefault();var c=A(f());a.insertMode||c!==p().maskLength||i.shiftKey||c--,I(r,i.shiftKey?l.begin:c,c,!0)}else s===t.keyCode.HOME&&!i.shiftKey||s===t.keyCode.PAGE_UP?(i.preventDefault(),I(r,0,i.shiftKey?l.begin:0,!0)):(a.undoOnEscape&&s===t.keyCode.ESCAPE||90===s&&i.ctrlKey)&&i.altKey!==!0?(R(r,!0,!1,ie.split("")),o.trigger("click")):s!==t.keyCode.INSERT||i.shiftKey||i.ctrlKey?a.tabThrough===!0&&s===t.keyCode.TAB?(i.shiftKey===!0?(null===y(l.begin).match.fn&&(l.begin=A(l.begin)),l.end=D(l.begin,!0),l.begin=D(l.end,!0)):(l.begin=A(l.begin,!0),l.end=A(l.begin,!0),l.end<p().maskLength&&l.end--),l.begin<p().maskLength&&(i.preventDefault(),I(r,l.begin,l.end))):a.insertMode!==!1||i.shiftKey||(s===t.keyCode.RIGHT?setTimeout(function(){var e=I(r);I(r,e.begin)},0):s===t.keyCode.LEFT&&setTimeout(function(){var e=I(r);I(r,le?e.begin+1:e.begin-1)},0)):(a.insertMode=!a.insertMode,I(r,a.insertMode||l.begin!==p().maskLength?l.begin:l.begin-1));a.onKeyDown.call(this,i,C(),I(r).begin,a),de=e.inArray(s,a.ignorables)!==-1;
}function q(n,i,r,o,s){var l=this,c=e(l),u=n.which||n.charCode||n.keyCode;if(!(i===!0||n.ctrlKey&&n.altKey)&&(n.ctrlKey||n.metaKey||de))return u===t.keyCode.ENTER&&ie!==C().join("")&&(ie=C().join(""),setTimeout(function(){c.trigger("change")},0)),!0;if(u){46===u&&n.shiftKey===!1&&","===a.radixPoint&&(u=44);var d,f=i?{begin:s,end:s}:I(l),g=String.fromCharCode(u);p().writeOutBuffer=!0;var m=E(f,g,o);if(m!==!1&&(h(!0),d=void 0!==m.caret?m.caret:i?m.pos+1:A(m.pos),p().p=d),r!==!1){var v=this;if(setTimeout(function(){a.onKeyValidation.call(v,u,m,a)},0),p().writeOutBuffer&&m!==!1){var y=C();j(l,y,a.numericInput&&void 0===m.caret?D(d):d,n,i!==!0),i!==!0&&setTimeout(function(){H(y)===!0&&c.trigger("complete")},0)}}if(a.showTooltip&&(l.title=a.tooltip||p().mask),n.preventDefault(),i)return m.forwardPosition=d,m}}function W(t){var n,i=this,r=t.originalEvent||t,o=e(i),s=i.inputmask._valueGet(!0),l=I(i);le&&(n=l.end,l.end=l.begin,l.begin=n);var c=s.substr(0,l.begin),u=s.substr(l.end,s.length);if(c===(le?k().reverse():k()).slice(0,l.begin).join("")&&(c=""),u===(le?k().reverse():k()).slice(l.end).join("")&&(u=""),le&&(n=c,c=u,u=n),window.clipboardData&&window.clipboardData.getData)s=c+window.clipboardData.getData("Text")+u;else{if(!r.clipboardData||!r.clipboardData.getData)return!0;s=c+r.clipboardData.getData("text/plain")+u}var d=s;if(e.isFunction(a.onBeforePaste)){if(d=a.onBeforePaste(s,a),d===!1)return t.preventDefault();d||(d=s)}return R(i,!1,!1,le?d.split("").reverse():d.toString().split("")),j(i,C(),A(f()),t,ie!==C().join("")),H(C())===!0&&o.trigger("complete"),t.preventDefault()}function U(n){var i=this,r=i.inputmask._valueGet();if(C().join("")!==r){var o=I(i);if(r=r.replace(new RegExp("("+t.escapeRegex(k().join(""))+")*"),""),u){var a=r.replace(C().join(""),"");if(1===a.length){var s=new e.Event("keypress");return s.which=a.charCodeAt(0),q.call(i,s,!0,!0,!1,p().validPositions[o.begin-1]?o.begin:o.begin-1),!1}}if(o.begin>r.length&&(I(i,r.length),o=I(i)),C().length-r.length!==1||r.charAt(o.begin)===C()[o.begin]||r.charAt(o.begin+1)===C()[o.begin]||P(o.begin)){for(var l=f()+1,c=C().slice(l).join("");null===r.match(t.escapeRegex(c)+"$");)c=c.slice(1);r=r.replace(c,""),r=r.split(""),R(i,!0,!1,r,n,o.begin<l),H(C())===!0&&e(i).trigger("complete")}else n.keyCode=t.keyCode.BACKSPACE,B.call(i,n);n.preventDefault()}}function G(t){var n=this,i=n.inputmask._valueGet();R(n,!0,!1,(e.isFunction(a.onBeforeMask)?a.onBeforeMask(i,a)||i:i).split("")),ie=C().join(""),(a.clearMaskOnLostFocus||a.clearIncomplete)&&n.inputmask._valueGet()===k().join("")&&n.inputmask._valueSet("")}function V(e){var t=this,n=t.inputmask._valueGet();a.showMaskOnFocus&&(!a.showMaskOnHover||a.showMaskOnHover&&""===n)?t.inputmask._valueGet()!==C().join("")&&j(t,C(),A(f())):pe===!1&&I(t,A(f())),a.positionCaretOnTab===!0&&setTimeout(function(){Q.apply(this,[e])},0),ie=C().join("")}function K(e){var t=this;if(pe=!1,a.clearMaskOnLostFocus&&document.activeElement!==t){var n=C().slice(),i=t.inputmask._valueGet();i!==t.getAttribute("placeholder")&&""!==i&&(f()===-1&&i===k().join("")?n=[]:F(n),j(t,n))}}function Q(t){function n(t){if(""!==a.radixPoint){var n=p().validPositions;if(void 0===n[t]||n[t].input===M(t)){if(t<A(-1))return!0;var i=e.inArray(a.radixPoint,C());if(i!==-1){for(var r in n)if(i<r&&n[r].input!==M(r))return!1;return!0}}}return!1}var i=this;setTimeout(function(){if(document.activeElement===i){var t=I(i);if(t.begin===t.end)switch(a.positionCaretOnClick){case"none":break;case"radixFocus":if(n(t.begin)){var r=e.inArray(a.radixPoint,C().join(""));I(i,a.numericInput?A(r):r);break}default:var o=t.begin,s=f(o,!0),l=A(s);if(o<l)I(i,P(o)||P(o-1)?o:A(o));else{var c=M(l);(""!==c&&C()[l]!==c&&y(l).match.optionalQuantifier!==!0||!P(l,!0)&&y(l).match.def===c)&&(l=A(l)),I(i,l)}}}},0)}function X(e){var t=this;setTimeout(function(){I(t,0,A(f()))},0)}function Y(n){var i=this,r=e(i),o=I(i),s=n.originalEvent||n,l=window.clipboardData||s.clipboardData,c=le?C().slice(o.end,o.begin):C().slice(o.begin,o.end);l.setData("text",le?c.reverse().join(""):c.join("")),document.execCommand&&document.execCommand("copy"),z(i,t.keyCode.DELETE,o),j(i,C(),p().p,n,ie!==C().join("")),i.inputmask._valueGet()===k().join("")&&r.trigger("cleared"),a.showTooltip&&(i.title=a.tooltip||p().mask)}function Z(t){var n=e(this),i=this;if(i.inputmask){var r=i.inputmask._valueGet(),o=C().slice();ie!==o.join("")&&setTimeout(function(){n.trigger("change"),ie=o.join("")},0),""!==r&&(a.clearMaskOnLostFocus&&(f()===-1&&r===k().join("")?o=[]:F(o)),H(o)===!1&&(setTimeout(function(){n.trigger("incomplete")},0),a.clearIncomplete&&(h(),o=a.clearMaskOnLostFocus?[]:k().slice())),j(i,o,void 0,t))}}function J(e){var t=this;pe=!0,document.activeElement!==t&&a.showMaskOnHover&&t.inputmask._valueGet()!==C().join("")&&j(t,C())}function ee(e){ie!==C().join("")&&oe.trigger("change"),a.clearMaskOnLostFocus&&f()===-1&&re.inputmask._valueGet&&re.inputmask._valueGet()===k().join("")&&re.inputmask._valueSet(""),a.removeMaskOnSubmit&&(re.inputmask._valueSet(re.inputmask.unmaskedvalue(),!0),setTimeout(function(){j(re,C())},0))}function te(e){setTimeout(function(){oe.trigger("setvalue")},0)}function ne(t){if(re=t,oe=e(re),a.showTooltip&&(re.title=a.tooltip||p().mask),("rtl"===re.dir||a.rightAlign)&&(re.style.textAlign="right"),("rtl"===re.dir||a.numericInput)&&(re.dir="ltr",re.removeAttribute("dir"),re.inputmask.isRTL=!0,le=!0),he.off(re),$(re),i(re,a)&&(he.on(re,"submit",ee),he.on(re,"reset",te),he.on(re,"mouseenter",J),he.on(re,"blur",Z),he.on(re,"focus",V),he.on(re,"mouseleave",K),he.on(re,"click",Q),he.on(re,"dblclick",X),he.on(re,"paste",W),he.on(re,"dragdrop",W),he.on(re,"drop",W),he.on(re,"cut",Y),he.on(re,"complete",a.oncomplete),he.on(re,"incomplete",a.onincomplete),he.on(re,"cleared",a.oncleared),a.inputEventOnly!==!0&&(he.on(re,"keydown",B),he.on(re,"keypress",q)),he.on(re,"input",U)),he.on(re,"setvalue",G),k(),""!==re.inputmask._valueGet()||a.clearMaskOnLostFocus===!1||document.activeElement===re){var n=e.isFunction(a.onBeforeMask)?a.onBeforeMask(re.inputmask._valueGet(),a)||re.inputmask._valueGet():re.inputmask._valueGet();R(re,!0,!1,n.split(""));var r=C().slice();ie=r.join(""),H(r)===!1&&a.clearIncomplete&&h(),a.clearMaskOnLostFocus&&document.activeElement!==re&&(f()===-1?r=[]:F(r)),j(re,r),document.activeElement===re&&I(re,A(f()))}}var ie,re,oe,ae,se,le=!1,ce=!1,ue=!1,de=!1,pe=!0,he={on:function(n,i,r){var o=function(n){if(void 0===this.inputmask&&"FORM"!==this.nodeName){var i=e.data(this,"_inputmask_opts");i?new t(i).mask(this):he.off(this)}else{if("setvalue"===n.type||!(this.disabled||this.readOnly&&!("keydown"===n.type&&n.ctrlKey&&67===n.keyCode||a.tabThrough===!1&&n.keyCode===t.keyCode.TAB))){switch(n.type){case"input":if(ue===!0)return ue=!1,n.preventDefault();break;case"keydown":ce=!1,ue=!1;break;case"keypress":if(ce===!0)return n.preventDefault();ce=!0;break;case"click":if(u){var o=this;return setTimeout(function(){r.apply(o,arguments)},0),!1}}var s=r.apply(this,arguments);return s===!1&&(n.preventDefault(),n.stopPropagation()),s}n.preventDefault()}};n.inputmask.events[i]=n.inputmask.events[i]||[],n.inputmask.events[i].push(o),e.inArray(i,["submit","reset"])!==-1?null!=n.form&&e(n.form).on(i,o):e(n).on(i,o)},off:function(t,n){if(t.inputmask&&t.inputmask.events){var i;n?(i=[],i[n]=t.inputmask.events[n]):i=t.inputmask.events,e.each(i,function(n,i){for(;i.length>0;){var r=i.pop();e.inArray(n,["submit","reset"])!==-1?null!=t.form&&e(t.form).off(n,r):e(t).off(n,r)}delete t.inputmask.events[n]})}}};if(void 0!==r)switch(r.action){case"isComplete":return re=r.el,H(C());case"unmaskedvalue":return re=r.el,void 0!==re&&void 0!==re.inputmask?(o=re.inputmask.maskset,a=re.inputmask.opts,le=re.inputmask.isRTL):(se=r.value,a.numericInput&&(le=!0),se=(e.isFunction(a.onBeforeMask)?a.onBeforeMask(se,a)||se:se).split(""),R(void 0,!1,!1,le?se.reverse():se),e.isFunction(a.onBeforeWrite)&&a.onBeforeWrite(void 0,C(),0,a)),L(re);case"mask":re=r.el,o=re.inputmask.maskset,a=re.inputmask.opts,le=re.inputmask.isRTL,ne(re);break;case"format":return a.numericInput&&(le=!0),se=(e.isFunction(a.onBeforeMask)?a.onBeforeMask(r.value,a)||r.value:r.value).split(""),R(void 0,!1,!1,le?se.reverse():se),e.isFunction(a.onBeforeWrite)&&a.onBeforeWrite(void 0,C(),0,a),r.metadata?{value:le?C().slice().reverse().join(""):C().join(""),metadata:s({action:"getmetadata"},o,a)}:le?C().slice().reverse().join(""):C().join("");case"isValid":a.numericInput&&(le=!0),r.value?(se=r.value.split(""),R(void 0,!1,!0,le?se.reverse():se)):r.value=C().join("");for(var fe=C(),ge=N(),me=fe.length-1;me>ge&&!P(me);me--);return fe.splice(ge,me+1-ge),H(fe)&&r.value===C().join("");case"getemptymask":return k().join("");case"remove":re=r.el,oe=e(re),o=re.inputmask.maskset,a=re.inputmask.opts,re.inputmask._valueSet(L(re)),he.off(re);var ve;Object.getOwnPropertyDescriptor&&Object.getPrototypeOf?(ve=Object.getOwnPropertyDescriptor(Object.getPrototypeOf(re),"value"),ve&&re.inputmask.__valueGet&&Object.defineProperty(re,"value",{get:re.inputmask.__valueGet,set:re.inputmask.__valueSet,configurable:!0})):document.__lookupGetter__&&re.__lookupGetter__("value")&&re.inputmask.__valueGet&&(re.__defineGetter__("value",re.inputmask.__valueGet),re.__defineSetter__("value",re.inputmask.__valueSet)),re.inputmask=void 0;break;case"getmetadata":if(e.isArray(o.metadata)){for(var ye,xe=f(void 0,!0),we=xe;we>=0;we--)if(p().validPositions[we]&&void 0!==p().validPositions[we].alternation){ye=p().validPositions[we].alternation;break}return void 0!==ye?o.metadata[p().validPositions[we].locator[ye]]:[]}return o.metadata}}t.prototype={defaults:{placeholder:"_",optionalmarker:{start:"[",end:"]"},quantifiermarker:{start:"{",end:"}"},groupmarker:{start:"(",end:")"},alternatormarker:"|",escapeChar:"\\",mask:null,oncomplete:e.noop,onincomplete:e.noop,oncleared:e.noop,repeat:0,greedy:!0,autoUnmask:!1,removeMaskOnSubmit:!1,clearMaskOnLostFocus:!0,insertMode:!0,clearIncomplete:!1,aliases:{},alias:null,onKeyDown:e.noop,onBeforeMask:null,onBeforePaste:function(t,n){return e.isFunction(n.onBeforeMask)?n.onBeforeMask(t,n):t},onBeforeWrite:null,onUnMask:null,showMaskOnFocus:!0,showMaskOnHover:!0,onKeyValidation:e.noop,skipOptionalPartCharacter:" ",showTooltip:!1,tooltip:void 0,numericInput:!1,rightAlign:!1,undoOnEscape:!0,radixPoint:"",radixPointDefinitionSymbol:void 0,groupSeparator:"",keepStatic:null,positionCaretOnTab:!0,tabThrough:!1,supportsInputType:["text","tel","password"],definitions:{9:{validator:"[0-9]",cardinality:1,definitionSymbol:"*"},a:{validator:"[A-Za-zА-яЁёÀ-ÿµ]",cardinality:1,definitionSymbol:"*"},"*":{validator:"[0-9A-Za-zА-яЁёÀ-ÿµ]",cardinality:1}},ignorables:[8,9,13,19,27,33,34,35,36,37,38,39,40,45,46,93,112,113,114,115,116,117,118,119,120,121,122,123],isComplete:null,canClearPosition:e.noop,postValidation:null,staticDefinitionSymbol:void 0,jitMasking:!1,nullable:!0,inputEventOnly:!1,positionCaretOnClick:"lvp",casing:null},masksCache:{},mask:function(n){var i=this;return"string"==typeof n&&(n=document.getElementById(n)||document.querySelectorAll(n)),n=n.nodeName?[n]:n,e.each(n,function(n,r){var l=e.extend(!0,{},i.opts);o(r,l,e.extend(!0,{},i.userOptions));var c=a(l,i.noMasksCache);void 0!==c&&(void 0!==r.inputmask&&r.inputmask.remove(),r.inputmask=new t,r.inputmask.opts=l,r.inputmask.noMasksCache=i.noMasksCache,r.inputmask.userOptions=e.extend(!0,{},i.userOptions),r.inputmask.el=r,r.inputmask.maskset=c,r.inputmask.isRTL=!1,e.data(r,"_inputmask_opts",l),s({action:"mask",el:r}))}),n&&n[0]?n[0].inputmask||this:this},option:function(t,n){return"string"==typeof t?this.opts[t]:"object"==typeof t?(e.extend(this.userOptions,t),this.el&&n!==!0&&this.mask(this.el),this):void 0},unmaskedvalue:function(e){return s({action:"unmaskedvalue",el:this.el,value:e},this.el&&this.el.inputmask?this.el.inputmask.maskset:a(this.opts,this.noMasksCache),this.opts)},remove:function(){if(this.el)return s({action:"remove",el:this.el}),this.el.inputmask=void 0,this.el},getemptymask:function(){return s({action:"getemptymask"},this.maskset||a(this.opts,this.noMasksCache),this.opts)},hasMaskedValue:function(){return!this.opts.autoUnmask},isComplete:function(){return s({action:"isComplete",el:this.el},this.maskset||a(this.opts,this.noMasksCache),this.opts)},getmetadata:function(){return s({action:"getmetadata"},this.maskset||a(this.opts,this.noMasksCache),this.opts)},isValid:function(e){return s({action:"isValid",value:e},this.maskset||a(this.opts,this.noMasksCache),this.opts)},format:function(e,t){return s({action:"format",value:e,metadata:t},this.maskset||a(this.opts,this.noMasksCache),this.opts)}},t.extendDefaults=function(n){e.extend(!0,t.prototype.defaults,n)},t.extendDefinitions=function(n){e.extend(!0,t.prototype.defaults.definitions,n)},t.extendAliases=function(n){e.extend(!0,t.prototype.defaults.aliases,n)},t.format=function(e,n,i){return t(n).format(e,i)},t.unmask=function(e,n){return t(n).unmaskedvalue(e)},t.isValid=function(e,n){return t(n).isValid(e)},t.remove=function(t){e.each(t,function(e,t){t.inputmask&&t.inputmask.remove()})},t.escapeRegex=function(e){var t=["/",".","*","+","?","|","(",")","[","]","{","}","\\","$","^"];return e.replace(new RegExp("(\\"+t.join("|\\")+")","gim"),"\\$1")},t.keyCode={ALT:18,BACKSPACE:8,BACKSPACE_SAFARI:127,CAPS_LOCK:20,COMMA:188,COMMAND:91,COMMAND_LEFT:91,COMMAND_RIGHT:93,CONTROL:17,DELETE:46,DOWN:40,END:35,ENTER:13,ESCAPE:27,HOME:36,INSERT:45,LEFT:37,MENU:93,NUMPAD_ADD:107,NUMPAD_DECIMAL:110,NUMPAD_DIVIDE:111,NUMPAD_ENTER:108,NUMPAD_MULTIPLY:106,NUMPAD_SUBTRACT:109,PAGE_DOWN:34,PAGE_UP:33,PERIOD:190,RIGHT:39,SHIFT:16,SPACE:32,TAB:9,UP:38,WINDOWS:91,X:88};var l=navigator.userAgent,c=/mobile/i.test(l),u=/iemobile/i.test(l),d=/iphone/i.test(l)&&!u;return window.Inputmask=t,t}(jQuery),function(e,t){return void 0===e.fn.inputmask&&(e.fn.inputmask=function(n,i){var r,o=this[0];if(void 0===i&&(i={}),"string"==typeof n)switch(n){case"unmaskedvalue":return o&&o.inputmask?o.inputmask.unmaskedvalue():e(o).val();case"remove":return this.each(function(){this.inputmask&&this.inputmask.remove()});case"getemptymask":return o&&o.inputmask?o.inputmask.getemptymask():"";case"hasMaskedValue":return!(!o||!o.inputmask)&&o.inputmask.hasMaskedValue();case"isComplete":return!o||!o.inputmask||o.inputmask.isComplete();case"getmetadata":return o&&o.inputmask?o.inputmask.getmetadata():void 0;case"setvalue":e(o).val(i),o&&void 0===o.inputmask&&e(o).triggerHandler("setvalue");break;case"option":if("string"!=typeof i)return this.each(function(){if(void 0!==this.inputmask)return this.inputmask.option(i)});if(o&&void 0!==o.inputmask)return o.inputmask.option(i);break;default:return i.alias=n,r=new t(i),this.each(function(){r.mask(this)})}else{if("object"==typeof n)return r=new t(n),void 0===n.mask&&void 0===n.alias?this.each(function(){return void 0!==this.inputmask?this.inputmask.option(n):void r.mask(this)}):this.each(function(){r.mask(this)});if(void 0===n)return this.each(function(){r=new t(i),r.mask(this)})}}),e.fn.inputmask}(jQuery,Inputmask),function(e,t){return t.extendDefinitions({h:{validator:"[01][0-9]|2[0-3]",cardinality:2,prevalidator:[{validator:"[0-2]",cardinality:1}]},s:{validator:"[0-5][0-9]",cardinality:2,prevalidator:[{validator:"[0-5]",cardinality:1}]},d:{validator:"0[1-9]|[12][0-9]|3[01]",cardinality:2,prevalidator:[{validator:"[0-3]",cardinality:1}]},m:{validator:"0[1-9]|1[012]",cardinality:2,prevalidator:[{validator:"[01]",cardinality:1}]},y:{validator:"(19|20)\\d{2}",cardinality:4,prevalidator:[{validator:"[12]",cardinality:1},{validator:"(19|20)",cardinality:2},{validator:"(19|20)\\d",cardinality:3}]}}),t.extendAliases({"dd/mm/yyyy":{mask:"1/2/y",placeholder:"dd/mm/yyyy",regex:{val1pre:new RegExp("[0-3]"),val1:new RegExp("0[1-9]|[12][0-9]|3[01]"),val2pre:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[1-9]|[12][0-9]|3[01])"+n+"[01])")},val2:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[1-9]|[12][0-9])"+n+"(0[1-9]|1[012]))|(30"+n+"(0[13-9]|1[012]))|(31"+n+"(0[13578]|1[02]))")}},leapday:"29/02/",separator:"/",yearrange:{minyear:1900,maxyear:2099},isInYearRange:function(e,t,n){if(isNaN(e))return!1;var i=parseInt(e.concat(t.toString().slice(e.length))),r=parseInt(e.concat(n.toString().slice(e.length)));return!isNaN(i)&&t<=i&&i<=n||!isNaN(r)&&t<=r&&r<=n},determinebaseyear:function(e,t,n){var i=(new Date).getFullYear();if(e>i)return e;if(t<i){for(var r=t.toString().slice(0,2),o=t.toString().slice(2,4);t<r+n;)r--;var a=r+o;return e>a?e:a}if(e<=i&&i<=t){for(var s=i.toString().slice(0,2);t<s+n;)s--;var l=s+n;return l<e?e:l}return i},onKeyDown:function(n,i,r,o){var a=e(this);if(n.ctrlKey&&n.keyCode===t.keyCode.RIGHT){var s=new Date;a.val(s.getDate().toString()+(s.getMonth()+1).toString()+s.getFullYear().toString()),a.trigger("setvalue")}},getFrontValue:function(e,t,n){for(var i=0,r=0,o=0;o<e.length&&"2"!==e.charAt(o);o++){var a=n.definitions[e.charAt(o)];a?(i+=r,r=a.cardinality):r++}return t.join("").substr(i,r)},definitions:{1:{validator:function(e,t,n,i,r){var o=r.regex.val1.test(e);return i||o||e.charAt(1)!==r.separator&&"-./".indexOf(e.charAt(1))===-1||!(o=r.regex.val1.test("0"+e.charAt(0)))?o:(t.buffer[n-1]="0",{refreshFromBuffer:{start:n-1,end:n},pos:n,c:e.charAt(0)})},cardinality:2,prevalidator:[{validator:function(e,t,n,i,r){var o=e;isNaN(t.buffer[n+1])||(o+=t.buffer[n+1]);var a=1===o.length?r.regex.val1pre.test(o):r.regex.val1.test(o);if(!i&&!a){if(a=r.regex.val1.test(e+"0"))return t.buffer[n]=e,t.buffer[++n]="0",{pos:n,c:"0"};if(a=r.regex.val1.test("0"+e))return t.buffer[n]="0",n++,{pos:n}}return a},cardinality:1}]},2:{validator:function(e,t,n,i,r){var o=r.getFrontValue(t.mask,t.buffer,r);o.indexOf(r.placeholder[0])!==-1&&(o="01"+r.separator);var a=r.regex.val2(r.separator).test(o+e);if(!i&&!a&&(e.charAt(1)===r.separator||"-./".indexOf(e.charAt(1))!==-1)&&(a=r.regex.val2(r.separator).test(o+"0"+e.charAt(0))))return t.buffer[n-1]="0",{refreshFromBuffer:{start:n-1,end:n},pos:n,c:e.charAt(0)};if(r.mask.indexOf("2")===r.mask.length-1&&a){var s=t.buffer.join("").substr(4,4)+e;if(s!==r.leapday)return!0;var l=parseInt(t.buffer.join("").substr(0,4),10);return l%4===0&&(l%100!==0||l%400===0)}return a},cardinality:2,prevalidator:[{validator:function(e,t,n,i,r){isNaN(t.buffer[n+1])||(e+=t.buffer[n+1]);var o=r.getFrontValue(t.mask,t.buffer,r);o.indexOf(r.placeholder[0])!==-1&&(o="01"+r.separator);var a=1===e.length?r.regex.val2pre(r.separator).test(o+e):r.regex.val2(r.separator).test(o+e);return i||a||!(a=r.regex.val2(r.separator).test(o+"0"+e))?a:(t.buffer[n]="0",n++,{pos:n})},cardinality:1}]},y:{validator:function(e,t,n,i,r){if(r.isInYearRange(e,r.yearrange.minyear,r.yearrange.maxyear)){var o=t.buffer.join("").substr(0,6);if(o!==r.leapday)return!0;var a=parseInt(e,10);return a%4===0&&(a%100!==0||a%400===0)}return!1},cardinality:4,prevalidator:[{validator:function(e,t,n,i,r){var o=r.isInYearRange(e,r.yearrange.minyear,r.yearrange.maxyear);if(!i&&!o){var a=r.determinebaseyear(r.yearrange.minyear,r.yearrange.maxyear,e+"0").toString().slice(0,1);if(o=r.isInYearRange(a+e,r.yearrange.minyear,r.yearrange.maxyear))return t.buffer[n++]=a.charAt(0),{pos:n};if(a=r.determinebaseyear(r.yearrange.minyear,r.yearrange.maxyear,e+"0").toString().slice(0,2),o=r.isInYearRange(a+e,r.yearrange.minyear,r.yearrange.maxyear))return t.buffer[n++]=a.charAt(0),t.buffer[n++]=a.charAt(1),{pos:n}}return o},cardinality:1},{validator:function(e,t,n,i,r){var o=r.isInYearRange(e,r.yearrange.minyear,r.yearrange.maxyear);if(!i&&!o){var a=r.determinebaseyear(r.yearrange.minyear,r.yearrange.maxyear,e).toString().slice(0,2);if(o=r.isInYearRange(e[0]+a[1]+e[1],r.yearrange.minyear,r.yearrange.maxyear))return t.buffer[n++]=a.charAt(1),{pos:n};if(a=r.determinebaseyear(r.yearrange.minyear,r.yearrange.maxyear,e).toString().slice(0,2),r.isInYearRange(a+e,r.yearrange.minyear,r.yearrange.maxyear)){var s=t.buffer.join("").substr(0,6);if(s!==r.leapday)o=!0;else{var l=parseInt(e,10);o=l%4===0&&(l%100!==0||l%400===0)}}else o=!1;if(o)return t.buffer[n-1]=a.charAt(0),t.buffer[n++]=a.charAt(1),t.buffer[n++]=e.charAt(0),{refreshFromBuffer:{start:n-3,end:n},pos:n}}return o},cardinality:2},{validator:function(e,t,n,i,r){return r.isInYearRange(e,r.yearrange.minyear,r.yearrange.maxyear)},cardinality:3}]}},insertMode:!1,autoUnmask:!1},"mm/dd/yyyy":{placeholder:"mm/dd/yyyy",alias:"dd/mm/yyyy",regex:{val2pre:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[13-9]|1[012])"+n+"[0-3])|(02"+n+"[0-2])")},val2:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[1-9]|1[012])"+n+"(0[1-9]|[12][0-9]))|((0[13-9]|1[012])"+n+"30)|((0[13578]|1[02])"+n+"31)")},val1pre:new RegExp("[01]"),val1:new RegExp("0[1-9]|1[012]")},leapday:"02/29/",onKeyDown:function(n,i,r,o){var a=e(this);if(n.ctrlKey&&n.keyCode===t.keyCode.RIGHT){var s=new Date;a.val((s.getMonth()+1).toString()+s.getDate().toString()+s.getFullYear().toString()),a.trigger("setvalue")}}},"yyyy/mm/dd":{mask:"y/1/2",placeholder:"yyyy/mm/dd",alias:"mm/dd/yyyy",leapday:"/02/29",onKeyDown:function(n,i,r,o){var a=e(this);if(n.ctrlKey&&n.keyCode===t.keyCode.RIGHT){var s=new Date;a.val(s.getFullYear().toString()+(s.getMonth()+1).toString()+s.getDate().toString()),a.trigger("setvalue")}}},"dd.mm.yyyy":{mask:"1.2.y",placeholder:"dd.mm.yyyy",leapday:"29.02.",separator:".",alias:"dd/mm/yyyy"},"dd-mm-yyyy":{mask:"1-2-y",placeholder:"dd-mm-yyyy",leapday:"29-02-",separator:"-",alias:"dd/mm/yyyy"},"mm.dd.yyyy":{mask:"1.2.y",placeholder:"mm.dd.yyyy",leapday:"02.29.",separator:".",alias:"mm/dd/yyyy"},"mm-dd-yyyy":{mask:"1-2-y",placeholder:"mm-dd-yyyy",leapday:"02-29-",separator:"-",alias:"mm/dd/yyyy"},"yyyy.mm.dd":{mask:"y.1.2",placeholder:"yyyy.mm.dd",leapday:".02.29",separator:".",alias:"yyyy/mm/dd"},"yyyy-mm-dd":{mask:"y-1-2",placeholder:"yyyy-mm-dd",leapday:"-02-29",separator:"-",alias:"yyyy/mm/dd"},datetime:{mask:"1/2/y h:s",placeholder:"dd/mm/yyyy hh:mm",alias:"dd/mm/yyyy",regex:{hrspre:new RegExp("[012]"),hrs24:new RegExp("2[0-4]|1[3-9]"),hrs:new RegExp("[01][0-9]|2[0-4]"),ampm:new RegExp("^[a|p|A|P][m|M]"),mspre:new RegExp("[0-5]"),ms:new RegExp("[0-5][0-9]")},timeseparator:":",hourFormat:"24",definitions:{h:{validator:function(e,t,n,i,r){if("24"===r.hourFormat&&24===parseInt(e,10))return t.buffer[n-1]="0",t.buffer[n]="0",{refreshFromBuffer:{start:n-1,end:n},c:"0"};var o=r.regex.hrs.test(e);if(!i&&!o&&(e.charAt(1)===r.timeseparator||"-.:".indexOf(e.charAt(1))!==-1)&&(o=r.regex.hrs.test("0"+e.charAt(0))))return t.buffer[n-1]="0",t.buffer[n]=e.charAt(0),n++,{refreshFromBuffer:{start:n-2,end:n},pos:n,c:r.timeseparator};if(o&&"24"!==r.hourFormat&&r.regex.hrs24.test(e)){var a=parseInt(e,10);return 24===a?(t.buffer[n+5]="a",t.buffer[n+6]="m"):(t.buffer[n+5]="p",t.buffer[n+6]="m"),a-=12,a<10?(t.buffer[n]=a.toString(),t.buffer[n-1]="0"):(t.buffer[n]=a.toString().charAt(1),t.buffer[n-1]=a.toString().charAt(0)),{refreshFromBuffer:{start:n-1,end:n+6},c:t.buffer[n]}}return o},cardinality:2,prevalidator:[{validator:function(e,t,n,i,r){var o=r.regex.hrspre.test(e);return i||o||!(o=r.regex.hrs.test("0"+e))?o:(t.buffer[n]="0",n++,{pos:n})},cardinality:1}]},s:{validator:"[0-5][0-9]",cardinality:2,prevalidator:[{validator:function(e,t,n,i,r){var o=r.regex.mspre.test(e);return i||o||!(o=r.regex.ms.test("0"+e))?o:(t.buffer[n]="0",n++,{pos:n})},cardinality:1}]},t:{validator:function(e,t,n,i,r){return r.regex.ampm.test(e+"m")},casing:"lower",cardinality:1}},insertMode:!1,autoUnmask:!1},datetime12:{mask:"1/2/y h:s t\\m",placeholder:"dd/mm/yyyy hh:mm xm",alias:"datetime",hourFormat:"12"},"mm/dd/yyyy hh:mm xm":{mask:"1/2/y h:s t\\m",placeholder:"mm/dd/yyyy hh:mm xm",alias:"datetime12",regex:{val2pre:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[13-9]|1[012])"+n+"[0-3])|(02"+n+"[0-2])")},val2:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[1-9]|1[012])"+n+"(0[1-9]|[12][0-9]))|((0[13-9]|1[012])"+n+"30)|((0[13578]|1[02])"+n+"31)")},val1pre:new RegExp("[01]"),val1:new RegExp("0[1-9]|1[012]")},leapday:"02/29/",onKeyDown:function(n,i,r,o){var a=e(this);if(n.ctrlKey&&n.keyCode===t.keyCode.RIGHT){var s=new Date;a.val((s.getMonth()+1).toString()+s.getDate().toString()+s.getFullYear().toString()),a.trigger("setvalue")}}},"hh:mm t":{mask:"h:s t\\m",placeholder:"hh:mm xm",alias:"datetime",hourFormat:"12"},"h:s t":{mask:"h:s t\\m",placeholder:"hh:mm xm",alias:"datetime",hourFormat:"12"},"hh:mm:ss":{mask:"h:s:s",placeholder:"hh:mm:ss",alias:"datetime",autoUnmask:!1},"hh:mm":{mask:"h:s",placeholder:"hh:mm",alias:"datetime",autoUnmask:!1},date:{alias:"dd/mm/yyyy"},"mm/yyyy":{mask:"1/y",placeholder:"mm/yyyy",leapday:"donotuse",separator:"/",alias:"mm/dd/yyyy"},shamsi:{regex:{val2pre:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[1-9]|1[012])"+n+"[0-3])")},val2:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[1-9]|1[012])"+n+"(0[1-9]|[12][0-9]))|((0[1-9]|1[012])"+n+"30)|((0[1-6])"+n+"31)")},val1pre:new RegExp("[01]"),val1:new RegExp("0[1-9]|1[012]")},yearrange:{minyear:1300,maxyear:1499},mask:"y/1/2",leapday:"/12/30",placeholder:"yyyy/mm/dd",alias:"mm/dd/yyyy",clearIncomplete:!0}}),t}(jQuery,Inputmask),function(e,t){return t.extendDefinitions({A:{validator:"[A-Za-zА-яЁёÀ-ÿµ]",cardinality:1,casing:"upper"},"&":{validator:"[0-9A-Za-zА-яЁёÀ-ÿµ]",cardinality:1,casing:"upper"},"#":{validator:"[0-9A-Fa-f]",cardinality:1,casing:"upper"}}),t.extendAliases({url:{definitions:{i:{validator:".",cardinality:1}},mask:"(\\http://)|(\\http\\s://)|(ftp://)|(ftp\\s://)i{+}",insertMode:!1,autoUnmask:!1},ip:{mask:"i[i[i]].i[i[i]].i[i[i]].i[i[i]]",definitions:{i:{validator:function(e,t,n,i,r){return n-1>-1&&"."!==t.buffer[n-1]?(e=t.buffer[n-1]+e,e=n-2>-1&&"."!==t.buffer[n-2]?t.buffer[n-2]+e:"0"+e):e="00"+e,new RegExp("25[0-5]|2[0-4][0-9]|[01][0-9][0-9]").test(e)},cardinality:1}},onUnMask:function(e,t,n){return e}},email:{mask:"*{1,64}[.*{1,64}][.*{1,64}][.*{1,63}]@-{1,63}.-{1,63}[.-{1,63}][.-{1,63}]",greedy:!1,onBeforePaste:function(e,t){return e=e.toLowerCase(),e.replace("mailto:","")},definitions:{"*":{validator:"[0-9A-Za-z!#$%&'*+/=?^_`{|}~-]",cardinality:1,casing:"lower"},"-":{validator:"[0-9A-Za-z-]",cardinality:1,casing:"lower"}},onUnMask:function(e,t,n){return e}},mac:{mask:"##:##:##:##:##:##"},vin:{mask:"V{13}9{4}",definitions:{V:{validator:"[A-HJ-NPR-Za-hj-npr-z\\d]",cardinality:1,casing:"upper"}},clearIncomplete:!0,autoUnmask:!0}}),t}(jQuery,Inputmask),function(e,t){return t.extendAliases({numeric:{mask:function(e){function n(t){for(var n="",i=0;i<t.length;i++)n+=e.definitions[t.charAt(i)]||e.optionalmarker.start===t.charAt(i)||e.optionalmarker.end===t.charAt(i)||e.quantifiermarker.start===t.charAt(i)||e.quantifiermarker.end===t.charAt(i)||e.groupmarker.start===t.charAt(i)||e.groupmarker.end===t.charAt(i)||e.alternatormarker===t.charAt(i)?"\\"+t.charAt(i):t.charAt(i);return n}if(0!==e.repeat&&isNaN(e.integerDigits)&&(e.integerDigits=e.repeat),e.repeat=0,e.groupSeparator===e.radixPoint&&("."===e.radixPoint?e.groupSeparator=",":","===e.radixPoint?e.groupSeparator=".":e.groupSeparator="")," "===e.groupSeparator&&(e.skipOptionalPartCharacter=void 0),e.autoGroup=e.autoGroup&&""!==e.groupSeparator,e.autoGroup&&("string"==typeof e.groupSize&&isFinite(e.groupSize)&&(e.groupSize=parseInt(e.groupSize)),isFinite(e.integerDigits))){var i=Math.floor(e.integerDigits/e.groupSize),r=e.integerDigits%e.groupSize;e.integerDigits=parseInt(e.integerDigits)+(0===r?i-1:i),e.integerDigits<1&&(e.integerDigits="*")}e.placeholder.length>1&&(e.placeholder=e.placeholder.charAt(0)),"radixFocus"===e.positionCaretOnClick&&""===e.placeholder&&e.integerOptional===!1&&(e.positionCaretOnClick="lvp"),e.definitions[";"]=e.definitions["~"],e.definitions[";"].definitionSymbol="~",e.numericInput===!0&&(e.positionCaretOnClick="radixFocus"===e.positionCaretOnClick?"lvp":e.positionCaretOnClick,e.digitsOptional=!1,isNaN(e.digits)&&(e.digits=2),e.decimalProtect=!1);var o=n(e.prefix);if(o+="[+]",o+=e.integerOptional===!0?"~{1,"+e.integerDigits+"}":"~{"+e.integerDigits+"}",void 0!==e.digits){e.decimalProtect&&(e.radixPointDefinitionSymbol=":");var a=e.digits.toString().split(",");isFinite(a[0]&&a[1]&&isFinite(a[1]))?o+=(e.decimalProtect?":":e.radixPoint)+";{"+e.digits+"}":(isNaN(e.digits)||parseInt(e.digits)>0)&&(o+=e.digitsOptional?"["+(e.decimalProtect?":":e.radixPoint)+";{1,"+e.digits+"}]":(e.decimalProtect?":":e.radixPoint)+";{"+e.digits+"}")}return o+="[-]",o+=n(e.suffix),e.greedy=!1,null!==e.min&&(e.min=e.min.toString().replace(new RegExp(t.escapeRegex(e.groupSeparator),"g"),""),","===e.radixPoint&&(e.min=e.min.replace(e.radixPoint,"."))),null!==e.max&&(e.max=e.max.toString().replace(new RegExp(t.escapeRegex(e.groupSeparator),"g"),""),","===e.radixPoint&&(e.max=e.max.replace(e.radixPoint,"."))),o},placeholder:"",greedy:!1,digits:"*",digitsOptional:!0,radixPoint:".",positionCaretOnClick:"radixFocus",groupSize:3,groupSeparator:"",autoGroup:!1,allowPlus:!0,allowMinus:!0,negationSymbol:{front:"-",back:""},integerDigits:"+",integerOptional:!0,prefix:"",suffix:"",rightAlign:!0,decimalProtect:!0,min:null,max:null,step:1,insertMode:!0,autoUnmask:!1,unmaskAsNumber:!1,postFormat:function(n,i,r){r.numericInput===!0&&(n=n.reverse(),isFinite(i)&&(i=n.join("").length-i-1));var o,a;i=i>=n.length?n.length-1:i<r.prefix.length?r.prefix.length:i;var s=n[i],l=n.slice();s===r.groupSeparator&&(l.splice(i--,1),s=l[i]),l[i]="!";var c=l.join(""),u=c;if(c=c.replace(new RegExp(t.escapeRegex(r.suffix)+"$"),""),c=c.replace(new RegExp("^"+t.escapeRegex(r.prefix)),""),c.length>0&&r.autoGroup||c.indexOf(r.groupSeparator)!==-1){var d=t.escapeRegex(r.groupSeparator);c=c.replace(new RegExp(d,"g"),"");var p=c.split(s===r.radixPoint?"!":r.radixPoint);if(c=""===r.radixPoint?c:p[0],s!==r.negationSymbol.front&&(c=c.replace("!","?")),c.length>r.groupSize)for(var h=new RegExp("([-+]?[\\d?]+)([\\d?]{"+r.groupSize+"})");h.test(c)&&""!==r.groupSeparator;)c=c.replace(h,"$1"+r.groupSeparator+"$2"),c=c.replace(r.groupSeparator+r.groupSeparator,r.groupSeparator);c=c.replace("?","!"),""!==r.radixPoint&&p.length>1&&(c+=(s===r.radixPoint?"!":r.radixPoint)+p[1])}c=r.prefix+c+r.suffix;var f=u!==c;if(f)for(n.length=c.length,o=0,a=c.length;o<a;o++)n[o]=c.charAt(o);var g=e.inArray("!",c);return n[g]=s,g=r.numericInput&&isFinite(i)?n.join("").length-g-1:g,r.numericInput&&(n=n.reverse(),e.inArray(r.radixPoint,n)<g&&n.join("").length-r.suffix.length!==g&&(g-=1)),{pos:g,refreshFromBuffer:f,buffer:n}},onBeforeWrite:function(n,i,r,o){var a;if(n&&("blur"===n.type||"checkval"===n.type||"keydown"===n.type)){var s=o.numericInput?i.slice().reverse().join(""):i.join(""),l=s.replace(o.prefix,"");l=l.replace(o.suffix,""),l=l.replace(new RegExp(t.escapeRegex(o.groupSeparator),"g"),""),","===o.radixPoint&&(l=l.replace(o.radixPoint,"."));var c=l.match(new RegExp("[-"+t.escapeRegex(o.negationSymbol.front)+"]","g"));if(c=null!==c&&1===c.length,l=l.replace(new RegExp("[-"+t.escapeRegex(o.negationSymbol.front)+"]","g"),""),l=l.replace(new RegExp(t.escapeRegex(o.negationSymbol.back)+"$"),""),isNaN(o.placeholder)&&(l=l.replace(new RegExp(t.escapeRegex(o.placeholder),"g"),"")),l=l===o.negationSymbol.front?l+"0":l,""!==l&&isFinite(l)){var u=parseFloat(l),d=c?u*-1:u;if(null!==o.min&&isFinite(o.min)&&d<parseFloat(o.min)?(u=Math.abs(o.min),c=o.min<0,s=void 0):null!==o.max&&isFinite(o.max)&&d>parseFloat(o.max)&&(u=Math.abs(o.max),c=o.max<0,s=void 0),l=u.toString().replace(".",o.radixPoint).split(""),isFinite(o.digits)){var p=e.inArray(o.radixPoint,l),h=e.inArray(o.radixPoint,s);p===-1&&(l.push(o.radixPoint),p=l.length-1);for(var f=1;f<=o.digits;f++)o.digitsOptional||void 0!==l[p+f]&&l[p+f]!==o.placeholder.charAt(0)?h!==-1&&void 0!==s[h+f]&&(l[p+f]=l[p+f]||s[h+f]):l[p+f]="0";l[l.length-1]===o.radixPoint&&delete l[l.length-1]}if(u.toString()!==l&&u.toString()+"."!==l||c)return!c||0===u&&"blur"===n.type||(l.unshift(o.negationSymbol.front),l.push(o.negationSymbol.back)),l=(o.prefix+l.join("")).split(""),o.numericInput&&(l=l.reverse()),a=o.postFormat(l,o.numericInput?r:r-1,o),
a.buffer&&(a.refreshFromBuffer=a.buffer.join("")!==i.join("")),a}}if(o.autoGroup)return a=o.postFormat(i,o.numericInput?r:r-1,o),a.caret=r<=o.prefix.length?a.pos:a.pos+1,a},regex:{integerPart:function(e){return new RegExp("["+t.escapeRegex(e.negationSymbol.front)+"+]?\\d+")},integerNPart:function(e){return new RegExp("[\\d"+t.escapeRegex(e.groupSeparator)+t.escapeRegex(e.placeholder.charAt(0))+"]+")}},signHandler:function(e,t,n,i,r){if(!i&&r.allowMinus&&"-"===e||r.allowPlus&&"+"===e){var o=t.buffer.join("").match(r.regex.integerPart(r));if(o&&o[0].length>0)return t.buffer[o.index]===("-"===e?"+":r.negationSymbol.front)?"-"===e?""!==r.negationSymbol.back?{pos:o.index,c:r.negationSymbol.front,remove:o.index,caret:n,insert:{pos:t.buffer.length-r.suffix.length-1,c:r.negationSymbol.back}}:{pos:o.index,c:r.negationSymbol.front,remove:o.index,caret:n}:""!==r.negationSymbol.back?{pos:o.index,c:"+",remove:[o.index,t.buffer.length-r.suffix.length-1],caret:n}:{pos:o.index,c:"+",remove:o.index,caret:n}:t.buffer[o.index]===("-"===e?r.negationSymbol.front:"+")?"-"===e&&""!==r.negationSymbol.back?{remove:[o.index,t.buffer.length-r.suffix.length-1],caret:n-1}:{remove:o.index,caret:n-1}:"-"===e?""!==r.negationSymbol.back?{pos:o.index,c:r.negationSymbol.front,caret:n+1,insert:{pos:t.buffer.length-r.suffix.length,c:r.negationSymbol.back}}:{pos:o.index,c:r.negationSymbol.front,caret:n+1}:{pos:o.index,c:e,caret:n+1}}return!1},radixHandler:function(t,n,i,r,o){if(!r&&o.numericInput!==!0&&t===o.radixPoint&&void 0!==o.digits&&(isNaN(o.digits)||parseInt(o.digits)>0)){var a=e.inArray(o.radixPoint,n.buffer),s=n.buffer.join("").match(o.regex.integerPart(o));if(a!==-1&&n.validPositions[a])return n.validPositions[a-1]?{caret:a+1}:{pos:s.index,c:s[0],caret:a+1};if(!s||"0"===s[0]&&s.index+1!==i)return n.buffer[s?s.index:i]="0",{pos:(s?s.index:i)+1,c:o.radixPoint}}return!1},leadingZeroHandler:function(t,n,i,r,o,a){if(!r){var s=n.buffer.slice("");if(s.splice(0,o.prefix.length),s.splice(s.length-o.suffix.length,o.suffix.length),o.numericInput===!0){var s=s.reverse(),l=s[0];if("0"===l&&void 0===n.validPositions[i-1])return{pos:i,remove:s.length-1}}else{i-=o.prefix.length;var c=e.inArray(o.radixPoint,s),u=s.slice(0,c!==-1?c:void 0).join("").match(o.regex.integerNPart(o));if(u&&(c===-1||i<=c)){var d=c===-1?0:parseInt(s.slice(c+1).join(""));if(0===u[0].indexOf(""!==o.placeholder?o.placeholder.charAt(0):"0")&&(u.index+1===i||a!==!0&&0===d))return n.buffer.splice(u.index+o.prefix.length,1),{pos:u.index+o.prefix.length,remove:u.index+o.prefix.length};if("0"===t&&i<=u.index&&u[0]!==o.groupSeparator)return!1}}}return!0},definitions:{"~":{validator:function(n,i,r,o,a,s){var l=a.signHandler(n,i,r,o,a);if(!l&&(l=a.radixHandler(n,i,r,o,a),!l&&(l=o?new RegExp("[0-9"+t.escapeRegex(a.groupSeparator)+"]").test(n):new RegExp("[0-9]").test(n),l===!0&&(l=a.leadingZeroHandler(n,i,r,o,a,s),l===!0)))){var c=e.inArray(a.radixPoint,i.buffer);l=c!==-1&&(a.digitsOptional===!1||i.validPositions[r])&&a.numericInput!==!0&&r>c&&!o?{pos:r,remove:r}:{pos:r}}return l},cardinality:1},"+":{validator:function(e,t,n,i,r){var o=r.signHandler(e,t,n,i,r);return!o&&(i&&r.allowMinus&&e===r.negationSymbol.front||r.allowMinus&&"-"===e||r.allowPlus&&"+"===e)&&(o=!(!i&&"-"===e)||(""!==r.negationSymbol.back?{pos:n,c:"-"===e?r.negationSymbol.front:"+",caret:n+1,insert:{pos:t.buffer.length,c:r.negationSymbol.back}}:{pos:n,c:"-"===e?r.negationSymbol.front:"+",caret:n+1})),o},cardinality:1,placeholder:""},"-":{validator:function(e,t,n,i,r){var o=r.signHandler(e,t,n,i,r);return!o&&i&&r.allowMinus&&e===r.negationSymbol.back&&(o=!0),o},cardinality:1,placeholder:""},":":{validator:function(e,n,i,r,o){var a=o.signHandler(e,n,i,r,o);if(!a){var s="["+t.escapeRegex(o.radixPoint)+"]";a=new RegExp(s).test(e),a&&n.validPositions[i]&&n.validPositions[i].match.placeholder===o.radixPoint&&(a={caret:i+1})}return a?{c:o.radixPoint}:a},cardinality:1,placeholder:function(e){return e.radixPoint}}},onUnMask:function(e,n,i){if(""===n&&i.nullable===!0)return n;var r=e.replace(i.prefix,"");return r=r.replace(i.suffix,""),r=r.replace(new RegExp(t.escapeRegex(i.groupSeparator),"g"),""),i.unmaskAsNumber?(""!==i.radixPoint&&r.indexOf(i.radixPoint)!==-1&&(r=r.replace(t.escapeRegex.call(this,i.radixPoint),".")),Number(r)):r},isComplete:function(e,n){var i=e.join(""),r=e.slice();if(n.postFormat(r,0,n),r.join("")!==i)return!1;var o=i.replace(n.prefix,"");return o=o.replace(n.suffix,""),o=o.replace(new RegExp(t.escapeRegex(n.groupSeparator),"g"),""),","===n.radixPoint&&(o=o.replace(t.escapeRegex(n.radixPoint),".")),isFinite(o)},onBeforeMask:function(e,n){if(n.numericInput===!0&&(e=e.split("").reverse().join("")),""!==n.radixPoint&&isFinite(e))e=e.toString().replace(".",n.radixPoint);else{var i=e.match(/,/g),r=e.match(/\./g);r&&i?r.length>i.length?(e=e.replace(/\./g,""),e=e.replace(",",n.radixPoint)):i.length>r.length?(e=e.replace(/,/g,""),e=e.replace(".",n.radixPoint)):e=e.indexOf(".")<e.indexOf(",")?e.replace(/\./g,""):e=e.replace(/,/g,""):e=e.replace(new RegExp(t.escapeRegex(n.groupSeparator),"g"),"")}if(0===n.digits&&(e.indexOf(".")!==-1?e=e.substring(0,e.indexOf(".")):e.indexOf(",")!==-1&&(e=e.substring(0,e.indexOf(",")))),""!==n.radixPoint&&isFinite(n.digits)&&e.indexOf(n.radixPoint)!==-1){var o=e.split(n.radixPoint),a=o[1].match(new RegExp("\\d*"))[0];if(parseInt(n.digits)<a.toString().length){var s=Math.pow(10,parseInt(n.digits));e=e.replace(t.escapeRegex(n.radixPoint),"."),e=Math.round(parseFloat(e)*s)/s,e=e.toString().replace(".",n.radixPoint)}}return n.numericInput===!0&&(e=e.split("").reverse().join("")),e.toString()},canClearPosition:function(e,t,n,i,r){var o=e.validPositions[t].input,a=o!==r.radixPoint||null!==e.validPositions[t].match.fn&&r.decimalProtect===!1||isFinite(o)||t===n||o===r.groupSeparator||o===r.negationSymbol.front||o===r.negationSymbol.back;return a},onKeyDown:function(n,i,r,o){var a=e(this);if(n.ctrlKey)switch(n.keyCode){case t.keyCode.UP:a.val(parseFloat(this.inputmask.unmaskedvalue())+parseInt(o.step)),a.trigger("setvalue");break;case t.keyCode.DOWN:a.val(parseFloat(this.inputmask.unmaskedvalue())-parseInt(o.step)),a.trigger("setvalue")}}},currency:{prefix:"$ ",groupSeparator:",",alias:"numeric",placeholder:"0",autoGroup:!0,digits:2,digitsOptional:!1,clearMaskOnLostFocus:!1},decimal:{alias:"numeric"},integer:{alias:"numeric",digits:0,radixPoint:""},percentage:{alias:"numeric",digits:2,radixPoint:".",placeholder:"0",autoGroup:!1,min:0,max:100,suffix:" %",allowPlus:!1,allowMinus:!1}}),t}(jQuery,Inputmask),function(e,t){return t.extendAliases({abstractphone:{countrycode:"",phoneCodes:[],mask:function(e){e.definitions={"#":e.definitions[9]};var t=e.phoneCodes.sort(function(e,t){var n=(e.mask||e).replace(/#/g,"9").replace(/[\+\(\)#-]/g,""),i=(t.mask||t).replace(/#/g,"9").replace(/[\+\(\)#-]/g,""),r=(e.mask||e).split("#")[0],o=(t.mask||t).split("#")[0];return 0===o.indexOf(r)?-1:0===r.indexOf(o)?1:n.localeCompare(i)});return t},keepStatic:!0,onBeforeMask:function(e,t){var n=e.replace(/^0{1,2}/,"").replace(/[\s]/g,"");return(n.indexOf(t.countrycode)>1||n.indexOf(t.countrycode)===-1)&&(n="+"+t.countrycode+n),n},onUnMask:function(e,t,n){return t}}}),t}(jQuery,Inputmask),function(e,t){return t.extendAliases({Regex:{mask:"r",greedy:!1,repeat:"*",regex:null,regexTokens:null,tokenizer:/\[\^?]?(?:[^\\\]]+|\\[\S\s]?)*]?|\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9][0-9]*|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|c[A-Za-z]|[\S\s]?)|\((?:\?[:=!]?)?|(?:[?*+]|\{[0-9]+(?:,[0-9]*)?\})\??|[^.?*+^${[()|\\]+|./g,quantifierFilter:/[0-9]+[^,]/,isComplete:function(e,t){return new RegExp(t.regex).test(e.join(""))},definitions:{r:{validator:function(t,n,i,r,o){function a(e,t){this.matches=[],this.isGroup=e||!1,this.isQuantifier=t||!1,this.quantifier={min:1,max:1},this.repeaterPart=void 0}function s(){var e,t,n=new a,i=[];for(o.regexTokens=[];e=o.tokenizer.exec(o.regex);)switch(t=e[0],t.charAt(0)){case"(":i.push(new a((!0)));break;case")":u=i.pop(),i.length>0?i[i.length-1].matches.push(u):n.matches.push(u);break;case"{":case"+":case"*":var r=new a((!1),(!0));t=t.replace(/[{}]/g,"");var s=t.split(","),l=isNaN(s[0])?s[0]:parseInt(s[0]),c=1===s.length?l:isNaN(s[1])?s[1]:parseInt(s[1]);if(r.quantifier={min:l,max:c},i.length>0){var d=i[i.length-1].matches;e=d.pop(),e.isGroup||(u=new a((!0)),u.matches.push(e),e=u),d.push(e),d.push(r)}else e=n.matches.pop(),e.isGroup||(u=new a((!0)),u.matches.push(e),e=u),n.matches.push(e),n.matches.push(r);break;default:i.length>0?i[i.length-1].matches.push(t):n.matches.push(t)}n.matches.length>0&&o.regexTokens.push(n)}function l(t,n){var i=!1;n&&(p+="(",f++);for(var r=0;r<t.matches.length;r++){var o=t.matches[r];if(o.isGroup===!0)i=l(o,!0);else if(o.isQuantifier===!0){var a=e.inArray(o,t.matches),s=t.matches[a-1],u=p;if(isNaN(o.quantifier.max)){for(;o.repeaterPart&&o.repeaterPart!==p&&o.repeaterPart.length>p.length&&!(i=l(s,!0)););i=i||l(s,!0),i&&(o.repeaterPart=p),p=u+o.quantifier.max}else{for(var d=0,h=o.quantifier.max-1;d<h&&!(i=l(s,!0));d++);p=u+"{"+o.quantifier.min+","+o.quantifier.max+"}"}}else if(void 0!==o.matches)for(var g=0;g<o.length&&!(i=l(o[g],n));g++);else{var m;if("["==o.charAt(0)){m=p,m+=o;for(var v=0;v<f;v++)m+=")";var y=new RegExp("^("+m+")$");i=y.test(c)}else for(var x=0,w=o.length;x<w;x++)if("\\"!==o.charAt(x)){m=p,m+=o.substr(0,x+1),m=m.replace(/\|$/,"");for(var v=0;v<f;v++)m+=")";var y=new RegExp("^("+m+")$");if(i=y.test(c))break}p+=o}if(i)break}return n&&(p+=")",f--),i}var c,u,d=n.buffer.slice(),p="",h=!1,f=0;null===o.regexTokens&&s(),d.splice(i,0,t),c=d.join("");for(var g=0;g<o.regexTokens.length;g++){var m=o.regexTokens[g];if(h=l(m,m.isGroup))break}return h},cardinality:1}}}}),t}(jQuery,Inputmask),function(e,t){"use strict";"function"==typeof define&&define.amd?define(["jquery"],function(n){return t(n,e,e.document,e.Math)}):"object"==typeof exports&&exports?module.exports=t(require("jquery"),e,e.document,e.Math):t(jQuery,e,e.document,e.Math)}("undefined"!=typeof window?window:this,function(e,t,n,i,r){"use strict";var o="fullpage-wrapper",a="."+o,s="fp-scrollable",l="."+s,c="fp-responsive",u="fp-notransition",d="fp-destroyed",p="fp-enabled",h="fp-viewing",f="active",g="."+f,m="fp-completely",v="."+m,y=".section",x="fp-section",w="."+x,b=w+g,k=w+":first",C=w+":last",_="fp-tableCell",S="."+_,T="fp-auto-height",E="fp-normal-scroll",P="fp-nav",A="#"+P,D="fp-tooltip",O="."+D,j="fp-show-active",M=".slide",R="fp-slide",L="."+R,I=L+g,N="fp-slides",F="."+N,H="fp-slidesContainer",$="."+H,z="fp-table",B="fp-slidesNav",q="."+B,W=q+" a",U="fp-controlArrow",G="."+U,V="fp-prev",K="."+V,Q=U+" "+V,X=G+K,Y="fp-next",Z="."+Y,J=U+" "+Y,ee=G+Z,te=e(t),ne=e(n),ie={scrollbars:!0,mouseWheel:!0,hideScrollbars:!1,fadeScrollbars:!1,disableMouse:!0,interactiveScrollbars:!0};e.fn.fullpage=function(s){function l(t,n){rn("autoScrolling",t,n);var i=e(b);s.autoScrolling&&!s.scrollBar?(sn.css({overflow:"hidden",height:"100%"}),U(An.recordHistory,"internal"),mn.css({"-ms-touch-action":"none","touch-action":"none"}),i.length&&Zt(i.position().top)):(sn.css({overflow:"visible",height:"initial"}),U(!1,"internal"),mn.css({"-ms-touch-action":"","touch-action":""}),Zt(0),i.length&&sn.scrollTop(i.position().top))}function U(e,t){rn("recordHistory",e,t)}function K(e,t){rn("scrollingSpeed",e,t)}function Y(e,t){rn("fitToSection",e,t)}function Z(e){s.lockAnchors=e}function oe(e){e?(Wt(),Ut()):(qt(),Gt())}function ae(t,n){"undefined"!=typeof n?(n=n.replace(/ /g,"").split(","),e.each(n,function(e,n){en(t,n,"m")})):t?(oe(!0),Vt()):(oe(!1),Kt())}function se(t,n){"undefined"!=typeof n?(n=n.replace(/ /g,"").split(","),e.each(n,function(e,n){en(t,n,"k")})):s.keyboardScrolling=t}function le(){var t=e(b).prev(w);t.length||!s.loopTop&&!s.continuousVertical||(t=e(w).last()),t.length&&Ge(t,null,!0)}function ce(){var t=e(b).next(w);t.length||!s.loopBottom&&!s.continuousVertical||(t=e(w).first()),t.length&&Ge(t,null,!1)}function ue(e,t){K(0,"internal"),de(e,t),K(An.scrollingSpeed,"internal")}function de(e,t){var n=Mt(e);"undefined"!=typeof t?Lt(e,t):n.length>0&&Ge(n)}function pe(e){qe("right",e)}function he(e){qe("left",e)}function fe(t){if(!mn.hasClass(d)){yn=!0,vn=te.height(),e(w).each(function(){var t=e(this).find(F),n=e(this).find(L);s.verticalCentered&&e(this).find(S).css("height",Ot(e(this))+"px"),e(this).css("height",vn+"px"),s.scrollOverflow&&(n.length?n.each(function(){At(e(this))}):At(e(this))),n.length>1&&mt(t,t.find(I))});var n=e(b),i=n.index(w);i&&ue(i+1),yn=!1,e.isFunction(s.afterResize)&&t&&s.afterResize.call(mn),e.isFunction(s.afterReBuild)&&!t&&s.afterReBuild.call(mn)}}function ge(t){var n=ln.hasClass(c);t?n||(l(!1,"internal"),Y(!1,"internal"),e(A).hide(),ln.addClass(c),e.isFunction(s.afterResponsive)&&s.afterResponsive.call(mn,t)):n&&(l(An.autoScrolling,"internal"),Y(An.autoScrolling,"internal"),e(A).show(),ln.removeClass(c),e.isFunction(s.afterResponsive)&&s.afterResponsive.call(mn,t))}function me(){return{options:s,internals:{getXmovement:Pt,removeAnimation:Ct,getTransforms:Jt,lazyLoad:Ze,addAnimation:kt,performHorizontalMove:yt,silentLandscapeScroll:Yt,keepSlidesPosition:We,silentScroll:Zt,styleSlides:be}}}function ve(){s.css3&&(s.css3=Bt()),s.scrollBar=s.scrollBar||s.hybrid,xe(),we(),ae(!0),l(s.autoScrolling,"internal");var t=e(b).find(I);t.length&&(0!==e(b).index(w)||0===e(b).index(w)&&0!==t.index())&&Yt(t),bt(),zt(),"complete"===n.readyState&&it(),te.on("load",it)}function ye(){te.on("scroll",je).on("hashchange",rt).blur(dt).resize(wt),ne.keydown(ot).keyup(st).on("click touchstart",A+" a",pt).on("click touchstart",W,ht).on("click",O,at),e(w).on("click touchstart",G,ut),s.normalScrollElements&&(ne.on("mouseenter",s.normalScrollElements,function(){oe(!1)}),ne.on("mouseleave",s.normalScrollElements,function(){oe(!0)}))}function xe(){var t=mn.find(s.sectionSelector);s.anchors.length||(s.anchors=t.filter("[data-anchor]").map(function(){return e(this).data("anchor").toString()}).get()),s.navigationTooltips.length||(s.navigationTooltips=t.filter("[data-tooltip]").map(function(){return e(this).data("tooltip").toString()}).get())}function we(){mn.css({height:"100%",position:"relative"}),mn.addClass(o),e("html").addClass(p),vn=te.height(),mn.removeClass(d),_e(),e(w).each(function(t){var n=e(this),i=n.find(L),r=i.length;ke(n,t),Ce(n,t),r>0?be(n,i,r):s.verticalCentered&&Dt(n)}),s.fixedElements&&s.css3&&e(s.fixedElements).appendTo(ln),s.navigation&&Te(),Pe(),s.scrollOverflow?("complete"===n.readyState&&Ee(),te.on("load",Ee)):Oe()}function be(t,n,i){var r=100*i,o=100/i;n.wrapAll('<div class="'+H+'" />'),n.parent().wrap('<div class="'+N+'" />'),t.find($).css("width",r+"%"),i>1&&(s.controlArrows&&Se(t),s.slidesNavigation&&Nt(t,i)),n.each(function(t){e(this).css("width",o+"%"),s.verticalCentered&&Dt(e(this))});var a=t.find(I);a.length&&(0!==e(b).index(w)||0===e(b).index(w)&&0!==a.index())?Yt(a):n.eq(0).addClass(f)}function ke(t,n){n||0!==e(b).length||t.addClass(f),t.css("height",vn+"px"),s.paddingTop&&t.css("padding-top",s.paddingTop),s.paddingBottom&&t.css("padding-bottom",s.paddingBottom),"undefined"!=typeof s.sectionsColor[n]&&t.css("background-color",s.sectionsColor[n]),"undefined"!=typeof s.anchors[n]&&t.attr("data-anchor",s.anchors[n])}function Ce(t,n){"undefined"!=typeof s.anchors[n]&&t.hasClass(f)&&Tt(s.anchors[n],n),s.menu&&s.css3&&e(s.menu).closest(a).length&&e(s.menu).appendTo(ln)}function _e(){mn.find(s.sectionSelector).addClass(x),mn.find(s.slideSelector).addClass(R)}function Se(e){e.find(F).after('<div class="'+Q+'"></div><div class="'+J+'"></div>'),"#fff"!=s.controlArrowColor&&(e.find(ee).css("border-color","transparent transparent transparent "+s.controlArrowColor),e.find(X).css("border-color","transparent "+s.controlArrowColor+" transparent transparent")),s.loopHorizontal||e.find(X).hide()}function Te(){ln.append('<div id="'+P+'"><ul></ul></div>');var t=e(A);t.addClass(function(){return s.showActiveTooltip?j+" "+s.navigationPosition:s.navigationPosition});for(var n=0;n<e(w).length;n++){var i="";s.anchors.length&&(i=s.anchors[n]);var r='<li><a href="#'+i+'"><span></span></a>',o=s.navigationTooltips[n];"undefined"!=typeof o&&""!==o&&(r+='<div class="'+D+" "+s.navigationPosition+'">'+o+"</div>"),r+="</li>",t.find("ul").append(r)}e(A).css("margin-top","-"+e(A).height()/2+"px"),e(A).find("li").eq(e(b).index(w)).find("a").addClass(f)}function Ee(){e(w).each(function(){var t=e(this).find(L);t.length?t.each(function(){At(e(this))}):At(e(this))}),Oe()}function Pe(){mn.find('iframe[src*="youtube.com/embed/"]').each(function(){Ae(e(this),"enablejsapi=1")})}function Ae(e,t){var n=e.attr("src");e.attr("src",n+De(n)+t)}function De(e){return/\?/.test(e)?"&":"?"}function Oe(){var t=e(b);t.addClass(m),s.scrollOverflowHandler.afterRender&&s.scrollOverflowHandler.afterRender(t),Ze(t),Je(t),e.isFunction(s.afterLoad)&&s.afterLoad.call(t,t.data("anchor"),t.index(w)+1),e.isFunction(s.afterRender)&&s.afterRender.call(mn)}function je(){var t;if(!s.autoScrolling||s.scrollBar){var i=te.scrollTop(),r=Re(i),o=0,a=i+te.height()/2,l=ln.height()-te.height()===i,c=n.querySelectorAll(w);if(l)o=c.length-1;else if(i)for(var u=0;u<c.length;++u){var d=c[u];d.offsetTop<=a&&(o=u)}else o=0;if(Me(r)&&(e(b).hasClass(m)||e(b).addClass(m).siblings().removeClass(m)),t=e(c).eq(o),!t.hasClass(f)){Dn=!0;var p,h,g=e(b),v=g.index(w)+1,y=Et(t),x=t.data("anchor"),k=t.index(w)+1,C=t.find(I);C.length&&(h=C.data("anchor"),p=C.index()),wn&&(t.addClass(f).siblings().removeClass(f),e.isFunction(s.onLeave)&&s.onLeave.call(g,v,k,y),e.isFunction(s.afterLoad)&&s.afterLoad.call(t,x,k),tt(g),Ze(t),Je(t),Tt(x,k-1),s.anchors.length&&(un=x),Ft(p,h,x,k)),clearTimeout(Tn),Tn=setTimeout(function(){Dn=!1},100)}s.fitToSection&&(clearTimeout(En),En=setTimeout(function(){wn&&s.fitToSection&&(e(b).is(t)&&(yn=!0),Ge(e(b)),yn=!1)},s.fitToSectionDelay))}}function Me(t){var n=e(b).position().top,i=n+te.height();return"up"==t?i>=te.scrollTop()+te.height():n<=te.scrollTop()}function Re(e){var t=e>On?"down":"up";return On=e,Nn=e,t}function Le(e,t){if(kn.m[e]){var n="down"===e?"bottom":"top",i="down"===e?ce:le;if(t.length>0){if(!s.scrollOverflowHandler.isScrolled(n,t))return!0;i()}else i()}}function Ie(e){var t=e.originalEvent;s.autoScrolling&&He(t)&&e.preventDefault()}function Ne(t){var n=t.originalEvent,r=e(n.target).closest(w);if(!Fe(t.target)&&He(n)){s.autoScrolling&&t.preventDefault();var o=s.scrollOverflowHandler.scrollable(r);if(wn&&!hn){var a=Xt(n);Rn=a.y,Ln=a.x,r.find(F).length&&i.abs(Mn-Ln)>i.abs(jn-Rn)?i.abs(Mn-Ln)>te.outerWidth()/100*s.touchSensitivity&&(Mn>Ln?kn.m.right&&pe(r):kn.m.left&&he(r)):s.autoScrolling&&i.abs(jn-Rn)>te.height()/100*s.touchSensitivity&&(jn>Rn?Le("down",o):Rn>jn&&Le("up",o))}}}function Fe(t,n){n=n||0;var i=e(t).parent();return!!(n<s.normalScrollElementTouchThreshold&&i.is(s.normalScrollElements))||n!=s.normalScrollElementTouchThreshold&&Fe(i,++n)}function He(e){return"undefined"==typeof e.pointerType||"mouse"!=e.pointerType}function $e(e){var t=e.originalEvent;if(s.fitToSection&&sn.stop(),He(t)){var n=Xt(t);jn=n.y,Mn=n.x}}function ze(e,t){for(var n=0,r=e.slice(i.max(e.length-t,1)),o=0;o<r.length;o++)n+=r[o];return i.ceil(n/t)}function Be(n){var r=(new Date).getTime(),o=e(v).hasClass(E);if(s.autoScrolling&&!pn&&!o){n=n||t.event;var a=n.wheelDelta||-n.deltaY||-n.detail,l=i.max(-1,i.min(1,a)),c="undefined"!=typeof n.wheelDeltaX||"undefined"!=typeof n.deltaX,u=i.abs(n.wheelDeltaX)<i.abs(n.wheelDelta)||i.abs(n.deltaX)<i.abs(n.deltaY)||!c;bn.length>149&&bn.shift(),bn.push(i.abs(a)),s.scrollBar&&(n.preventDefault?n.preventDefault():n.returnValue=!1);var d=e(b),p=s.scrollOverflowHandler.scrollable(d),h=r-In;if(In=r,h>200&&(bn=[]),wn){var f=ze(bn,10),g=ze(bn,70),m=f>=g;m&&u&&(l<0?Le("down",p):Le("up",p))}return!1}s.fitToSection&&sn.stop()}function qe(t,n){var i="undefined"==typeof n?e(b):n,r=i.find(F),o=r.find(L).length;if(!(!r.length||hn||o<2)){var a=r.find(I),l=null;if(l="left"===t?a.prev(L):a.next(L),!l.length){if(!s.loopHorizontal)return;l="left"===t?a.siblings(":last"):a.siblings(":first")}hn=!0,mt(r,l,t)}}function We(){e(I).each(function(){Yt(e(this),"internal")})}function Ue(e){var t=e.position(),n=t.top,i=t.top>Nn,r=n-vn+e.outerHeight(),o=s.bigSectionsDestination;return e.outerHeight()>vn?(i||o)&&"bottom"!==o||(n=r):(i||yn&&e.is(":last-child"))&&(n=r),Nn=n,n}function Ge(t,n,i){if("undefined"!=typeof t){var r,o,a=Ue(t),l={element:t,callback:n,isMovementUp:i,dtop:a,yMovement:Et(t),anchorLink:t.data("anchor"),sectionIndex:t.index(w),activeSlide:t.find(I),activeSection:e(b),leavingSection:e(b).index(w)+1,localIsResizing:yn};l.activeSection.is(t)&&!yn||s.scrollBar&&te.scrollTop()===l.dtop&&!t.hasClass(T)||(l.activeSlide.length&&(r=l.activeSlide.data("anchor"),o=l.activeSlide.index()),s.autoScrolling&&s.continuousVertical&&"undefined"!=typeof l.isMovementUp&&(!l.isMovementUp&&"up"==l.yMovement||l.isMovementUp&&"down"==l.yMovement)&&(l=Qe(l)),e.isFunction(s.onLeave)&&!l.localIsResizing&&s.onLeave.call(l.activeSection,l.leavingSection,l.sectionIndex+1,l.yMovement)===!1||(tt(l.activeSection),s.scrollOverflowHandler.beforeLeave(),t.addClass(f).siblings().removeClass(f),Ze(t),s.scrollOverflowHandler.onLeave(),wn=!1,Ft(o,r,l.anchorLink,l.sectionIndex),Ve(l),un=l.anchorLink,Tt(l.anchorLink,l.sectionIndex)))}}function Ve(t){if(s.css3&&s.autoScrolling&&!s.scrollBar){var n="translate3d(0px, -"+i.round(t.dtop)+"px, 0px)";jt(n,!0),s.scrollingSpeed?(clearTimeout(_n),_n=setTimeout(function(){Ye(t)},s.scrollingSpeed)):Ye(t)}else{var r=Ke(t);e(r.element).animate(r.options,s.scrollingSpeed,s.easing).promise().done(function(){s.scrollBar?setTimeout(function(){Ye(t)},30):Ye(t)})}}function Ke(e){var t={};return s.autoScrolling&&!s.scrollBar?(t.options={top:-e.dtop},t.element=a):(t.options={scrollTop:e.dtop},t.element="html, body"),t}function Qe(t){return t.isMovementUp?e(b).before(t.activeSection.nextAll(w)):e(b).after(t.activeSection.prevAll(w).get().reverse()),Zt(e(b).position().top),We(),t.wrapAroundElements=t.activeSection,t.dtop=t.element.position().top,t.yMovement=Et(t.element),t}function Xe(t){t.wrapAroundElements&&t.wrapAroundElements.length&&(t.isMovementUp?e(k).before(t.wrapAroundElements):e(C).after(t.wrapAroundElements),Zt(e(b).position().top),We())}function Ye(t){Xe(t),e.isFunction(s.afterLoad)&&!t.localIsResizing&&s.afterLoad.call(t.element,t.anchorLink,t.sectionIndex+1),s.scrollOverflowHandler.afterLoad(),Je(t.element),t.element.addClass(m).siblings().removeClass(m),wn=!0,e.isFunction(t.callback)&&t.callback.call(this)}function Ze(t){if(s.lazyLoading){var n,i=nt(t);i.find("img[data-src], source[data-src], audio[data-src], iframe[data-src]").each(function(){n=e(this),n.attr("src",n.data("src")),n.removeAttr("data-src"),n.is("source")&&n.closest("video").get(0).load()})}}function Je(t){var n=nt(t);n.find("video, audio").each(function(){var t=e(this).get(0);t.hasAttribute("data-autoplay")&&"function"==typeof t.play&&t.play()}),n.find('iframe[src*="youtube.com/embed/"]').each(function(){var t=e(this).get(0);t.hasAttribute("data-autoplay")&&et(t),t.onload=function(){t.hasAttribute("data-autoplay")&&et(t)}})}function et(e){e.contentWindow.postMessage('{"event":"command","func":"playVideo","args":""}',"*")}function tt(t){var n=nt(t);n.find("video, audio").each(function(){var t=e(this).get(0);t.hasAttribute("data-keepplaying")||"function"!=typeof t.pause||t.pause()}),n.find('iframe[src*="youtube.com/embed/"]').each(function(){var t=e(this).get(0);/youtube\.com\/embed\//.test(e(this).attr("src"))&&!t.hasAttribute("data-keepplaying")&&e(this).get(0).contentWindow.postMessage('{"event":"command","func":"pauseVideo","args":""}',"*")})}function nt(t){var n=t.find(I);return n.length&&(t=e(n)),t}function it(){var e=t.location.hash.replace("#","").split("/"),n=decodeURIComponent(e[0]),i=decodeURIComponent(e[1]);n&&(s.animateAnchor?Lt(n,i):ue(n,i))}function rt(){if(!Dn&&!s.lockAnchors){var e=t.location.hash.replace("#","").split("/"),n=decodeURIComponent(e[0]),i=decodeURIComponent(e[1]),r="undefined"==typeof un,o="undefined"==typeof un&&"undefined"==typeof i&&!hn;n.length&&(n&&n!==un&&!r||o||!hn&&dn!=i)&&Lt(n,i)}}function ot(t){clearTimeout(Pn);var n=e(":focus");if(!n.is("textarea")&&!n.is("input")&&!n.is("select")&&"true"!==n.attr("contentEditable")&&""!==n.attr("contentEditable")&&s.keyboardScrolling&&s.autoScrolling){var i=t.which,r=[40,38,32,33,34];e.inArray(i,r)>-1&&t.preventDefault(),pn=t.ctrlKey,Pn=setTimeout(function(){ft(t)},150)}}function at(){e(this).prev().trigger("click")}function st(e){xn&&(pn=e.ctrlKey)}function lt(e){2==e.which&&(Fn=e.pageY,mn.on("mousemove",gt))}function ct(e){2==e.which&&mn.off("mousemove")}function ut(){var t=e(this).closest(w);e(this).hasClass(V)?kn.m.left&&he(t):kn.m.right&&pe(t)}function dt(){xn=!1,pn=!1}function pt(t){t.preventDefault();var n=e(this).parent().index();Ge(e(w).eq(n))}function ht(t){t.preventDefault();var n=e(this).closest(w).find(F),i=n.find(L).eq(e(this).closest("li").index());mt(n,i)}function ft(t){var n=t.shiftKey;switch(t.which){case 38:case 33:kn.k.up&&le();break;case 32:if(n&&kn.k.up){le();break}case 40:case 34:kn.k.down&&ce();break;case 36:kn.k.up&&de(1);break;case 35:kn.k.down&&de(e(w).length);break;case 37:kn.k.left&&he();break;case 39:kn.k.right&&pe();break;default:return}}function gt(e){wn&&(e.pageY<Fn&&kn.m.up?le():e.pageY>Fn&&kn.m.down&&ce()),Fn=e.pageY}function mt(t,n,i){var r=t.closest(w),o={slides:t,destiny:n,direction:i,destinyPos:n.position(),slideIndex:n.index(),section:r,sectionIndex:r.index(w),anchorLink:r.data("anchor"),slidesNav:r.find(q),slideAnchor:$t(n),prevSlide:r.find(I),prevSlideIndex:r.find(I).index(),localIsResizing:yn};return o.xMovement=Pt(o.prevSlideIndex,o.slideIndex),o.localIsResizing||(wn=!1),s.onSlideLeave&&!o.localIsResizing&&"none"!==o.xMovement&&e.isFunction(s.onSlideLeave)&&s.onSlideLeave.call(o.prevSlide,o.anchorLink,o.sectionIndex+1,o.prevSlideIndex,o.xMovement,o.slideIndex)===!1?void(hn=!1):(n.addClass(f).siblings().removeClass(f),o.localIsResizing||(tt(o.prevSlide),Ze(n)),!s.loopHorizontal&&s.controlArrows&&(r.find(X).toggle(0!==o.slideIndex),r.find(ee).toggle(!n.is(":last-child"))),r.hasClass(f)&&Ft(o.slideIndex,o.slideAnchor,o.anchorLink,o.sectionIndex),void yt(t,o,!0))}function vt(t){xt(t.slidesNav,t.slideIndex),t.localIsResizing||(e.isFunction(s.afterSlideLoad)&&s.afterSlideLoad.call(t.destiny,t.anchorLink,t.sectionIndex+1,t.slideAnchor,t.slideIndex),wn=!0),Je(t.destiny),hn=!1}function yt(e,t,n){var r=t.destinyPos;if(s.css3){var o="translate3d(-"+i.round(r.left)+"px, 0px, 0px)";kt(e.find($)).css(Jt(o)),Sn=setTimeout(function(){n&&vt(t)},s.scrollingSpeed,s.easing)}else e.animate({scrollLeft:i.round(r.left)},s.scrollingSpeed,s.easing,function(){n&&vt(t)})}function xt(e,t){e.find(g).removeClass(f),e.find("li").eq(t).find("a").addClass(f)}function wt(){if(bt(),fn){var t=e(n.activeElement);if(!t.is("textarea")&&!t.is("input")&&!t.is("select")){var r=te.height();i.abs(r-Hn)>20*i.max(Hn,r)/100&&(fe(!0),Hn=r)}}else clearTimeout(Cn),Cn=setTimeout(function(){fe(!0)},350)}function bt(){var e=s.responsive||s.responsiveWidth,t=s.responsiveHeight,n=e&&te.outerWidth()<e,i=t&&te.height()<t;e&&t?ge(n||i):e?ge(n):t&&ge(i)}function kt(e){var t="all "+s.scrollingSpeed+"ms "+s.easingcss3;return e.removeClass(u),e.css({"-webkit-transition":t,transition:t})}function Ct(e){return e.addClass(u)}function _t(t,n){s.navigation&&(e(A).find(g).removeClass(f),t?e(A).find('a[href="#'+t+'"]').addClass(f):e(A).find("li").eq(n).find("a").addClass(f))}function St(t){s.menu&&(e(s.menu).find(g).removeClass(f),e(s.menu).find('[data-menuanchor="'+t+'"]').addClass(f))}function Tt(e,t){St(e),_t(e,t)}function Et(t){var n=e(b).index(w),i=t.index(w);return n==i?"none":n>i?"up":"down"}function Pt(e,t){return e==t?"none":e>t?"left":"right"}function At(e){if(!e.hasClass("fp-noscroll")){e.css("overflow","hidden");var t,n=s.scrollOverflowHandler,i=n.wrapContent(),r=e.closest(w),o=n.scrollable(e);o.length?t=n.scrollHeight(e):(t=e.get(0).scrollHeight,s.verticalCentered&&(t=e.find(S).get(0).scrollHeight));var a=vn-parseInt(r.css("padding-bottom"))-parseInt(r.css("padding-top"));t>a?o.length?n.update(e,a):(s.verticalCentered?e.find(S).wrapInner(i):e.wrapInner(i),n.create(e,a)):n.remove(e),e.css("overflow","")}}function Dt(e){e.hasClass(z)||e.addClass(z).wrapInner('<div class="'+_+'" style="height:'+Ot(e)+'px;" />')}function Ot(e){var t=vn;if(s.paddingTop||s.paddingBottom){var n=e;n.hasClass(x)||(n=e.closest(w));var i=parseInt(n.css("padding-top"))+parseInt(n.css("padding-bottom"));t=vn-i}return t}function jt(e,t){t?kt(mn):Ct(mn),mn.css(Jt(e)),setTimeout(function(){mn.removeClass(u)},10)}function Mt(t){var n=mn.find(w+'[data-anchor="'+t+'"]');return n.length||(n=e(w).eq(t-1)),n}function Rt(e,t){var n=t.find(F),i=n.find(L+'[data-anchor="'+e+'"]');return i.length||(i=n.find(L).eq(e)),i}function Lt(e,t){var n=Mt(e);n.length&&("undefined"==typeof t&&(t=0),e===un||n.hasClass(f)?It(n,t):Ge(n,function(){It(n,t)}))}function It(e,t){if("undefined"!=typeof t){var n=e.find(F),i=Rt(t,e);i.length&&mt(n,i)}}function Nt(e,t){e.append('<div class="'+B+'"><ul></ul></div>');var n=e.find(q);n.addClass(s.slidesNavPosition);for(var i=0;i<t;i++)n.find("ul").append('<li><a href="#"><span></span></a></li>');n.css("margin-left","-"+n.width()/2+"px"),n.find("li").first().find("a").addClass(f)}function Ft(e,t,n,i){var r="";s.anchors.length&&!s.lockAnchors&&(e?("undefined"!=typeof n&&(r=n),"undefined"==typeof t&&(t=e),dn=t,Ht(r+"/"+t)):"undefined"!=typeof e?(dn=t,Ht(n)):Ht(n)),zt()}function Ht(e){if(s.recordHistory)location.hash=e;else if(fn||gn)t.history.replaceState(r,r,"#"+e);else{var n=t.location.href.split("#")[0];t.location.replace(n+"#"+e)}}function $t(e){var t=e.data("anchor"),n=e.index();return"undefined"==typeof t&&(t=n),t}function zt(){var t=e(b),n=t.find(I),i=$t(t),r=$t(n),o=String(i);n.length&&(o=o+"-"+r),o=o.replace("/","-").replace("#","");var a=new RegExp("\\b\\s?"+h+"-[^\\s]+\\b","g");ln[0].className=ln[0].className.replace(a,""),ln.addClass(h+"-"+o)}function Bt(){var e,i=n.createElement("p"),o={webkitTransform:"-webkit-transform",OTransform:"-o-transform",msTransform:"-ms-transform",MozTransform:"-moz-transform",transform:"transform"};n.body.insertBefore(i,null);for(var a in o)i.style[a]!==r&&(i.style[a]="translate3d(1px,1px,1px)",e=t.getComputedStyle(i).getPropertyValue(o[a]));return n.body.removeChild(i),e!==r&&e.length>0&&"none"!==e}function qt(){n.addEventListener?(n.removeEventListener("mousewheel",Be,!1),n.removeEventListener("wheel",Be,!1),n.removeEventListener("MozMousePixelScroll",Be,!1)):n.detachEvent("onmousewheel",Be)}function Wt(){var e,i="";t.addEventListener?e="addEventListener":(e="attachEvent",i="on");var o="onwheel"in n.createElement("div")?"wheel":n.onmousewheel!==r?"mousewheel":"DOMMouseScroll";"DOMMouseScroll"==o?n[e](i+"MozMousePixelScroll",Be,!1):n[e](i+o,Be,!1)}function Ut(){mn.on("mousedown",lt).on("mouseup",ct)}function Gt(){mn.off("mousedown",lt).off("mouseup",ct)}function Vt(){if(s.autoScrolling&&(fn||gn)){var t=Qt();ln.off("touchmove "+t.move).on("touchmove "+t.move,Ie),e(a).off("touchstart "+t.down).on("touchstart "+t.down,$e).off("touchmove "+t.move).on("touchmove "+t.move,Ne)}}function Kt(){if(fn||gn){var t=Qt();e(a).off("touchstart "+t.down).off("touchmove "+t.move)}}function Qt(){var e;return e=t.PointerEvent?{down:"pointerdown",move:"pointermove"}:{down:"MSPointerDown",move:"MSPointerMove"}}function Xt(e){var t=[];return t.y="undefined"!=typeof e.pageY&&(e.pageY||e.pageX)?e.pageY:e.touches[0].pageY,t.x="undefined"!=typeof e.pageX&&(e.pageY||e.pageX)?e.pageX:e.touches[0].pageX,gn&&He(e)&&s.scrollBar&&(t.y=e.touches[0].pageY,t.x=e.touches[0].pageX),t}function Yt(e,t){K(0,"internal"),"undefined"!=typeof t&&(yn=!0),mt(e.closest(F),e),"undefined"!=typeof t&&(yn=!1),K(An.scrollingSpeed,"internal")}function Zt(e){var t=i.round(e);if(s.scrollBar)mn.scrollTop(t);else if(s.css3){var n="translate3d(0px, -"+t+"px, 0px)";jt(n,!1)}else mn.css("top",-t)}function Jt(e){return{"-webkit-transform":e,"-moz-transform":e,
"-ms-transform":e,transform:e}}function en(e,t,n){switch(t){case"up":kn[n].up=e;break;case"down":kn[n].down=e;break;case"left":kn[n].left=e;break;case"right":kn[n].right=e;break;case"all":"m"==n?ae(e):se(e)}}function tn(t){l(!1,"internal"),ae(!1),se(!1),mn.addClass(d),clearTimeout(Sn),clearTimeout(_n),clearTimeout(Cn),clearTimeout(Tn),clearTimeout(En),te.off("scroll",je).off("hashchange",rt).off("resize",wt),ne.off("click touchstart",A+" a").off("mouseenter",A+" li").off("mouseleave",A+" li").off("click touchstart",W).off("mouseover",s.normalScrollElements).off("mouseout",s.normalScrollElements),e(w).off("click touchstart",G),clearTimeout(Sn),clearTimeout(_n),t&&nn()}function nn(){Zt(0),mn.find("img[data-src], source[data-src], audio[data-src], iframe[data-src]").each(function(){e(this).attr("src",e(this).data("src")),e(this).removeAttr("data-src")}),e(A+", "+q+", "+G).remove(),e(w).css({height:"","background-color":"",padding:""}),e(L).css({width:""}),mn.css({height:"",position:"","-ms-touch-action":"","touch-action":""}),sn.css({overflow:"",height:""}),e("html").removeClass(p),ln.removeClass(c),e.each(ln.get(0).className.split(/\s+/),function(e,t){0===t.indexOf(h)&&ln.removeClass(t)}),e(w+", "+L).each(function(){s.scrollOverflowHandler.remove(e(this)),e(this).removeClass(z+" "+f)}),Ct(mn),mn.find(S+", "+$+", "+F).each(function(){e(this).replaceWith(this.childNodes)}),sn.scrollTop(0);var t=[x,R,H];e.each(t,function(t,n){e("."+n).removeClass(n)})}function rn(e,t,n){s[e]=t,"internal"!==n&&(An[e]=t)}function on(){var t=["fadingEffect","continuousHorizontal","scrollHorizontally","interlockedSlides","resetSliders","responsiveSlides"];return e("html").hasClass(p)?void an("error","Fullpage.js can only be initialized once and you are doing it multiple times!"):(s.continuousVertical&&(s.loopTop||s.loopBottom)&&(s.continuousVertical=!1,an("warn","Option `loopTop/loopBottom` is mutually exclusive with `continuousVertical`; `continuousVertical` disabled")),s.scrollBar&&s.scrollOverflow&&an("warn","Option `scrollBar` is mutually exclusive with `scrollOverflow`. Sections with scrollOverflow might not work well in Firefox"),s.continuousVertical&&s.scrollBar&&(s.continuousVertical=!1,an("warn","Option `scrollBar` is mutually exclusive with `continuousVertical`; `continuousVertical` disabled")),t.forEach(function(e){s[e]&&an("warn","fullpage.js extensions require jquery.fullpage.extensions.min.js file instead of the usual jquery.fullpage.js. Requested: "+e)}),void e.each(s.anchors,function(t,n){var i=ne.find("[name]").filter(function(){return e(this).attr("name")&&e(this).attr("name").toLowerCase()==n.toLowerCase()}),r=ne.find("[id]").filter(function(){return e(this).attr("id")&&e(this).attr("id").toLowerCase()==n.toLowerCase()});(r.length||i.length)&&(an("error","data-anchor tags can not have the same value as any `id` element on the site (or `name` element for IE)."),r.length&&an("error",'"'+n+'" is is being used by another element `id` property'),i.length&&an("error",'"'+n+'" is is being used by another element `name` property'))}))}function an(e,t){console&&console[e]&&console[e]("fullPage: "+t)}if(e("html").hasClass(p))return void on();var sn=e("html, body"),ln=e("body"),cn=e.fn.fullpage;s=e.extend({menu:!1,anchors:[],lockAnchors:!1,navigation:!1,navigationPosition:"right",navigationTooltips:[],showActiveTooltip:!1,slidesNavigation:!1,slidesNavPosition:"bottom",scrollBar:!1,hybrid:!1,css3:!0,scrollingSpeed:700,autoScrolling:!0,fitToSection:!0,fitToSectionDelay:1e3,easing:"easeInOutCubic",easingcss3:"ease",loopBottom:!1,loopTop:!1,loopHorizontal:!0,continuousVertical:!1,continuousHorizontal:!1,scrollHorizontally:!1,interlockedSlides:!1,resetSliders:!1,fadingEffect:!1,normalScrollElements:null,scrollOverflow:!1,scrollOverflowHandler:re,scrollOverflowOptions:null,touchSensitivity:5,normalScrollElementTouchThreshold:5,bigSectionsDestination:null,keyboardScrolling:!0,animateAnchor:!0,recordHistory:!0,controlArrows:!0,controlArrowColor:"#fff",verticalCentered:!0,sectionsColor:[],paddingTop:0,paddingBottom:0,fixedElements:null,responsive:0,responsiveWidth:0,responsiveHeight:0,responsiveSlides:!1,sectionSelector:y,slideSelector:M,afterLoad:null,onLeave:null,afterRender:null,afterResize:null,afterReBuild:null,afterSlideLoad:null,onSlideLeave:null,afterResponsive:null,lazyLoading:!0},s);var un,dn,pn,hn=!1,fn=navigator.userAgent.match(/(iPhone|iPod|iPad|Android|playbook|silk|BlackBerry|BB10|Windows Phone|Tizen|Bada|webOS|IEMobile|Opera Mini)/),gn="ontouchstart"in t||navigator.msMaxTouchPoints>0||navigator.maxTouchPoints,mn=e(this),vn=te.height(),yn=!1,xn=!0,wn=!0,bn=[],kn={};kn.m={up:!0,down:!0,left:!0,right:!0},kn.k=e.extend(!0,{},kn.m);var Cn,_n,Sn,Tn,En,Pn,An=e.extend(!0,{},s);on(),ie.click=gn,ie=e.extend(ie,s.scrollOverflowOptions),e.extend(e.easing,{easeInOutCubic:function(e,t,n,i,r){return(t/=r/2)<1?i/2*t*t*t+n:i/2*((t-=2)*t*t+2)+n}}),e(this).length&&(cn.setAutoScrolling=l,cn.setRecordHistory=U,cn.setScrollingSpeed=K,cn.setFitToSection=Y,cn.setLockAnchors=Z,cn.setMouseWheelScrolling=oe,cn.setAllowScrolling=ae,cn.setKeyboardScrolling=se,cn.moveSectionUp=le,cn.moveSectionDown=ce,cn.silentMoveTo=ue,cn.moveTo=de,cn.moveSlideRight=pe,cn.moveSlideLeft=he,cn.reBuild=fe,cn.setResponsive=ge,cn.getFullpageData=me,cn.destroy=tn,ve(),ye());var Dn=!1,On=0,jn=0,Mn=0,Rn=0,Ln=0,In=(new Date).getTime(),Nn=0,Fn=0,Hn=vn},"undefined"!=typeof IScroll&&(IScroll.prototype.wheelOn=function(){this.wrapper.addEventListener("wheel",this),this.wrapper.addEventListener("mousewheel",this),this.wrapper.addEventListener("DOMMouseScroll",this)},IScroll.prototype.wheelOff=function(){this.wrapper.removeEventListener("wheel",this),this.wrapper.removeEventListener("mousewheel",this),this.wrapper.removeEventListener("DOMMouseScroll",this)});var re={refreshId:null,iScrollInstances:[],onLeave:function(){var t=e(b).find(l).data("iscrollInstance");"undefined"!=typeof t&&t&&t.wheelOff()},beforeLeave:function(){re.onLeave()},afterLoad:function(){var t=e(b).find(l).data("iscrollInstance");"undefined"!=typeof t&&t&&t.wheelOn()},create:function(t,n){var i=t.find(l);i.height(n),i.each(function(){var t=jQuery(this),n=t.data("iscrollInstance");n&&e.each(re.iScrollInstances,function(){e(this).destroy()}),n=new IScroll(t.get(0),ie),re.iScrollInstances.push(n),n.wheelOff(),t.data("iscrollInstance",n)})},isScrolled:function(e,t){var n=t.data("iscrollInstance");return!n||("top"===e?n.y>=0&&!t.scrollTop():"bottom"===e?0-n.y+t.scrollTop()+1+t.innerHeight()>=t[0].scrollHeight:void 0)},scrollable:function(e){return e.find(F).length?e.find(I).find(l):e.find(l)},scrollHeight:function(e){return e.find(l).children().first().get(0).scrollHeight},remove:function(e){var t=e.find(l);if(t.length){var n=t.data("iscrollInstance");n.destroy(),t.data("iscrollInstance",null)}e.find(l).children().first().children().first().unwrap().unwrap()},update:function(t,n){clearTimeout(re.refreshId),re.refreshId=setTimeout(function(){e.each(re.iScrollInstances,function(){e(this).get(0).refresh()})},150),t.find(l).css("height",n+"px").parent().css("height",n+"px")},wrapContent:function(){return'<div class="'+s+'"><div class="fp-scroller"></div></div>'}}}),function(e,t,n,i){"use strict";var r=n("html"),o=n(e),a=n(t),s=n.fancybox=function(){s.open.apply(this,arguments)},l=navigator.userAgent.match(/msie/i),c=null,u=t.createTouch!==i,d=function(e){return e&&e.hasOwnProperty&&e instanceof n},p=function(e){return e&&"string"===n.type(e)},h=function(e){return p(e)&&e.indexOf("%")>0},f=function(e){return e&&!(e.style.overflow&&"hidden"===e.style.overflow)&&(e.clientWidth&&e.scrollWidth>e.clientWidth||e.clientHeight&&e.scrollHeight>e.clientHeight)},g=function(e,t){var n=parseInt(e,10)||0;return t&&h(e)&&(n=s.getViewport()[t]/100*n),Math.ceil(n)},m=function(e,t){return g(e,t)+"px"};n.extend(s,{version:"2.1.5",defaults:{padding:15,margin:20,width:800,height:600,minWidth:100,minHeight:100,maxWidth:9999,maxHeight:9999,pixelRatio:1,autoSize:!0,autoHeight:!1,autoWidth:!1,autoResize:!0,autoCenter:!u,fitToView:!0,aspectRatio:!1,topRatio:.5,leftRatio:.5,scrolling:"auto",wrapCSS:"",arrows:!0,closeBtn:!0,closeClick:!1,nextClick:!1,mouseWheel:!0,autoPlay:!1,playSpeed:3e3,preload:3,modal:!1,loop:!0,ajax:{dataType:"html",headers:{"X-fancyBox":!0}},iframe:{scrolling:"auto",preload:!0},swf:{wmode:"transparent",allowfullscreen:"true",allowscriptaccess:"always"},keys:{next:{13:"left",34:"up",39:"left",40:"up"},prev:{8:"right",33:"down",37:"right",38:"down"},close:[27],play:[32],toggle:[70]},direction:{next:"left",prev:"right"},scrollOutside:!0,index:0,type:null,href:null,content:null,title:null,tpl:{wrap:'<div class="fancybox-wrap" tabIndex="-1"><div class="fancybox-skin"><div class="fancybox-outer"><div class="fancybox-inner"></div></div></div></div>',image:'<img class="fancybox-image" src="{href}" alt="" />',iframe:'<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" frameborder="0" vspace="0" hspace="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen'+(l?' allowtransparency="true"':"")+"></iframe>",error:'<p class="fancybox-error">The requested content cannot be loaded.<br/>Please try again later.</p>',closeBtn:'<a title="Close" class="fancybox-item fancybox-close" href="javascript:;"></a>',next:'<a title="Next" class="fancybox-nav fancybox-next" href="javascript:;"><span></span></a>',prev:'<a title="Previous" class="fancybox-nav fancybox-prev" href="javascript:;"><span></span></a>'},openEffect:"fade",openSpeed:250,openEasing:"swing",openOpacity:!0,openMethod:"zoomIn",closeEffect:"fade",closeSpeed:250,closeEasing:"swing",closeOpacity:!0,closeMethod:"zoomOut",nextEffect:"elastic",nextSpeed:250,nextEasing:"swing",nextMethod:"changeIn",prevEffect:"elastic",prevSpeed:250,prevEasing:"swing",prevMethod:"changeOut",helpers:{overlay:!0,title:!0},onCancel:n.noop,beforeLoad:n.noop,afterLoad:n.noop,beforeShow:n.noop,afterShow:n.noop,beforeChange:n.noop,beforeClose:n.noop,afterClose:n.noop},group:{},opts:{},previous:null,coming:null,current:null,isActive:!1,isOpen:!1,isOpened:!1,wrap:null,skin:null,outer:null,inner:null,player:{timer:null,isActive:!1},ajaxLoad:null,imgPreload:null,transitions:{},helpers:{},open:function(e,t){if(e&&(n.isPlainObject(t)||(t={}),!1!==s.close(!0)))return n.isArray(e)||(e=d(e)?n(e).get():[e]),n.each(e,function(r,o){var a,l,c,u,h,f,g,m={};"object"===n.type(o)&&(o.nodeType&&(o=n(o)),d(o)?(m={href:o.data("fancybox-href")||o.attr("href"),title:o.data("fancybox-title")||o.attr("title"),isDom:!0,element:o},n.metadata&&n.extend(!0,m,o.metadata())):m=o),a=t.href||m.href||(p(o)?o:null),l=t.title!==i?t.title:m.title||"",c=t.content||m.content,u=c?"html":t.type||m.type,!u&&m.isDom&&(u=o.data("fancybox-type"),u||(h=o.prop("class").match(/fancybox\.(\w+)/),u=h?h[1]:null)),p(a)&&(u||(s.isImage(a)?u="image":s.isSWF(a)?u="swf":"#"===a.charAt(0)?u="inline":p(o)&&(u="html",c=o)),"ajax"===u&&(f=a.split(/\s+/,2),a=f.shift(),g=f.shift())),c||("inline"===u?a?c=n(p(a)?a.replace(/.*(?=#[^\s]+$)/,""):a):m.isDom&&(c=o):"html"===u?c=a:u||a||!m.isDom||(u="inline",c=o)),n.extend(m,{href:a,type:u,content:c,title:l,selector:g}),e[r]=m}),s.opts=n.extend(!0,{},s.defaults,t),t.keys!==i&&(s.opts.keys=!!t.keys&&n.extend({},s.defaults.keys,t.keys)),s.group=e,s._start(s.opts.index)},cancel:function(){var e=s.coming;e&&!1!==s.trigger("onCancel")&&(s.hideLoading(),s.ajaxLoad&&s.ajaxLoad.abort(),s.ajaxLoad=null,s.imgPreload&&(s.imgPreload.onload=s.imgPreload.onerror=null),e.wrap&&e.wrap.stop(!0,!0).trigger("onReset").remove(),s.coming=null,s.current||s._afterZoomOut(e))},close:function(e){s.cancel(),!1!==s.trigger("beforeClose")&&(s.unbindEvents(),s.isActive&&(s.isOpen&&e!==!0?(s.isOpen=s.isOpened=!1,s.isClosing=!0,n(".fancybox-item, .fancybox-nav").remove(),s.wrap.stop(!0,!0).removeClass("fancybox-opened"),s.transitions[s.current.closeMethod]()):(n(".fancybox-wrap").stop(!0).trigger("onReset").remove(),s._afterZoomOut())))},play:function(e){var t=function(){clearTimeout(s.player.timer)},n=function(){t(),s.current&&s.player.isActive&&(s.player.timer=setTimeout(s.next,s.current.playSpeed))},i=function(){t(),a.unbind(".player"),s.player.isActive=!1,s.trigger("onPlayEnd")},r=function(){s.current&&(s.current.loop||s.current.index<s.group.length-1)&&(s.player.isActive=!0,a.bind({"onCancel.player beforeClose.player":i,"onUpdate.player":n,"beforeLoad.player":t}),n(),s.trigger("onPlayStart"))};e===!0||!s.player.isActive&&e!==!1?r():i()},next:function(e){var t=s.current;t&&(p(e)||(e=t.direction.next),s.jumpto(t.index+1,e,"next"))},prev:function(e){var t=s.current;t&&(p(e)||(e=t.direction.prev),s.jumpto(t.index-1,e,"prev"))},jumpto:function(e,t,n){var r=s.current;r&&(e=g(e),s.direction=t||r.direction[e>=r.index?"next":"prev"],s.router=n||"jumpto",r.loop&&(e<0&&(e=r.group.length+e%r.group.length),e%=r.group.length),r.group[e]!==i&&(s.cancel(),s._start(e)))},reposition:function(e,t){var i,r=s.current,o=r?r.wrap:null;o&&(i=s._getPosition(t),e&&"scroll"===e.type?(delete i.position,o.stop(!0,!0).animate(i,200)):(o.css(i),r.pos=n.extend({},r.dim,i)))},update:function(e){var t=e&&e.type,n=!t||"orientationchange"===t;n&&(clearTimeout(c),c=null),s.isOpen&&!c&&(c=setTimeout(function(){var i=s.current;i&&!s.isClosing&&(s.wrap.removeClass("fancybox-tmp"),(n||"load"===t||"resize"===t&&i.autoResize)&&s._setDimension(),"scroll"===t&&i.canShrink||s.reposition(e),s.trigger("onUpdate"),c=null)},n&&!u?0:300))},toggle:function(e){s.isOpen&&(s.current.fitToView="boolean"===n.type(e)?e:!s.current.fitToView,u&&(s.wrap.removeAttr("style").addClass("fancybox-tmp"),s.trigger("onUpdate")),s.update())},hideLoading:function(){a.unbind(".loading"),n("#fancybox-loading").remove()},showLoading:function(){var e,t;s.hideLoading(),e=n('<div id="fancybox-loading"><div></div></div>').click(s.cancel).appendTo("body"),a.bind("keydown.loading",function(e){27===(e.which||e.keyCode)&&(e.preventDefault(),s.cancel())}),s.defaults.fixed||(t=s.getViewport(),e.css({position:"absolute",top:.5*t.h+t.y,left:.5*t.w+t.x}))},getViewport:function(){var t=s.current&&s.current.locked||!1,n={x:o.scrollLeft(),y:o.scrollTop()};return t?(n.w=t[0].clientWidth,n.h=t[0].clientHeight):(n.w=u&&e.innerWidth?e.innerWidth:o.width(),n.h=u&&e.innerHeight?e.innerHeight:o.height()),n},unbindEvents:function(){s.wrap&&d(s.wrap)&&s.wrap.unbind(".fb"),a.unbind(".fb"),o.unbind(".fb")},bindEvents:function(){var e,t=s.current;t&&(o.bind("orientationchange.fb"+(u?"":" resize.fb")+(t.autoCenter&&!t.locked?" scroll.fb":""),s.update),e=t.keys,e&&a.bind("keydown.fb",function(r){var o=r.which||r.keyCode,a=r.target||r.srcElement;return(27!==o||!s.coming)&&void(r.ctrlKey||r.altKey||r.shiftKey||r.metaKey||a&&(a.type||n(a).is("[contenteditable]"))||n.each(e,function(e,a){return t.group.length>1&&a[o]!==i?(s[e](a[o]),r.preventDefault(),!1):n.inArray(o,a)>-1?(s[e](),r.preventDefault(),!1):void 0}))}),n.fn.mousewheel&&t.mouseWheel&&s.wrap.bind("mousewheel.fb",function(e,i,r,o){for(var a=e.target||null,l=n(a),c=!1;l.length&&!(c||l.is(".fancybox-skin")||l.is(".fancybox-wrap"));)c=f(l[0]),l=n(l).parent();0===i||c||s.group.length>1&&!t.canShrink&&(o>0||r>0?s.prev(o>0?"down":"left"):(o<0||r<0)&&s.next(o<0?"up":"right"),e.preventDefault())}))},trigger:function(e,t){var i,r=t||s.coming||s.current;if(r){if(n.isFunction(r[e])&&(i=r[e].apply(r,Array.prototype.slice.call(arguments,1))),i===!1)return!1;r.helpers&&n.each(r.helpers,function(t,i){i&&s.helpers[t]&&n.isFunction(s.helpers[t][e])&&s.helpers[t][e](n.extend(!0,{},s.helpers[t].defaults,i),r)}),a.trigger(e)}},isImage:function(e){return p(e)&&e.match(/(^data:image\/.*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg)((\?|#).*)?$)/i)},isSWF:function(e){return p(e)&&e.match(/\.(swf)((\?|#).*)?$/i)},_start:function(e){var t,i,r,o,a,l={};if(e=g(e),t=s.group[e]||null,!t)return!1;if(l=n.extend(!0,{},s.opts,t),o=l.margin,a=l.padding,"number"===n.type(o)&&(l.margin=[o,o,o,o]),"number"===n.type(a)&&(l.padding=[a,a,a,a]),l.modal&&n.extend(!0,l,{closeBtn:!1,closeClick:!1,nextClick:!1,arrows:!1,mouseWheel:!1,keys:null,helpers:{overlay:{closeClick:!1}}}),l.autoSize&&(l.autoWidth=l.autoHeight=!0),"auto"===l.width&&(l.autoWidth=!0),"auto"===l.height&&(l.autoHeight=!0),l.group=s.group,l.index=e,s.coming=l,!1===s.trigger("beforeLoad"))return void(s.coming=null);if(r=l.type,i=l.href,!r)return s.coming=null,!(!s.current||!s.router||"jumpto"===s.router)&&(s.current.index=e,s[s.router](s.direction));if(s.isActive=!0,"image"!==r&&"swf"!==r||(l.autoHeight=l.autoWidth=!1,l.scrolling="visible"),"image"===r&&(l.aspectRatio=!0),"iframe"===r&&u&&(l.scrolling="scroll"),l.wrap=n(l.tpl.wrap).addClass("fancybox-"+(u?"mobile":"desktop")+" fancybox-type-"+r+" fancybox-tmp "+l.wrapCSS).appendTo(l.parent||"body"),n.extend(l,{skin:n(".fancybox-skin",l.wrap),outer:n(".fancybox-outer",l.wrap),inner:n(".fancybox-inner",l.wrap)}),n.each(["Top","Right","Bottom","Left"],function(e,t){l.skin.css("padding"+t,m(l.padding[e]))}),s.trigger("onReady"),"inline"===r||"html"===r){if(!l.content||!l.content.length)return s._error("content")}else if(!i)return s._error("href");"image"===r?s._loadImage():"ajax"===r?s._loadAjax():"iframe"===r?s._loadIframe():s._afterLoad()},_error:function(e){n.extend(s.coming,{type:"html",autoWidth:!0,autoHeight:!0,minWidth:0,minHeight:0,scrolling:"no",hasError:e,content:s.coming.tpl.error}),s._afterLoad()},_loadImage:function(){var e=s.imgPreload=new Image;e.onload=function(){this.onload=this.onerror=null,s.coming.width=this.width/s.opts.pixelRatio,s.coming.height=this.height/s.opts.pixelRatio,s._afterLoad()},e.onerror=function(){this.onload=this.onerror=null,s._error("image")},e.src=s.coming.href,e.complete!==!0&&s.showLoading()},_loadAjax:function(){var e=s.coming;s.showLoading(),s.ajaxLoad=n.ajax(n.extend({},e.ajax,{url:e.href,error:function(e,t){s.coming&&"abort"!==t?s._error("ajax",e):s.hideLoading()},success:function(t,n){"success"===n&&(e.content=t,s._afterLoad())}}))},_loadIframe:function(){var e=s.coming,t=n(e.tpl.iframe.replace(/\{rnd\}/g,(new Date).getTime())).attr("scrolling",u?"auto":e.iframe.scrolling).attr("src",e.href);n(e.wrap).bind("onReset",function(){try{n(this).find("iframe").hide().attr("src","//about:blank").end().empty()}catch(e){}}),e.iframe.preload&&(s.showLoading(),t.one("load",function(){n(this).data("ready",1),u||n(this).bind("load.fb",s.update),n(this).parents(".fancybox-wrap").width("100%").removeClass("fancybox-tmp").show(),s._afterLoad()})),e.content=t.appendTo(e.inner),e.iframe.preload||s._afterLoad()},_preloadImages:function(){var e,t,n=s.group,i=s.current,r=n.length,o=i.preload?Math.min(i.preload,r-1):0;for(t=1;t<=o;t+=1)e=n[(i.index+t)%r],"image"===e.type&&e.href&&((new Image).src=e.href)},_afterLoad:function(){var e,t,i,r,o,a,l=s.coming,c=s.current,u="fancybox-placeholder";if(s.hideLoading(),l&&s.isActive!==!1){if(!1===s.trigger("afterLoad",l,c))return l.wrap.stop(!0).trigger("onReset").remove(),void(s.coming=null);switch(c&&(s.trigger("beforeChange",c),c.wrap.stop(!0).removeClass("fancybox-opened").find(".fancybox-item, .fancybox-nav").remove()),s.unbindEvents(),e=l,t=l.content,i=l.type,r=l.scrolling,n.extend(s,{wrap:e.wrap,skin:e.skin,outer:e.outer,inner:e.inner,current:e,previous:c}),o=e.href,i){case"inline":case"ajax":case"html":e.selector?t=n("<div>").html(t).find(e.selector):d(t)&&(t.data(u)||t.data(u,n('<div class="'+u+'"></div>').insertAfter(t).hide()),t=t.show().detach(),e.wrap.bind("onReset",function(){n(this).find(t).length&&t.hide().replaceAll(t.data(u)).data(u,!1)}));break;case"image":t=e.tpl.image.replace("{href}",o);break;case"swf":t='<object id="fancybox-swf" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" width="100%" height="100%"><param name="movie" value="'+o+'"></param>',a="",n.each(e.swf,function(e,n){t+='<param name="'+e+'" value="'+n+'"></param>',a+=" "+e+'="'+n+'"'}),t+='<embed src="'+o+'" type="application/x-shockwave-flash" width="100%" height="100%"'+a+"></embed></object>"}d(t)&&t.parent().is(e.inner)||e.inner.append(t),s.trigger("beforeShow"),e.inner.css("overflow","yes"===r?"scroll":"no"===r?"hidden":r),s._setDimension(),s.reposition(),s.isOpen=!1,s.coming=null,s.bindEvents(),s.isOpened?c.prevMethod&&s.transitions[c.prevMethod]():n(".fancybox-wrap").not(e.wrap).stop(!0).trigger("onReset").remove(),s.transitions[s.isOpened?e.nextMethod:e.openMethod](),s._preloadImages()}},_setDimension:function(){var e,t,i,r,o,a,l,c,u,d,p,f,v,y,x,w=s.getViewport(),b=0,k=!1,C=!1,_=s.wrap,S=s.skin,T=s.inner,E=s.current,P=E.width,A=E.height,D=E.minWidth,O=E.minHeight,j=E.maxWidth,M=E.maxHeight,R=E.scrolling,L=E.scrollOutside?E.scrollbarWidth:0,I=E.margin,N=g(I[1]+I[3]),F=g(I[0]+I[2]);if(_.add(S).add(T).width("auto").height("auto").removeClass("fancybox-tmp"),e=g(S.outerWidth(!0)-S.width()),t=g(S.outerHeight(!0)-S.height()),i=N+e,r=F+t,o=h(P)?(w.w-i)*g(P)/100:P,a=h(A)?(w.h-r)*g(A)/100:A,"iframe"===E.type){if(y=E.content,E.autoHeight&&1===y.data("ready"))try{y[0].contentWindow.document.location&&(T.width(o).height(9999),x=y.contents().find("body"),L&&x.css("overflow-x","hidden"),a=x.outerHeight(!0))}catch(H){}}else(E.autoWidth||E.autoHeight)&&(T.addClass("fancybox-tmp"),E.autoWidth||T.width(o),E.autoHeight||T.height(a),E.autoWidth&&(o=T.width()),E.autoHeight&&(a=T.height()),T.removeClass("fancybox-tmp"));if(P=g(o),A=g(a),u=o/a,D=g(h(D)?g(D,"w")-i:D),j=g(h(j)?g(j,"w")-i:j),O=g(h(O)?g(O,"h")-r:O),M=g(h(M)?g(M,"h")-r:M),l=j,c=M,E.fitToView&&(j=Math.min(w.w-i,j),M=Math.min(w.h-r,M)),f=w.w-N,v=w.h-F,E.aspectRatio?(P>j&&(P=j,A=g(P/u)),A>M&&(A=M,P=g(A*u)),P<D&&(P=D,A=g(P/u)),A<O&&(A=O,P=g(A*u))):(P=Math.max(D,Math.min(P,j)),E.autoHeight&&"iframe"!==E.type&&(T.width(P),A=T.height()),A=Math.max(O,Math.min(A,M))),E.fitToView)if(T.width(P).height(A),_.width(P+e),d=_.width(),p=_.height(),E.aspectRatio)for(;(d>f||p>v)&&P>D&&A>O&&!(b++>19);)A=Math.max(O,Math.min(M,A-10)),P=g(A*u),P<D&&(P=D,A=g(P/u)),P>j&&(P=j,A=g(P/u)),T.width(P).height(A),_.width(P+e),d=_.width(),p=_.height();else P=Math.max(D,Math.min(P,P-(d-f))),A=Math.max(O,Math.min(A,A-(p-v)));L&&"auto"===R&&A<a&&P+e+L<f&&(P+=L),T.width(P).height(A),_.width(P+e),d=_.width(),p=_.height(),k=(d>f||p>v)&&P>D&&A>O,C=E.aspectRatio?P<l&&A<c&&P<o&&A<a:(P<l||A<c)&&(P<o||A<a),n.extend(E,{dim:{width:m(d),height:m(p)},origWidth:o,origHeight:a,canShrink:k,canExpand:C,wPadding:e,hPadding:t,wrapSpace:p-S.outerHeight(!0),skinSpace:S.height()-A}),!y&&E.autoHeight&&A>O&&A<M&&!C&&T.height("auto")},_getPosition:function(e){var t=s.current,n=s.getViewport(),i=t.margin,r=s.wrap.width()+i[1]+i[3],o=s.wrap.height()+i[0]+i[2],a={position:"absolute",top:i[0],left:i[3]};return t.autoCenter&&t.fixed&&!e&&o<=n.h&&r<=n.w?a.position="fixed":t.locked||(a.top+=n.y,a.left+=n.x),a.top=m(Math.max(a.top,a.top+(n.h-o)*t.topRatio)),a.left=m(Math.max(a.left,a.left+(n.w-r)*t.leftRatio)),a},_afterZoomIn:function(){var e=s.current;e&&(s.isOpen=s.isOpened=!0,s.wrap.css("overflow","visible").addClass("fancybox-opened"),s.update(),(e.closeClick||e.nextClick&&s.group.length>1)&&s.inner.css("cursor","pointer").bind("click.fb",function(t){n(t.target).is("a")||n(t.target).parent().is("a")||(t.preventDefault(),s[e.closeClick?"close":"next"]())}),e.closeBtn&&n(e.tpl.closeBtn).appendTo(s.skin).bind("click.fb",function(e){e.preventDefault(),s.close()}),e.arrows&&s.group.length>1&&((e.loop||e.index>0)&&n(e.tpl.prev).appendTo(s.outer).bind("click.fb",s.prev),(e.loop||e.index<s.group.length-1)&&n(e.tpl.next).appendTo(s.outer).bind("click.fb",s.next)),s.trigger("afterShow"),e.loop||e.index!==e.group.length-1?s.opts.autoPlay&&!s.player.isActive&&(s.opts.autoPlay=!1,s.play()):s.play(!1))},_afterZoomOut:function(e){e=e||s.current,n(".fancybox-wrap").trigger("onReset").remove(),n.extend(s,{group:{},opts:{},router:!1,current:null,isActive:!1,isOpened:!1,isOpen:!1,isClosing:!1,wrap:null,skin:null,outer:null,inner:null}),s.trigger("afterClose",e)}}),s.transitions={getOrigPosition:function(){var e=s.current,t=e.element,n=e.orig,i={},r=50,o=50,a=e.hPadding,l=e.wPadding,c=s.getViewport();return!n&&e.isDom&&t.is(":visible")&&(n=t.find("img:first"),n.length||(n=t)),d(n)?(i=n.offset(),n.is("img")&&(r=n.outerWidth(),o=n.outerHeight())):(i.top=c.y+(c.h-o)*e.topRatio,i.left=c.x+(c.w-r)*e.leftRatio),("fixed"===s.wrap.css("position")||e.locked)&&(i.top-=c.y,i.left-=c.x),i={top:m(i.top-a*e.topRatio),left:m(i.left-l*e.leftRatio),width:m(r+l),height:m(o+a)}},step:function(e,t){var n,i,r,o=t.prop,a=s.current,l=a.wrapSpace,c=a.skinSpace;"width"!==o&&"height"!==o||(n=t.end===t.start?1:(e-t.start)/(t.end-t.start),s.isClosing&&(n=1-n),i="width"===o?a.wPadding:a.hPadding,r=e-i,s.skin[o](g("width"===o?r:r-l*n)),s.inner[o](g("width"===o?r:r-l*n-c*n)))},zoomIn:function(){var e=s.current,t=e.pos,i=e.openEffect,r="elastic"===i,o=n.extend({opacity:1},t);delete o.position,r?(t=this.getOrigPosition(),e.openOpacity&&(t.opacity=.1)):"fade"===i&&(t.opacity=.1),s.wrap.css(t).animate(o,{duration:"none"===i?0:e.openSpeed,easing:e.openEasing,step:r?this.step:null,complete:s._afterZoomIn})},zoomOut:function(){var e=s.current,t=e.closeEffect,n="elastic"===t,i={opacity:.1};n&&(i=this.getOrigPosition(),e.closeOpacity&&(i.opacity=.1)),s.wrap.animate(i,{duration:"none"===t?0:e.closeSpeed,easing:e.closeEasing,step:n?this.step:null,complete:s._afterZoomOut})},changeIn:function(){var e,t=s.current,n=t.nextEffect,i=t.pos,r={opacity:1},o=s.direction,a=200;i.opacity=.1,"elastic"===n&&(e="down"===o||"up"===o?"top":"left","down"===o||"right"===o?(i[e]=m(g(i[e])-a),r[e]="+="+a+"px"):(i[e]=m(g(i[e])+a),r[e]="-="+a+"px")),"none"===n?s._afterZoomIn():s.wrap.css(i).animate(r,{duration:t.nextSpeed,easing:t.nextEasing,complete:s._afterZoomIn})},changeOut:function(){var e=s.previous,t=e.prevEffect,i={opacity:.1},r=s.direction,o=200;"elastic"===t&&(i["down"===r||"up"===r?"top":"left"]=("up"===r||"left"===r?"-":"+")+"="+o+"px"),e.wrap.animate(i,{duration:"none"===t?0:e.prevSpeed,easing:e.prevEasing,complete:function(){n(this).trigger("onReset").remove()}})}},s.helpers.overlay={defaults:{closeClick:!0,speedOut:200,showEarly:!0,css:{},locked:!u,fixed:!0},overlay:null,fixed:!1,el:n("html"),create:function(e){e=n.extend({},this.defaults,e),this.overlay&&this.close(),this.overlay=n('<div class="fancybox-overlay"></div>').appendTo(s.coming?s.coming.parent:e.parent),this.fixed=!1,e.fixed&&s.defaults.fixed&&(this.overlay.addClass("fancybox-overlay-fixed"),this.fixed=!0)},open:function(e){var t=this;e=n.extend({},this.defaults,e),this.overlay?this.overlay.unbind(".overlay").width("auto").height("auto"):this.create(e),this.fixed||(o.bind("resize.overlay",n.proxy(this.update,this)),this.update()),e.closeClick&&this.overlay.bind("click.overlay",function(e){if(n(e.target).hasClass("fancybox-overlay"))return s.isActive?s.close():t.close(),!1}),this.overlay.css(e.css).show()},close:function(){var e,t;o.unbind("resize.overlay"),this.el.hasClass("fancybox-lock")&&(n(".fancybox-margin").removeClass("fancybox-margin"),e=o.scrollTop(),t=o.scrollLeft(),this.el.removeClass("fancybox-lock"),o.scrollTop(e).scrollLeft(t)),n(".fancybox-overlay").remove().hide(),n.extend(this,{overlay:null,fixed:!1})},update:function(){var e,n="100%";this.overlay.width(n).height("100%"),l?(e=Math.max(t.documentElement.offsetWidth,t.body.offsetWidth),a.width()>e&&(n=a.width())):a.width()>o.width()&&(n=a.width()),this.overlay.width(n).height(a.height())},onReady:function(e,t){var i=this.overlay;n(".fancybox-overlay").stop(!0,!0),i||this.create(e),e.locked&&this.fixed&&t.fixed&&(i||(this.margin=a.height()>o.height()&&n("html").css("margin-right").replace("px","")),t.locked=this.overlay.append(t.wrap),t.fixed=!1),e.showEarly===!0&&this.beforeShow.apply(this,arguments)},beforeShow:function(e,t){var i,r;t.locked&&(this.margin!==!1&&(n("*").filter(function(){return"fixed"===n(this).css("position")&&!n(this).hasClass("fancybox-overlay")&&!n(this).hasClass("fancybox-wrap")}).addClass("fancybox-margin"),this.el.addClass("fancybox-margin")),i=o.scrollTop(),r=o.scrollLeft(),this.el.addClass("fancybox-lock"),o.scrollTop(i).scrollLeft(r)),this.open(e)},onUpdate:function(){this.fixed||this.update()},afterClose:function(e){this.overlay&&!s.coming&&this.overlay.fadeOut(e.speedOut,n.proxy(this.close,this))}},s.helpers.title={defaults:{type:"float",position:"bottom"},beforeShow:function(e){var t,i,r=s.current,o=r.title,a=e.type;if(n.isFunction(o)&&(o=o.call(r.element,r)),p(o)&&""!==n.trim(o)){switch(t=n('<div class="fancybox-title fancybox-title-'+a+'-wrap">'+o+"</div>"),a){case"inside":i=s.skin;break;case"outside":i=s.wrap;break;case"over":i=s.inner;break;default:i=s.skin,t.appendTo("body"),l&&t.width(t.width()),t.wrapInner('<span class="child"></span>'),s.current.margin[2]+=Math.abs(g(t.css("margin-bottom")))}t["top"===e.position?"prependTo":"appendTo"](i)}}},n.fn.fancybox=function(e){var t,i=n(this),r=this.selector||"",o=function(o){var a,l,c=n(this).blur(),u=t;o.ctrlKey||o.altKey||o.shiftKey||o.metaKey||c.is(".fancybox-wrap")||(a=e.groupAttr||"data-fancybox-group",l=c.attr(a),l||(a="rel",l=c.get(0)[a]),l&&""!==l&&"nofollow"!==l&&(c=r.length?n(r):i,c=c.filter("["+a+'="'+l+'"]'),u=c.index(this)),e.index=u,s.open(c,e)!==!1&&o.preventDefault())};return e=e||{},t=e.index||0,r&&e.live!==!1?a.undelegate(r,"click.fb-start").delegate(r+":not('.fancybox-item, .fancybox-nav')","click.fb-start",o):i.unbind("click.fb-start").bind("click.fb-start",o),this.filter("[data-fancybox-start=1]").trigger("click"),this},a.ready(function(){var t,o;n.scrollbarWidth===i&&(n.scrollbarWidth=function(){var e=n('<div style="width:50px;height:50px;overflow:auto"><div/></div>').appendTo("body"),t=e.children(),i=t.innerWidth()-t.height(99).innerWidth();return e.remove(),i}),n.support.fixedPosition===i&&(n.support.fixedPosition=function(){var e=n('<div style="position:fixed;top:20px;"></div>').appendTo("body"),t=20===e[0].offsetTop||15===e[0].offsetTop;return e.remove(),t}()),n.extend(s.defaults,{scrollbarWidth:n.scrollbarWidth(),fixed:n.support.fixedPosition,parent:n("body")}),t=n(e).width(),r.addClass("fancybox-lock-test"),o=n(e).width(),r.removeClass("fancybox-lock-test"),n("<style type='text/css'>.fancybox-margin{margin-right:"+(o-t)+"px;}</style>").appendTo("head")})}(window,document,jQuery),function(e){"function"==typeof define&&define.amd&&define.amd.jQuery?define(["jquery"],e):e("undefined"!=typeof module&&module.exports?require("jquery"):jQuery)}(function(e){"use strict";function t(t){return!t||void 0!==t.allowPageScroll||void 0===t.swipe&&void 0===t.swipeStatus||(t.allowPageScroll=u),void 0!==t.click&&void 0===t.tap&&(t.tap=t.click),t||(t={}),t=e.extend({},e.fn.swipe.defaults,t),this.each(function(){var i=e(this),r=i.data(P);r||(r=new n(this,t),i.data(P,r))})}function n(t,n){function i(t){if(!(ce()||e(t.target).closest(n.excludedElements,Ue).length>0)){var i=t.originalEvent?t.originalEvent:t;if(!i.pointerType||"mouse"!=i.pointerType||0!=n.fallbackToMouseEvents){var r,o=i.touches,a=o?o[0]:i;return Ge=b,o?Ve=o.length:n.preventDefaultEvents!==!1&&t.preventDefault(),Le=0,Ie=null,Ne=null,qe=null,Fe=0,He=0,$e=0,ze=1,Be=0,We=me(),se(),de(0,a),!o||Ve===n.fingers||n.fingers===x||q()?(Qe=Se(),2==Ve&&(de(1,o[1]),He=$e=xe(Ke[0].start,Ke[1].start)),(n.swipeStatus||n.pinchStatus)&&(r=L(i,Ge))):r=!1,r===!1?(Ge=_,L(i,Ge),r):(n.hold&&(tt=setTimeout(e.proxy(function(){Ue.trigger("hold",[i.target]),n.hold&&(r=n.hold.call(Ue,i,i.target))},this),n.longTapThreshold)),ue(!0),null)}}}function A(e){var t=e.originalEvent?e.originalEvent:e;if(Ge!==C&&Ge!==_&&!le()){var i,r=t.touches,o=r?r[0]:t,a=pe(o);if(Xe=Se(),r&&(Ve=r.length),n.hold&&clearTimeout(tt),Ge=k,2==Ve&&(0==He?(de(1,r[1]),He=$e=xe(Ke[0].start,Ke[1].start)):(pe(r[1]),$e=xe(Ke[0].end,Ke[1].end),qe=be(Ke[0].end,Ke[1].end)),ze=we(He,$e),Be=Math.abs(He-$e)),Ve===n.fingers||n.fingers===x||!r||q()){if(Ie=_e(a.start,a.end),Ne=_e(a.last,a.end),z(e,Ne),Le=ke(a.start,a.end),Fe=ye(),fe(Ie,Le),i=L(t,Ge),!n.triggerOnTouchEnd||n.triggerOnTouchLeave){var s=!0;if(n.triggerOnTouchLeave){var l=Te(this);s=Ee(a.end,l)}!n.triggerOnTouchEnd&&s?Ge=R(k):n.triggerOnTouchLeave&&!s&&(Ge=R(C)),
Ge!=_&&Ge!=C||L(t,Ge)}}else Ge=_,L(t,Ge);i===!1&&(Ge=_,L(t,Ge))}}function D(e){var t=e.originalEvent?e.originalEvent:e,i=t.touches;if(i){if(i.length&&!le())return ae(t),!0;if(i.length&&le())return!0}return le()&&(Ve=Ze),Xe=Se(),Fe=ye(),F()||!N()?(Ge=_,L(t,Ge)):n.triggerOnTouchEnd||n.triggerOnTouchEnd===!1&&Ge===k?(n.preventDefaultEvents!==!1&&e.preventDefault(),Ge=C,L(t,Ge)):!n.triggerOnTouchEnd&&X()?(Ge=C,I(t,Ge,f)):Ge===k&&(Ge=_,L(t,Ge)),ue(!1),null}function O(){Ve=0,Xe=0,Qe=0,He=0,$e=0,ze=1,se(),ue(!1)}function j(e){var t=e.originalEvent?e.originalEvent:e;n.triggerOnTouchLeave&&(Ge=R(C),L(t,Ge))}function M(){Ue.unbind(De,i),Ue.unbind(Re,O),Ue.unbind(Oe,A),Ue.unbind(je,D),Me&&Ue.unbind(Me,j),ue(!1)}function R(e){var t=e,i=$(),r=N(),o=F();return!i||o?t=_:!r||e!=k||n.triggerOnTouchEnd&&!n.triggerOnTouchLeave?!r&&e==C&&n.triggerOnTouchLeave&&(t=_):t=C,t}function L(e,t){var n,i=e.touches;return(V()||G())&&(n=I(e,t,p)),(W()||q())&&n!==!1&&(n=I(e,t,h)),re()&&n!==!1?n=I(e,t,g):oe()&&n!==!1?n=I(e,t,m):ie()&&n!==!1&&(n=I(e,t,f)),t===_&&O(e),t===C&&(i?i.length||O(e):O(e)),n}function I(t,i,u){var d;if(u==p){if(Ue.trigger("swipeStatus",[i,Ie||null,Le||0,Fe||0,Ve,Ke,Ne]),n.swipeStatus&&(d=n.swipeStatus.call(Ue,t,i,Ie||null,Le||0,Fe||0,Ve,Ke,Ne),d===!1))return!1;if(i==C&&U()){if(clearTimeout(et),clearTimeout(tt),Ue.trigger("swipe",[Ie,Le,Fe,Ve,Ke,Ne]),n.swipe&&(d=n.swipe.call(Ue,t,Ie,Le,Fe,Ve,Ke,Ne),d===!1))return!1;switch(Ie){case r:Ue.trigger("swipeLeft",[Ie,Le,Fe,Ve,Ke,Ne]),n.swipeLeft&&(d=n.swipeLeft.call(Ue,t,Ie,Le,Fe,Ve,Ke,Ne));break;case o:Ue.trigger("swipeRight",[Ie,Le,Fe,Ve,Ke,Ne]),n.swipeRight&&(d=n.swipeRight.call(Ue,t,Ie,Le,Fe,Ve,Ke,Ne));break;case a:Ue.trigger("swipeUp",[Ie,Le,Fe,Ve,Ke,Ne]),n.swipeUp&&(d=n.swipeUp.call(Ue,t,Ie,Le,Fe,Ve,Ke,Ne));break;case s:Ue.trigger("swipeDown",[Ie,Le,Fe,Ve,Ke,Ne]),n.swipeDown&&(d=n.swipeDown.call(Ue,t,Ie,Le,Fe,Ve,Ke,Ne))}}}if(u==h){if(Ue.trigger("pinchStatus",[i,qe||null,Be||0,Fe||0,Ve,ze,Ke]),n.pinchStatus&&(d=n.pinchStatus.call(Ue,t,i,qe||null,Be||0,Fe||0,Ve,ze,Ke),d===!1))return!1;if(i==C&&B())switch(qe){case l:Ue.trigger("pinchIn",[qe||null,Be||0,Fe||0,Ve,ze,Ke]),n.pinchIn&&(d=n.pinchIn.call(Ue,t,qe||null,Be||0,Fe||0,Ve,ze,Ke));break;case c:Ue.trigger("pinchOut",[qe||null,Be||0,Fe||0,Ve,ze,Ke]),n.pinchOut&&(d=n.pinchOut.call(Ue,t,qe||null,Be||0,Fe||0,Ve,ze,Ke))}}return u==f?i!==_&&i!==C||(clearTimeout(et),clearTimeout(tt),Y()&&!ee()?(Je=Se(),et=setTimeout(e.proxy(function(){Je=null,Ue.trigger("tap",[t.target]),n.tap&&(d=n.tap.call(Ue,t,t.target))},this),n.doubleTapThreshold)):(Je=null,Ue.trigger("tap",[t.target]),n.tap&&(d=n.tap.call(Ue,t,t.target)))):u==g?i!==_&&i!==C||(clearTimeout(et),clearTimeout(tt),Je=null,Ue.trigger("doubletap",[t.target]),n.doubleTap&&(d=n.doubleTap.call(Ue,t,t.target))):u==m&&(i!==_&&i!==C||(clearTimeout(et),Je=null,Ue.trigger("longtap",[t.target]),n.longTap&&(d=n.longTap.call(Ue,t,t.target)))),d}function N(){var e=!0;return null!==n.threshold&&(e=Le>=n.threshold),e}function F(){var e=!1;return null!==n.cancelThreshold&&null!==Ie&&(e=ge(Ie)-Le>=n.cancelThreshold),e}function H(){return null===n.pinchThreshold||Be>=n.pinchThreshold}function $(){var e;return e=!n.maxTimeThreshold||!(Fe>=n.maxTimeThreshold)}function z(e,t){if(n.preventDefaultEvents!==!1)if(n.allowPageScroll===u)e.preventDefault();else{var i=n.allowPageScroll===d;switch(t){case r:(n.swipeLeft&&i||!i&&n.allowPageScroll!=v)&&e.preventDefault();break;case o:(n.swipeRight&&i||!i&&n.allowPageScroll!=v)&&e.preventDefault();break;case a:(n.swipeUp&&i||!i&&n.allowPageScroll!=y)&&e.preventDefault();break;case s:(n.swipeDown&&i||!i&&n.allowPageScroll!=y)&&e.preventDefault();break;case u:}}}function B(){var e=K(),t=Q(),n=H();return e&&t&&n}function q(){return!!(n.pinchStatus||n.pinchIn||n.pinchOut)}function W(){return!(!B()||!q())}function U(){var e=$(),t=N(),n=K(),i=Q(),r=F(),o=!r&&i&&n&&t&&e;return o}function G(){return!!(n.swipe||n.swipeStatus||n.swipeLeft||n.swipeRight||n.swipeUp||n.swipeDown)}function V(){return!(!U()||!G())}function K(){return Ve===n.fingers||n.fingers===x||!S}function Q(){return 0!==Ke[0].end.x}function X(){return!!n.tap}function Y(){return!!n.doubleTap}function Z(){return!!n.longTap}function J(){if(null==Je)return!1;var e=Se();return Y()&&e-Je<=n.doubleTapThreshold}function ee(){return J()}function te(){return(1===Ve||!S)&&(isNaN(Le)||Le<n.threshold)}function ne(){return Fe>n.longTapThreshold&&Le<w}function ie(){return!(!te()||!X())}function re(){return!(!J()||!Y())}function oe(){return!(!ne()||!Z())}function ae(e){Ye=Se(),Ze=e.touches.length+1}function se(){Ye=0,Ze=0}function le(){var e=!1;if(Ye){var t=Se()-Ye;t<=n.fingerReleaseThreshold&&(e=!0)}return e}function ce(){return!(Ue.data(P+"_intouch")!==!0)}function ue(e){Ue&&(e===!0?(Ue.bind(Oe,A),Ue.bind(je,D),Me&&Ue.bind(Me,j)):(Ue.unbind(Oe,A,!1),Ue.unbind(je,D,!1),Me&&Ue.unbind(Me,j,!1)),Ue.data(P+"_intouch",e===!0))}function de(e,t){var n={start:{x:0,y:0},last:{x:0,y:0},end:{x:0,y:0}};return n.start.x=n.last.x=n.end.x=t.pageX||t.clientX,n.start.y=n.last.y=n.end.y=t.pageY||t.clientY,Ke[e]=n,n}function pe(e){var t=void 0!==e.identifier?e.identifier:0,n=he(t);return null===n&&(n=de(t,e)),n.last.x=n.end.x,n.last.y=n.end.y,n.end.x=e.pageX||e.clientX,n.end.y=e.pageY||e.clientY,n}function he(e){return Ke[e]||null}function fe(e,t){e!=u&&(t=Math.max(t,ge(e)),We[e].distance=t)}function ge(e){if(We[e])return We[e].distance}function me(){var e={};return e[r]=ve(r),e[o]=ve(o),e[a]=ve(a),e[s]=ve(s),e}function ve(e){return{direction:e,distance:0}}function ye(){return Xe-Qe}function xe(e,t){var n=Math.abs(e.x-t.x),i=Math.abs(e.y-t.y);return Math.round(Math.sqrt(n*n+i*i))}function we(e,t){var n=t/e*1;return n.toFixed(2)}function be(){return ze<1?c:l}function ke(e,t){return Math.round(Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2)))}function Ce(e,t){var n=e.x-t.x,i=t.y-e.y,r=Math.atan2(i,n),o=Math.round(180*r/Math.PI);return o<0&&(o=360-Math.abs(o)),o}function _e(e,t){if(Pe(e,t))return u;var n=Ce(e,t);return n<=45&&n>=0?r:n<=360&&n>=315?r:n>=135&&n<=225?o:n>45&&n<135?s:a}function Se(){var e=new Date;return e.getTime()}function Te(t){t=e(t);var n=t.offset(),i={left:n.left,right:n.left+t.outerWidth(),top:n.top,bottom:n.top+t.outerHeight()};return i}function Ee(e,t){return e.x>t.left&&e.x<t.right&&e.y>t.top&&e.y<t.bottom}function Pe(e,t){return e.x==t.x&&e.y==t.y}var n=e.extend({},n),Ae=S||E||!n.fallbackToMouseEvents,De=Ae?E?T?"MSPointerDown":"pointerdown":"touchstart":"mousedown",Oe=Ae?E?T?"MSPointerMove":"pointermove":"touchmove":"mousemove",je=Ae?E?T?"MSPointerUp":"pointerup":"touchend":"mouseup",Me=Ae?E?"mouseleave":null:"mouseleave",Re=E?T?"MSPointerCancel":"pointercancel":"touchcancel",Le=0,Ie=null,Ne=null,Fe=0,He=0,$e=0,ze=1,Be=0,qe=0,We=null,Ue=e(t),Ge="start",Ve=0,Ke={},Qe=0,Xe=0,Ye=0,Ze=0,Je=0,et=null,tt=null;try{Ue.bind(De,i),Ue.bind(Re,O)}catch(nt){e.error("events not supported "+De+","+Re+" on jQuery.swipe")}this.enable=function(){return this.disable(),Ue.bind(De,i),Ue.bind(Re,O),Ue},this.disable=function(){return M(),Ue},this.destroy=function(){M(),Ue.data(P,null),Ue=null},this.option=function(t,i){if("object"==typeof t)n=e.extend(n,t);else if(void 0!==n[t]){if(void 0===i)return n[t];n[t]=i}else{if(!t)return n;e.error("Option "+t+" does not exist on jQuery.swipe.options")}return null}}var i="1.6.18",r="left",o="right",a="up",s="down",l="in",c="out",u="none",d="auto",p="swipe",h="pinch",f="tap",g="doubletap",m="longtap",v="horizontal",y="vertical",x="all",w=10,b="start",k="move",C="end",_="cancel",S="ontouchstart"in window,T=window.navigator.msPointerEnabled&&!window.navigator.pointerEnabled&&!S,E=(window.navigator.pointerEnabled||window.navigator.msPointerEnabled)&&!S,P="TouchSwipe",A={fingers:1,threshold:75,cancelThreshold:null,pinchThreshold:20,maxTimeThreshold:null,fingerReleaseThreshold:250,longTapThreshold:500,doubleTapThreshold:200,swipe:null,swipeLeft:null,swipeRight:null,swipeUp:null,swipeDown:null,swipeStatus:null,pinchIn:null,pinchOut:null,pinchStatus:null,click:null,tap:null,doubleTap:null,longTap:null,hold:null,triggerOnTouchEnd:!0,triggerOnTouchLeave:!1,allowPageScroll:"auto",fallbackToMouseEvents:!0,excludedElements:".noSwipe",preventDefaultEvents:!0};e.fn.swipe=function(n){var i=e(this),r=i.data(P);if(r&&"string"==typeof n){if(r[n])return r[n].apply(r,Array.prototype.slice.call(arguments,1));e.error("Method "+n+" does not exist on jQuery.swipe")}else if(r&&"object"==typeof n)r.option.apply(r,arguments);else if(!(r||"object"!=typeof n&&n))return t.apply(this,arguments);return i},e.fn.swipe.version=i,e.fn.swipe.defaults=A,e.fn.swipe.phases={PHASE_START:b,PHASE_MOVE:k,PHASE_END:C,PHASE_CANCEL:_},e.fn.swipe.directions={LEFT:r,RIGHT:o,UP:a,DOWN:s,IN:l,OUT:c},e.fn.swipe.pageScroll={NONE:u,HORIZONTAL:v,VERTICAL:y,AUTO:d},e.fn.swipe.fingers={ONE:1,TWO:2,THREE:3,FOUR:4,FIVE:5,ALL:x}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
